<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/07/23/hello-world/"/>
    <url>/2023/07/23/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Titanic数据集预测</title>
    <link href="/2023/07/13/output/dl_titanic/index/"/>
    <url>/2023/07/13/output/dl_titanic/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><p>学习自@<a href="https://blog.csdn.net/csdn_xmj/article/details/122172552">双木的木</a>。</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>在kaggle官网上有<a href="https://www.kaggle.com/c/titanic/data">Titanic</a>有关的数据集，有以下features，现要求对Suvrived特征进行预测。</p><p><img src="/images/image-1689229188640.png" alt="file"></p><h1 id="数据集分析"><a href="#数据集分析" class="headerlink" title="数据集分析"></a>数据集分析</h1><p>数据集被划分为训练集和测试集：</p><ul><li>training set (train.csv)</li><li>test set (test.csv)</li></ul><p>训练集应该被用来建立你的深度学习模型。对于训练集，我们为每个乘客提供结果(也称为“ground truth”)。你的模型将基于乘客的性别和阶级等“特征”。您还可以使用特征工程来创建新的特征。</p><p>测试集应该用来查看您的模型在不可见数据上的性能。对于测试集，我们不为每个乘客提供基本真相。你的工作就是预测这些结果。对于测试中的每一位乘客，使用你训练的模型来预测他们是否在泰坦尼克号沉没时幸存下来。</p><p>还包括gender_submit .csv，这是一组假设所有且只有女性乘客能够存活的预测，作为提交文件的示例。</p><p><img src="/images/image-1689229530750.png" alt="file"></p><p>选取[“Pclass”, “Sex”, “SibSp”, “Parch”, “Fare”]五个特征进行训练。</p><h1 id="模型"><a href="#模型" class="headerlink" title="模型"></a>模型</h1><h2 id="加载数据集"><a href="#加载数据集" class="headerlink" title="加载数据集"></a>加载数据集</h2><h3 id="TitanicDataset"><a href="#TitanicDataset" class="headerlink" title="TitanicDataset"></a>TitanicDataset</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">TitanicDataset</span>(<span class="hljs-title class_ inherited__">Dataset</span>):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, filepath</span>):<br>        features = [<span class="hljs-string">&quot;Pclass&quot;</span>, <span class="hljs-string">&quot;Sex&quot;</span>, <span class="hljs-string">&quot;SibSp&quot;</span>, <span class="hljs-string">&quot;Parch&quot;</span>, <span class="hljs-string">&quot;Fare&quot;</span>]<br>        xy = pd.read_csv(filepath)<br>        self.<span class="hljs-built_in">len</span> = xy.shape[<span class="hljs-number">0</span>] <span class="hljs-comment"># [0]代表行数，[1]代表列数</span><br>        <span class="hljs-comment"># dummies相当于one-hot编码</span><br>        self.x_data = torch.from_numpy(np.array(pd.get_dummies(xy[features], dtype=np.float32))).<span class="hljs-built_in">float</span>()<br>        <span class="hljs-comment"># np.array(data[&#x27;survived&#x27;])是对data[&#x27;survived&#x27;]创建一个矩阵</span><br>        <span class="hljs-comment"># torch.from_numpy()是将括号内的矩阵形式转换为张量形式，方便torch处理</span><br>        self.y_data = torch.from_numpy(np.array(xy[<span class="hljs-string">&#x27;Survived&#x27;</span>], dtype=np.float32)).<span class="hljs-built_in">float</span>()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__getitem__</span>(<span class="hljs-params">self, index</span>):<br>        <span class="hljs-keyword">return</span> self.x_data[index], self.y_data[index]<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__len__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-keyword">return</span> self.<span class="hljs-built_in">len</span><br><br>titanic_train = TitanicDataset(<span class="hljs-string">r&#x27;./titanic/train.csv&#x27;</span>)<br>train_loader = DataLoader(dataset=titanic_train, batch_size=<span class="hljs-number">16</span>, shuffle=<span class="hljs-literal">True</span>, num_workers=<span class="hljs-number">2</span>)<br></code></pre></td></tr></table></figure><h2 id="构造模型"><a href="#构造模型" class="headerlink" title="构造模型"></a>构造模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Model</span>(torch.nn.Module):<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self</span>):<br>        <span class="hljs-comment"># 对继承于torch.nn的父模块类进行初始化</span><br>        <span class="hljs-built_in">super</span>(Model, self).__init__()<br>        <span class="hljs-comment"># 这里包括2个线性层，每一个线性层输出都用激活函数激活</span><br>        self.linear1 = torch.nn.Linear(<span class="hljs-number">6</span>, <span class="hljs-number">3</span>) <span class="hljs-comment"># 五个特征转化为了6维，因为get_dummies将性别这一个特征用两个维度来表示，即男性[1,0],女性[0，1]</span><br>        self.linear2 = torch.nn.Linear(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)<br>        <span class="hljs-comment"># 激活函数从Sigmoid这一大类激活函数中选取sigmoid这一种激活函数</span><br>        self.sigmoid = torch.nn.Sigmoid()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">forward</span>(<span class="hljs-params">self, x</span>):<br>        x = self.sigmoid(self.linear1(x))<br>        x = self.sigmoid(self.linear2(x))<br>        <span class="hljs-keyword">return</span> x<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self</span>):<br>        val_correct, total = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>                inputs, label = data<br>                predicted = model.predict(inputs)<br>                total += label.size(<span class="hljs-number">0</span>)<br>                val_correct += (predicted == np.array(label)).<span class="hljs-built_in">sum</span>()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Accuracy: %d&#x27;</span> %(val_correct / total * <span class="hljs-number">100</span>))<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 该函数用在测试集过程，因此只有前馈，没有什么</span><br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            x = self.sigmoid(self.linear1(x))<br>            x = self.sigmoid(self.linear2(x))<br>            y = []<br>            <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> x:<br>                <span class="hljs-keyword">if</span> result &gt; <span class="hljs-number">0.5</span>:<br>                    y.append(<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    y.append(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> y<br><br>model = Model()<br></code></pre></td></tr></table></figure><h2 id="损失函数和优化器"><a href="#损失函数和优化器" class="headerlink" title="损失函数和优化器"></a>损失函数和优化器</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs python">criterion = torch.nn.BCELoss(reduction=<span class="hljs-string">&#x27;mean&#x27;</span>)<br>optimizer = torch.optim.SGD(model.parameters(), lr=<span class="hljs-number">0.001</span>)<br></code></pre></td></tr></table></figure><h2 id="训练模型"><a href="#训练模型" class="headerlink" title="训练模型"></a>训练模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    <span class="hljs-keyword">for</span> epoch <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">100</span>):<br>        <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>            inputs, label = data<br>            y_pred = model(inputs)<br>            y_pred = y_pred.squeeze(-<span class="hljs-number">1</span>) <span class="hljs-comment"># 将维度降至1维并输出出来</span><br>            loss = criterion(y_pred, label) <span class="hljs-comment"># 将预测的值与标签进行比较，并求解出误差值</span><br>            <span class="hljs-built_in">print</span>(epoch, i, loss.item())<br><br>            optimizer.zero_grad() <span class="hljs-comment"># 之前的梯度进行清零，否则梯度会累加起来</span><br>            loss.backward() <span class="hljs-comment"># 反向传播</span><br>            optimizer.step() <span class="hljs-comment"># 更新</span><br></code></pre></td></tr></table></figure><h2 id="验证模型"><a href="#验证模型" class="headerlink" title="验证模型"></a>验证模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">verify</span>(<span class="hljs-params">self</span>):<br>        val_correct, total = <span class="hljs-number">0</span>, <span class="hljs-number">0</span><br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            <span class="hljs-keyword">for</span> i, data <span class="hljs-keyword">in</span> <span class="hljs-built_in">enumerate</span>(train_loader, <span class="hljs-number">0</span>):<br>                inputs, label = data<br>                predicted = model(inputs)<br>                total += label.size(<span class="hljs-number">0</span>)<br>                val_correct += (predicted == label).<span class="hljs-built_in">sum</span>().item()<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;Accuracy: %d %%&#x27;</span> %(val_correct / total * <span class="hljs-number">100</span>))<br><br>model.verify()<br></code></pre></td></tr></table></figure><h2 id="测试模型"><a href="#测试模型" class="headerlink" title="测试模型"></a>测试模型</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">predict</span>(<span class="hljs-params">self, x</span>):<br>        <span class="hljs-comment"># 该函数用在测试集过程，因此只有前馈，没有什么</span><br>        <span class="hljs-keyword">with</span> torch.no_grad():<br>            x = self.sigmoid(self.linear1(x))<br>            x = self.sigmoid(self.linear2(x))<br>            y = []<br>            <span class="hljs-keyword">for</span> result <span class="hljs-keyword">in</span> x:<br>                <span class="hljs-keyword">if</span> result &gt; <span class="hljs-number">0.5</span>:<br>                    y.append(<span class="hljs-number">1</span>)<br>                <span class="hljs-keyword">else</span>:<br>                    y.append(<span class="hljs-number">0</span>)<br>            <span class="hljs-keyword">return</span> y<br><br>test_data = pd.read_csv(<span class="hljs-string">r&#x27;./titanic/test.csv&#x27;</span>)<br>features = [<span class="hljs-string">&quot;Pclass&quot;</span>, <span class="hljs-string">&quot;Sex&quot;</span>, <span class="hljs-string">&quot;SibSp&quot;</span>, <span class="hljs-string">&quot;Parch&quot;</span>, <span class="hljs-string">&quot;Fare&quot;</span>]<br>test = torch.from_numpy(np.array(pd.get_dummies(test_data[features]), dtype=np.float32))<br><br>result = model.predict(test)<br><br>submission = pd.read_csv(<span class="hljs-string">r&#x27;./titanic/gender_submission.csv&#x27;</span>)<br>submission[<span class="hljs-string">&#x27;Survived&#x27;</span>] = result<br>submission.to_csv(<span class="hljs-string">r&#x27;./titanic/gender_submission_result_1.csv&#x27;</span>, index=<span class="hljs-literal">False</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>deep-learning</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>蚝油拌面</title>
    <link href="/2023/07/05/output/noodles-with-oyster-sauce/index/"/>
    <url>/2023/07/05/output/noodles-with-oyster-sauce/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="step-1"><a href="#step-1" class="headerlink" title="step 1"></a>step 1</h1><h2 id="准备葱、辣椒、大蒜"><a href="#准备葱、辣椒、大蒜" class="headerlink" title="准备葱、辣椒、大蒜"></a>准备葱、辣椒、大蒜</h2><p><img src="/images/image-1688534842037.png" alt="file"></p><h2 id="切碎备用"><a href="#切碎备用" class="headerlink" title="切碎备用"></a>切碎备用</h2><p><img src="/images/image-1688534851215.png" alt="file"></p><h1 id="step-2"><a href="#step-2" class="headerlink" title="step 2"></a>step 2</h1><h2 id="煮好面过冷水"><a href="#煮好面过冷水" class="headerlink" title="煮好面过冷水"></a>煮好面过冷水</h2><p><img src="/images/image-1688534859382.png" alt="file"></p><h1 id="step-3"><a href="#step-3" class="headerlink" title="step 3"></a>step 3</h1><h2 id="锅热倒油烧热"><a href="#锅热倒油烧热" class="headerlink" title="锅热倒油烧热"></a>锅热倒油烧热</h2><p><img src="/images/image-1688534885367.png" alt="file"></p><h1 id="step-4"><a href="#step-4" class="headerlink" title="step 4"></a>step 4</h1><h2 id="加入切碎的蒜、辣椒、葱花"><a href="#加入切碎的蒜、辣椒、葱花" class="headerlink" title="加入切碎的蒜、辣椒、葱花"></a>加入切碎的蒜、辣椒、葱花</h2><p><img src="/images/image-1688534922431.png" alt="file"></p><h2 id="加入白芝麻、花生碎、蚝油，然后浇热油"><a href="#加入白芝麻、花生碎、蚝油，然后浇热油" class="headerlink" title="加入白芝麻、花生碎、蚝油，然后浇热油"></a>加入白芝麻、花生碎、蚝油，然后浇热油</h2><p><img src="/images/image-1688534961440.png" alt="file"></p><h2 id="一勺白糖，两勺生抽，一勺醋，搅拌均匀"><a href="#一勺白糖，两勺生抽，一勺醋，搅拌均匀" class="headerlink" title="一勺白糖，两勺生抽，一勺醋，搅拌均匀"></a>一勺白糖，两勺生抽，一勺醋，搅拌均匀</h2><p><img src="/images/image-1688535012079.png" alt="file"></p>]]></content>
    
    
    <categories>
      
      <category>美食教程</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>利用时钟周期评测性能</title>
    <link href="/2023/04/23/output/rdtsc/index/"/>
    <url>/2023/04/23/output/rdtsc/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="rdtsc指令"><a href="#rdtsc指令" class="headerlink" title="rdtsc指令"></a>rdtsc指令</h1><p>rdtsc指令, 该指令返回CPU自启动以来的时钟周期数；该时钟周期数，即处理器的时间戳。</p><p>在CPU通电启动后，首先会重置EDX和EAX，在每个时钟周期上升或下降沿到来时，会自动累计周期数，并被记录到EDX和EAX寄存器中，EDX是高位，EAX是低位。</p><p>rdtsc指令就是从该寄存器中进行获取的。</p><p>周期和频率的关系公式：T（周期）&#x3D;1&#x2F;f（频率）</p><p>如CPU频率f为1GHz，则其时钟周期T&#x3D;1&#x2F;1GHz秒，意味着每隔T秒，CPU完成一个最基本的动作，并在寄存器中，对周期数加1。</p><p>故，假设当前时钟周期数为m，则可计算出CPU自启动后，累计运行时间X&#x3D;m*T.</p><p>$$CPU累计运行时间&#x3D;时钟周期数&#x2F;CPU频率$$</p><h1 id="固定CPU频率"><a href="#固定CPU频率" class="headerlink" title="固定CPU频率"></a>固定CPU频率</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo apt-get update<br>sudo apt-get install cpufrequtils<br><span class="hljs-built_in">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_available_governors<br>sudo cpufreq-set -g performance<br><br><span class="hljs-comment"># 不能一次性设置，需要手动一个一个设置</span><br>cpufreq-set -c 0 -f 2.4G<br>cpufreq-set -c 1 -f 2.4G<br>cpufreq-set -c 2 -f 2.4G<br>cpufreq-set -c 3 -f 2.4G<br>cpufreq-set -c 4 -f 2.4G<br>cpufreq-set -c 5 -f 2.4G<br>cpufreq-set -c 6 -f 2.4G<br>cpufreq-set -c 7 -f 2.4G<br>cpufreq-set -c 8 -f 2.4G<br>cpufreq-set -c 9 -f 2.4G<br>cpufreq-set -c 10 -f 2.4G<br>cpufreq-set -c 11 -f 2.4G<br>cpufreq-set -c 12 -f 2.4G<br>cpufreq-set -c 13 -f 2.4G<br>cpufreq-set -c 14 -f 2.4G<br>cpufreq-set -c 15 -f 2.4G<br><br><span class="hljs-built_in">cat</span> /proc/cpuinfo | grep MHz<br></code></pre></td></tr></table></figure><h1 id="绑定CPU核"><a href="#绑定CPU核" class="headerlink" title="绑定CPU核"></a>绑定CPU核</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">static</span> <span class="hljs-type">bool</span> <span class="hljs-title">bind_to_core</span><span class="hljs-params">(<span class="hljs-type">int</span> tid)</span> </span>&#123;<br>    <span class="hljs-comment">// return;</span><br>    <span class="hljs-type">cpu_set_t</span> mask;<br>    <span class="hljs-built_in">CPU_ZERO</span>(&amp;mask);<br>    <span class="hljs-built_in">CPU_SET</span>(tid, &amp;mask);<br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">sched_setaffinity</span>(<span class="hljs-number">0</span>, <span class="hljs-built_in">sizeof</span>(mask), &amp;mask) != <span class="hljs-number">0</span>) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;Failed to set affinity (core: &quot;</span> &lt;&lt; tid &lt;&lt; <span class="hljs-string">&quot;)&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>绑定第15个CPU核。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">bind_to_core</span>(<span class="hljs-number">15</span>);<br></code></pre></td></tr></table></figure><h1 id="获取时钟周期"><a href="#获取时钟周期" class="headerlink" title="获取时钟周期"></a>获取时钟周期</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">rdtsc</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">unsigned</span> <span class="hljs-type">int</span> lo, hi;<br>    __asm__ __volatile__ (<span class="hljs-string">&quot;rdtsc&quot;</span> : <span class="hljs-string">&quot;=a&quot;</span> (lo), <span class="hljs-string">&quot;=d&quot;</span> (hi));<br>    <span class="hljs-keyword">return</span> ((<span class="hljs-type">unsigned</span> <span class="hljs-type">long</span> <span class="hljs-type">long</span>)hi &lt;&lt; <span class="hljs-number">32</span>) | lo;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>hpc</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>python 全局替换</title>
    <link href="/2023/04/13/output/python-all-replace/index/"/>
    <url>/2023/04/13/output/python-all-replace/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="code"><a href="#code" class="headerlink" title="code"></a>code</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-comment"># coding:unicode_escape</span><br><br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">import</span> chardet<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> sys<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">replace</span>:<br>    path = <span class="hljs-string">&quot;&quot;</span><br>    dict_repalce = &#123;&#125;<br>    tuple_notreplace = ()<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, p, ex, d, t</span>):<br>        self.path = p<br>        self.exclude_path = ex<br>        self.dict_replace = d<br>        self.tuple_notreplace = t<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">replace</span>(<span class="hljs-params">self</span>):<br>        ex = os.path.basename(self.path)<br>        <span class="hljs-keyword">if</span> ex <span class="hljs-keyword">in</span> self.exclude_path:<br>            <span class="hljs-keyword">return</span>;<br>        li_os = os.listdir(self.path)            <span class="hljs-comment"># 返回一个文件(文件夹)的列表</span><br>        <span class="hljs-keyword">for</span> every_dir <span class="hljs-keyword">in</span> li_os:<br>            filePath = os.path.join(self.path, every_dir)<br>            <span class="hljs-keyword">if</span> os.path.isdir(filePath):          <span class="hljs-comment"># 如果是一个文件夹</span><br>                <span class="hljs-built_in">print</span>(filePath, <span class="hljs-string">&quot;这是一个文件夹&quot;</span>)<br>                filename = os.path.basename(filePath)<br>                bool_change = <span class="hljs-literal">False</span>              <span class="hljs-comment">#判断文件夹名是否更改的标志</span><br>                <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> self.dict_replace.keys(): <span class="hljs-comment"># 循环查看key</span><br>                    <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> filename:              <span class="hljs-comment"># 查看key是不是存在文件名的一部分</span><br>                        filename_new = filename.replace(key, self.dict_replace[key])<br>                        bool_change = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> bool_change == <span class="hljs-literal">True</span>:              <span class="hljs-comment">#判断文件夹名是否需要修改</span><br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;filename&#125;</span> -&gt; <span class="hljs-subst">&#123;filename_new&#125;</span> 正在修改文件夹名...&quot;</span>)<br>                    filename_new = os.path.dirname(filePath) + os.sep + filename_new<br>                    os.rename(filePath, filename_new) <span class="hljs-comment">#修改文件夹名</span><br>                    <span class="hljs-built_in">print</span>(filename_new, <span class="hljs-string">&quot;文件夹名修改成功。&quot;</span>)<br>                    filePath = filename_new<br>                replace(filePath, self.exclude_path, self.dict_replace, self.tuple_notreplace).replace()<br><br>            <span class="hljs-keyword">elif</span> os.path.isfile(filePath):           <span class="hljs-comment"># 判断是不是一个文件</span><br>                <span class="hljs-built_in">print</span>(filePath, <span class="hljs-string">&quot;这是一个文件&quot;</span>)<br>                filename = os.path.basename(filePath)<br>                filename_li = filename.split(<span class="hljs-string">&#x27;.&#x27;</span>)  <span class="hljs-comment">#分割，防止在修改文件名的时候把文件格式后缀一起修改了</span><br>                bool_change = <span class="hljs-literal">False</span>                <span class="hljs-comment">#判断文件名是否更改的标志</span><br>                <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> self.dict_replace.keys():  <span class="hljs-comment"># 循环查看key</span><br>                    <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> filename_li[<span class="hljs-number">0</span>]:         <span class="hljs-comment"># 查看key是不是存在文件名的一部分</span><br>                        filename_li[<span class="hljs-number">0</span>] = filename_li[<span class="hljs-number">0</span>].replace(key, self.dict_replace[key])<br>                        bool_change = <span class="hljs-literal">True</span><br>                <span class="hljs-keyword">if</span> bool_change == <span class="hljs-literal">True</span>:               <span class="hljs-comment">#判断文件名是否需要修改</span><br>                    filename_new = <span class="hljs-string">&#x27;.&#x27;</span>.join(filename_li)<br>                    <span class="hljs-built_in">print</span>(<span class="hljs-string">f&quot;<span class="hljs-subst">&#123;filename&#125;</span> -&gt; <span class="hljs-subst">&#123;filename_new&#125;</span> 正在修改文件名...&quot;</span>)<br>                    filename_new = os.path.dirname(filePath) + os.sep + filename_new<br>                    os.rename(filePath, filename_new) <span class="hljs-comment">#修改文件名</span><br>                    <span class="hljs-built_in">print</span>(filename_new, <span class="hljs-string">&quot;文件名修改成功。&quot;</span>)<br>                    filePath = filename_new<br><br>                <span class="hljs-keyword">for</span> notreplace <span class="hljs-keyword">in</span> self.tuple_notreplace:   <span class="hljs-comment"># 循环不能更改内容的元组</span><br>                    <span class="hljs-keyword">if</span> os.path.basename(filePath).endswith(notreplace):<br>                        <span class="hljs-keyword">break</span><br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">try</span>:<br>                      <span class="hljs-built_in">print</span>(filePath, <span class="hljs-string">&quot;正在修改文件内容...&quot;</span>)<br>                      code = chardet.detect(<span class="hljs-built_in">open</span>(filePath, <span class="hljs-string">&#x27;rb&#x27;</span>).read())[<span class="hljs-string">&#x27;encoding&#x27;</span>]<br>                      <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filePath, encoding = code, errors=<span class="hljs-string">&#x27;ignores&#x27;</span>) <span class="hljs-keyword">as</span> f:<br>                          file_str = f.read()<br>                      <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> self.dict_replace.keys():   <span class="hljs-comment"># 循环查看key</span><br>                          <span class="hljs-keyword">if</span> key <span class="hljs-keyword">in</span> file_str:                <span class="hljs-comment"># 查看key是不是存在文件名的一部分</span><br>                              file_str = file_str.replace(key, self.dict_replace[key])<br>                      <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(filePath, <span class="hljs-string">&#x27;w&#x27;</span>, encoding = code) <span class="hljs-keyword">as</span> f:<br>                          f.write(file_str)<br>                          <span class="hljs-built_in">print</span>(filePath, <span class="hljs-string">&quot;文件内容修改完成。&quot;</span>)<br>                    <span class="hljs-keyword">except</span>:<br>                        <span class="hljs-keyword">pass</span><br><br><span class="hljs-keyword">if</span> __name__==<span class="hljs-string">&quot;__main__&quot;</span>:<br>    path = sys.argv[<span class="hljs-number">1</span>]    <span class="hljs-comment"># 处理路径</span><br>    exclude_dir = &#123;<span class="hljs-string">&#x27;.git&#x27;</span>&#125;<br>    dict_replace =&#123;<span class="hljs-string">&#x27;pcl&#x27;</span>:<span class="hljs-string">&quot;xcl&quot;</span>, <span class="hljs-string">&#x27;PCL&#x27;</span>:<span class="hljs-string">&#x27;XCL&#x27;</span>&#125; <span class="hljs-comment"># 需要替换字符串的字典</span><br>    tuple_notreplace = (<span class="hljs-string">&#x27;.png&#x27;</span>,<span class="hljs-string">&#x27;.pptx&#x27;</span>,<span class="hljs-string">&#x27;.xlsx&#x27;</span>,<span class="hljs-string">&#x27;.docx&#x27;</span>,<span class="hljs-string">&#x27;jpg&#x27;</span>, <span class="hljs-string">&#x27;.pdf&#x27;</span>) <span class="hljs-comment">#不替换内容的元组</span><br>    re = replace(path, exclude_dir, dict_replace, tuple_notreplace)<br>    start = time.perf_counter()<br>    re.replace()<br>    end = time.perf_counter()<br>    <span class="hljs-built_in">print</span> (<span class="hljs-string">&quot;程序运行时间：&quot;</span>, end - start)<br></code></pre></td></tr></table></figure><h1 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h1><ul><li><code>dict_replace</code>：需要替换的字符串字典</li><li><code>tuple_notreplace</code>：不替换的字符串字典</li></ul><h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">python3 replace.py [path]<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>黑科技</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>基础算法算子库 - KD-Tree</title>
    <link href="/2023/04/03/output/kdtree/index/"/>
    <url>/2023/04/03/output/kdtree/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="libnabo"><a href="#libnabo" class="headerlink" title="libnabo"></a>libnabo</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>libnabo 是一个用于低维空间的快速 K 最近邻库。得益于 C++ 模板，它提供了一个干净、无遗留问题、与标量类型无关的 API。它当前的 CPU 实现受到ANN的强烈启发，但具有更紧凑的数据类型。平均而言，libnabo 比ANN快 5% 到 20% 。</p><p>libnabo 依赖于Eigen，一个现代 C++ 矩阵和线性代数库。libnabo 适用于 Eigen 的版本 2 或 3。libnabo 还可以选择依赖Boost，这是一个用于 Python 绑定的 C++ 通用库。</p><h2 id="installion"><a href="#installion" class="headerlink" title="installion"></a>installion</h2><h3 id="download"><a href="#download" class="headerlink" title="download"></a>download</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> git@github.com:ethz-asl/libnabo.git<br></code></pre></td></tr></table></figure><h3 id="prerequisites"><a href="#prerequisites" class="headerlink" title="prerequisites"></a>prerequisites</h3><ul><li><a href="http://eigen.tuxfamily.org/index.php?title=Main_Page" title="Eigen">Eigen</a></li><li><a href="https://www.boost.org/users/download/">Boost</a> （Option)</li></ul><h3 id="install"><a href="#install" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">SRC_DIR=`<span class="hljs-built_in">pwd</span>`<br>BUILD_DIR=<span class="hljs-variable">$&#123;SRC_DIR&#125;</span>/build<br><span class="hljs-built_in">mkdir</span> -p <span class="hljs-variable">$&#123;BUILD_DIR&#125;</span> &amp;&amp; <span class="hljs-built_in">cd</span> <span class="hljs-variable">$&#123;BUILD_DIR&#125;</span><br>cmake -DCMAKE_BUILD_TYPE=RelWithDebInfo <span class="hljs-variable">$&#123;SRC_DIR&#125;</span><br><span class="hljs-comment"># if Eigen or Boost are not available system-wide, run at that point:</span><br><span class="hljs-comment">#   cmake-gui .</span><br><span class="hljs-comment"># cmake-gui allows you to tell the location of Eigen or Boost</span><br>make<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="CmakeLists-txt"><a href="#CmakeLists-txt" class="headerlink" title="CmakeLists.txt"></a>CmakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs Cmake"><span class="hljs-comment">#--------------------</span><br><span class="hljs-comment"># DEPENDENCY: nabo</span><br><span class="hljs-comment">#--------------------</span><br><span class="hljs-keyword">if</span> (<span class="hljs-keyword">NOT</span> <span class="hljs-keyword">TARGET</span> nabo)<br>  <span class="hljs-comment"># Find libnabo:</span><br>  <span class="hljs-keyword">find_package</span>(libnabo REQUIRED PATHS <span class="hljs-variable">$&#123;LIBNABO_INSTALL_DIR&#125;</span>)<br>  <span class="hljs-keyword">message</span>(STATUS <span class="hljs-string">&quot;libnabo found, version $&#123;libnabo_VERSION&#125; (include=$&#123;libnabo_INCLUDE_DIRS&#125; libs=$&#123;libnabo_LIBRARIES&#125;)&quot;</span>)<br><span class="hljs-keyword">else</span>()<br>  <span class="hljs-comment"># libnabo already part of this project (e.g. as a git submodule)</span><br>  <span class="hljs-comment"># (This, plus the use of cmake target properties in libnabo, will also</span><br>  <span class="hljs-comment"># introduce the required include directories, flags, etc.)</span><br><span class="hljs-keyword">endif</span>()<br><span class="hljs-comment"># This cmake target alias will be defined by either: </span><br><span class="hljs-comment"># a) libnabo sources if built as a git submodule in the same project than this library, or</span><br><span class="hljs-comment"># b) by libnabo-targets.cmake, included by find_package(libnabo) above.</span><br><span class="hljs-keyword">set</span>(libnabo_LIBRARIES libnabo::nabo)<br><br><span class="hljs-comment"># target_link_libraries THIRD_PARTY_LIBS is ok</span><br><span class="hljs-keyword">set</span>(THIRD_PARTY_LIBS<br>        <span class="hljs-variable">$&#123;libnabo_LIBRARIES&#125;</span><br>        )<br><br><span class="hljs-comment"># ############## dependencies ######################</span><br><span class="hljs-keyword">find_package</span>(Eigen3 REQUIRED)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;EIGEN3_INCLUDE_DIR&#125;</span>)<br><span class="hljs-keyword">include_directories</span>(<span class="hljs-variable">$&#123;NABO_INCLUDE_DIR&#125;</span>)<br></code></pre></td></tr></table></figure><h1 id="flann"><a href="#flann" class="headerlink" title="flann"></a>flann</h1><h2 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h2><p>FLANN（近似近邻快速库）是一个用于执行快速近似近邻搜索的库。FLANN是用C++编写的，该库提供的C、MATLAB和Python接口。</p><h2 id="Installion"><a href="#Installion" class="headerlink" title="Installion"></a>Installion</h2><h3 id="download-1"><a href="#download-1" class="headerlink" title="download"></a>download</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/flann-lib/flann.git <br></code></pre></td></tr></table></figure><h3 id="install-1"><a href="#install-1" class="headerlink" title="install"></a>install</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> flann<br><span class="hljs-built_in">mkdir</span> build &amp;&amp; <span class="hljs-built_in">cd</span> build<br>cmake -DCMAKE_BUILD_TYPE=Release -DBUILD_PYTHON_BINDINGS=OFF -DBUILD_MATLAB_BINDINGS=OFF -DBUILD_EXAMPLES=OFF -DBUILD_TESTS=OFF -DBUILD_D<br>OC=OFF ..<br>make -j5<br>sudo make install<br></code></pre></td></tr></table></figure><h2 id="CMakeLists-txt"><a href="#CMakeLists-txt" class="headerlink" title="CMakeLists.txt"></a>CMakeLists.txt</h2><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs CMake"><span class="hljs-keyword">find_package</span>(flann REQUIRED)<br><span class="hljs-keyword">set</span>(THIRD_PARTY_LIBS<br>        <span class="hljs-variable">$&#123;libflann_LIBRARIES&#125;</span><br>        )<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>基础算法算子库</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>解决__FILE__ 宏绝对路径的问题(相对路径)</title>
    <link href="/2023/02/27/output/cmake__file__/index/"/>
    <url>/2023/02/27/output/cmake__file__/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="问题表现"><a href="#问题表现" class="headerlink" title="问题表现"></a>问题表现</h1><p>通过cmake编译的代码，在代码中输出FILE就代码文件的绝对路径。在大多数使用FILE这宏的，一般都是用于日志输出，首先使用绝对路径会使日志量膨胀，其次我们最终的程序执行的环境，可能与编译的环境不一样，输出绝对路径并没有多大的参考意义</p><p>例如：&#x2F;home&#x2F;dell&#x2F;workspace&#x2F;….</p><h1 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h1><p>既然FILE宏是gcc定义的，默认等于gcc命令中的文件路径，我们可以通过重新定义该宏来达到我们的目的，如下方式：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">g++ tests/test.cc -D__FILE__=<span class="hljs-string">&quot;\&quot;tests/test.cc\&quot;&quot;</span> -o test<br><br><span class="hljs-comment">//输出：hello __FILE__=tests/test.cc</span><br></code></pre></td></tr></table></figure><h1 id="在cmake里解决"><a href="#在cmake里解决" class="headerlink" title="在cmake里解决"></a>在cmake里解决</h1><p>如果需要在每个源文件的编译上面都带上对应的定义(-D<strong>FILE</strong>=”\”tests&#x2F;test.cc\””),那么CMakeLists.txt里面就比较混乱了。我们可以把这种定义，封装到一个cmake函数里面，当需要使用这个功能的时候，就执行一下这个函数，这样就可以优雅的解决FILE绝对路径的问题，将绝对路径变成相对路径</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs cmake"><span class="hljs-comment"># utils.cmake</span><br><br><span class="hljs-comment">#重新定义当前目标的源文件的__FILE__宏</span><br><span class="hljs-keyword">function</span>(redefine_file_macro targetname)<br>    <span class="hljs-comment">#获取当前目标的所有源文件</span><br>    <span class="hljs-keyword">get_target_property</span>(source_files <span class="hljs-string">&quot;$&#123;targetname&#125;&quot;</span> SOURCES)<br>    <span class="hljs-comment">#遍历源文件</span><br>    <span class="hljs-keyword">foreach</span>(sourcefile <span class="hljs-variable">$&#123;source_files&#125;</span>)<br>        <span class="hljs-comment">#获取当前源文件的编译参数</span><br>        <span class="hljs-keyword">get_property</span>(defs SOURCE <span class="hljs-string">&quot;$&#123;sourcefile&#125;&quot;</span><br>            PROPERTY COMPILE_DEFINITIONS)<br>        <span class="hljs-comment">#获取当前文件的绝对路径</span><br>        <span class="hljs-keyword">get_filename_component</span>(filepath <span class="hljs-string">&quot;$&#123;sourcefile&#125;&quot;</span> ABSOLUTE)<br>        <span class="hljs-comment">#将绝对路径中的项目路径替换成空,得到源文件相对于项目路径的相对路径</span><br>        <span class="hljs-keyword">string</span>(REPLACE <span class="hljs-variable">$&#123;PROJECT_SOURCE_DIR&#125;</span>/ <span class="hljs-string">&quot;&quot;</span> relpath <span class="hljs-variable">$&#123;filepath&#125;</span>)<br>        <span class="hljs-comment">#将我们要加的编译参数(__FILE__定义)添加到原来的编译参数里面</span><br>        <span class="hljs-keyword">list</span>(APPEND defs <span class="hljs-string">&quot;__FILE__=\&quot;$&#123;relpath&#125;\&quot;&quot;</span>)<br>        <span class="hljs-comment">#重新设置源文件的编译参数</span><br>        <span class="hljs-keyword">set_property</span>(<br>            SOURCE <span class="hljs-string">&quot;$&#123;sourcefile&#125;&quot;</span><br>            PROPERTY COMPILE_DEFINITIONS <span class="hljs-variable">$&#123;defs&#125;</span><br>            )<br>    <span class="hljs-keyword">endforeach</span>()<br><span class="hljs-keyword">endfunction</span>()<br></code></pre></td></tr></table></figure><p>我们将上面的代码，写入到utils.cmake文件里面，然后去修改我们的CMakeLists.txt，让我们的代码支持FILE输出相对路径</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs CMakeLists.txt">cmake_minimum_required (VERSION 2.8)<br><br>project(server)<br><br>include (utils.cmake)<br><br>add_definitions(-Wno-builtin-macro-redefined)<br><br>add_executable(test tests/test.cc)<br>redefine_file_macro(test)<br></code></pre></td></tr></table></figure><p>redefine_file_macro(test), 为我们的输出目标添加FILE宏重定义功能 当我们冲定义了FILE宏，编译器会告警 “:0:0: warning: “FILE” redefined [-Wbuiltin-macro-redefined]”, 为了解决这个警告，我们需要在CMakeLists.txt里面加上add_definitions(-Wno-builtin-macro-redefined)</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>总结 cmake编译的FILE虽然是绝对路径，我们可以通过冲定义FILE的方式来解决。cmake支持自定义函数，自定义宏的方式，我们利用自定义函数，将我们经常使用的特性封装到函数里面，写到一个单独的cmake文件里面，当我们需要使用的时候，只需要include xxx.cmake文件就可以了。</p>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>IO多路复用-epoll</title>
    <link href="/2023/01/27/output/epoll/index/"/>
    <url>/2023/01/27/output/epoll/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="叙述"><a href="#叙述" class="headerlink" title="叙述"></a>叙述</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p>epoll（eventpoll）是一种I&#x2F;O事件通知机制，是linux内核实现IO多路复用的实现。</p><p>IO多路复用指在一个操作里同时监听多个输入输出源，在其中一个或多个输入输出源可用时返回，然后对其进行读写操作。</p><p>epoll时select和poll的升级版，改进了工作方式会更加高效。</p><h2 id="通知机制"><a href="#通知机制" class="headerlink" title="通知机制"></a>通知机制</h2><p>通知机制就是当事件发生时会主动通知，反面就是轮询机制。</p><h2 id="通俗解释"><a href="#通俗解释" class="headerlink" title="通俗解释"></a>通俗解释</h2><p>epoll的通俗解释是一种当文件描述符的内核缓冲区非空的时候，发出可读信号进行通知，当写缓冲区不满的时候，发出可写信号通知的机制</p><h2 id="对比select和poll"><a href="#对比select和poll" class="headerlink" title="对比select和poll"></a>对比select和poll</h2><p>select&#x2F;poll 低效的原因之一是将 “添加 &#x2F; 维护待检测任务” 和 “阻塞进程 &#x2F; 线程” 两个步骤合二为一。每次调用 select 都需要这两步操作，然而大多数应用场景中，需要监视的 socket 个数相对固定，并不需要每次都修改。epoll 将这两个操作分开，先用 epoll_ctl() 维护等待队列，再调用 epoll_wait() 阻塞进程（解耦）。通过下图的对比显而易见，epoll 的效率得到了提升。</p><p><img src="/images/image-20210403181746358.png"></p><h1 id="核心函数"><a href="#核心函数" class="headerlink" title="核心函数"></a>核心函数</h1><h2 id="epoll-size"><a href="#epoll-size" class="headerlink" title="epoll_size()"></a>epoll_size()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 创建epoll实例，通过一棵红黑树管理待检测集合</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">epoll_size</span><span class="hljs-params">(<span class="hljs-type">int</span> size)</span></span>;<br></code></pre></td></tr></table></figure><p>内核会产生一个epoll 实例数据结构并返回一个文件描述符，这个特殊的描述符就是epoll实例的句柄，后面的两个接口都以它为中心（即epfd形参）。</p><ul><li>函数参数<ul><li>size：在 Linux 内核 2.6.8 版本以后，这个参数是被忽略的，只需要指定一个大于 0 的数值就可以了。</li></ul></li><li>函数返回值：<ul><li>失败：返回 - 1</li><li>成功：返回一个有效的文件描述符，通过这个文件描述符就可以访问创建的 epoll 实例了</li></ul></li></ul><h2 id="epoll-ctl"><a href="#epoll-ctl" class="headerlink" title="epoll_ctl()"></a>epoll_ctl()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 管理红黑树上的文件描述符（添加、修改、删除）</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">epoll_ctl</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-type">int</span> op, <span class="hljs-type">int</span> fd, <span class="hljs-keyword">struct</span> epoll_event *event)</span></span>;<br></code></pre></td></tr></table></figure><p>将被监听的描述符添加到红黑树或从红黑树中删除或者对监听事件进行修改。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">union</span> <span class="hljs-title class_">epoll_data</span> &#123;<br><span class="hljs-type">void</span> *ptr; <span class="hljs-comment">/* 指向用户自定义数据 */</span><br><span class="hljs-type">int</span> fd; <span class="hljs-comment">/* 注册的文件描述符 */</span><br><span class="hljs-type">uint32_t</span> u32; <span class="hljs-comment">/* 32-bit integer */</span><br><span class="hljs-type">uint64_t</span> u64; <span class="hljs-comment">/* 64-bit integer */</span><br>&#125; <span class="hljs-type">epoll_data_t</span>;<br><br><span class="hljs-keyword">struct</span> <span class="hljs-title class_">epoll_event</span> &#123;<br><span class="hljs-type">uint32_t</span> events; <span class="hljs-comment">/* 描述epoll事件 */</span><br><span class="hljs-type">epoll_data_t</span> data; <span class="hljs-comment">/* 见上面的结构体 */</span><br>&#125;;<br></code></pre></td></tr></table></figure><ul><li>函数参数：<ul><li>epfd：epoll_create () 函数的返回值，通过这个参数找到 epoll 实例</li><li>op：这是一个枚举值，控制通过该函数执行什么操作<ul><li>EPOLL_CTL_ADD：往 epoll 模型中添加新的节点</li><li>EPOLL_CTL_MOD：修改 epoll 模型中已经存在的节点</li><li>EPOLL_CTL_DEL：删除 epoll 模型中的指定的节点</li></ul></li><li>fd：文件描述符，即要添加 &#x2F; 修改 &#x2F; 删除的文件描述符</li><li>event：epoll 事件，用来修饰第三个参数对应的文件描述符的，指定检测这个文件描述符的什么事件<ul><li>events：委托 epoll 检测的事件<ul><li>EPOLLIN：读事件，接收数据，检测读缓冲区，如果有数据该文件描述符就绪</li><li>EPOLLOUT：写事件，发送数据，检测写缓冲区，如果可写该文件描述符就绪</li><li>EPOLLERR：异常事件</li></ul></li></ul></li><li>data：用户数据变量，这是一个联合体类型，通常情况下使用里边的 fd 成员，用于存储待检测的文件描述符的值，在调用 epoll_wait() 函数的时候这个值会被传出。</li></ul></li><li>函数返回值：<ul><li>失败：返回 -1</li><li>成功：返回 0</li></ul></li></ul><h2 id="epoll-wait"><a href="#epoll-wait" class="headerlink" title="epoll_wait()"></a>epoll_wait()</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 检测epoll树中是否有就绪的文件描述符</span><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">epoll_wait</span><span class="hljs-params">(<span class="hljs-type">int</span> epfd, <span class="hljs-keyword">struct</span> epoll_event * events, <span class="hljs-type">int</span> maxevents, <span class="hljs-type">int</span> timeout)</span></span>;<br></code></pre></td></tr></table></figure><p>阻塞等待注册的事件发生，返回事件的数目，并将触发的事件写入events数组中。</p><ul><li>函数参数：<ul><li>epfd：epoll_create () 函数的返回值，通过这个参数找到 epoll 实例</li><li>events：传出参数，这是一个结构体数组的地址，里边存储了已就绪的文件描述符的信息</li><li>maxevents：修饰第二个参数，结构体数组的容量（元素个数）</li><li>timeout：如果检测的 epoll 实例中没有已就绪的文件描述符，该函数阻塞的时长，单位 ms 毫秒<ul><li>0：函数不阻塞，不管 epoll 实例中有没有就绪的文件描述符，函数被调用后都直接返回</li><li>大于 0：如果 epoll 实例中没有已就绪的文件描述符，函数阻塞对应的毫秒数再返回</li><li>-1：函数一直阻塞，直到 epoll 实例中有已就绪的文件描述符之后才解除阻塞</li></ul></li></ul></li><li>函数返回值：<ul><li>成功：<ul><li>等于 0：函数是阻塞被强制解除了，没有检测到满足条件的文件描述符</li><li>大于 0：检测到的已就绪的文件描述符的总个数</li></ul></li><li>失败：返回 - 1</li></ul></li></ul><h1 id="工作模式"><a href="#工作模式" class="headerlink" title="工作模式"></a>工作模式</h1><p>epoll监控多个文件描述符的I&#x2F;O事件。epoll支持边缘触发(edge trigger，ET)或水平触发（level trigger，LT)，通过epoll_wait等待I&#x2F;O事件，如果当前没有可用的事件则阻塞调用线程。</p><p>select和poll只支持LT工作模式，epoll的默认的工作模式是LT模式。</p><h2 id="水平触发-LT"><a href="#水平触发-LT" class="headerlink" title="水平触发(LT)"></a>水平触发(LT)</h2><p>水平模式可以简称为 LT 模式，LT（level triggered）是缺省的工作方式，并且同时支持block和no-block socket。在这种做法中，内核通知使用者哪些文件描述符已经就绪，之后就可以对这些已就绪的文件描述符进行 IO 操作了。如果我们不作任何操作，内核还是会继续通知使用者。</p><ul><li>读事件：如果文件描述符对应的读缓冲区还有数据，读事件就会被触发，epoll_wait () 解除阻塞<ul><li>当读事件被触发，epoll_wait () 解除阻塞，之后就可以接收数据了</li><li>如果接收数据的 buf 很小，不能全部将缓冲区数据读出，那么读事件会继续被触发，直到数据被全部读出，如果接收数据的内存相对较大，读数据的效率也会相对较高（减少了读数据的次数）</li><li>因为读数据是被动的，必须要通过读事件才能知道有数据到达了，因此对于读事件的检测是必须的</li></ul></li><li>写事件：如果文件描述符对应的写缓冲区可写，写事件就会被触发，epoll_wait () 解除阻塞<ul><li>当写事件被触发，epoll_wait () 解除阻塞，之后就可以将数据写入到写缓冲区了</li><li>写事件的触发发生在写数据之前而不是之后，被写入到写缓冲区中的数据是由内核自动发送出去的</li><li>如果写缓冲区没有被写满，写事件会一直被触发</li><li>因为写数据是主动的，并且写缓冲区一般情况下都是可写的（缓冲区不满），因此对于写事件的检测不是必须的</li></ul></li></ul><h2 id="边缘触发-ET"><a href="#边缘触发-ET" class="headerlink" title="边缘触发(ET)"></a>边缘触发(ET)</h2><p>边沿模式可以简称为 ET 模式，ET（edge-triggered）是高速工作方式，只支持no-block socket。在这种模式下，当文件描述符从未就绪变为就绪时，内核会通过epoll通知使用者。然后它会假设使用者知道文件描述符已经就绪，并且不会再为那个文件描述符发送更多的就绪通知（only once）。如果我们对这个文件描述符做 IO 操作，从而导致它再次变成未就绪，当这个未就绪的文件描述符再次变成就绪状态，内核会再次进行通知，并且还是只通知一次。ET模式在很大程度上减少了epoll事件被重复触发的次数，因此效率要比LT模式高。</p><ul><li>读事件：当读缓冲区有新的数据进入，读事件被触发一次，没有新数据不会触发该事件<ul><li>如果有新数据进入到读缓冲区，读事件被触发，epoll_wait () 解除阻塞</li><li>读事件被触发，可以通过调用 read ()&#x2F;recv () 函数将缓冲区数据读出</li><li>如果数据没有被全部读走，并且没有新数据进入，读事件不会再次触发，只通知一次</li><li>如果数据被全部读走或者只读走一部分，此时有新数据进入，读事件被触发，并且只通知一次</li></ul></li><li>写事件：当写缓冲区状态可写，写事件只会触发一次<ul><li>如果写缓冲区被检测到可写，写事件被触发，epoll_wait () 解除阻塞</li><li>写事件被触发，就可以通过调用 write ()&#x2F;send () 函数，将数据写入到写缓冲区中</li><li>写缓冲区从不满到被写满，期间写事件只会被触发一次</li><li>写缓冲区从满到不满，状态变为可写，写事件只会被触发一次</li></ul></li></ul><p>综上所述：epoll 的边沿模式下 epoll_wait () 检测到文件描述符有新事件才会通知，如果不是新的事件就不通知，通知的次数比水平模式少，效率比水平模式要高。</p><p><strong>ET模式的设置：</strong> 边沿模式不是默认的 epoll 模式，需要额外进行设置。epoll 设置边沿模式是非常简单的，epoll 管理的红黑树示例中每个节点都是 struct epoll_event 类型，只需要将 EPOLLET 添加到结构体的 events 成员中即可：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">epoll_event</span> <span class="hljs-title">ev</span>;</span><br>ev.events = EPOLLIN | EPOLLET;<br></code></pre></td></tr></table></figure><h1 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h1><p><a href="https://zhuanlan.zhihu.com/p/159135478">https://zhuanlan.zhihu.com/p/159135478</a> <a href="https://blog.csdn.net/baidu_41388533/article/details/110134366">https://blog.csdn.net/baidu_41388533&#x2F;article&#x2F;details&#x2F;110134366</a> <a href="https://subingwen.cn/linux/epoll/#2-%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0">https://subingwen.cn/linux/epoll/#2-%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0</a></p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Gitbook 入门</title>
    <link href="/2023/01/18/output/gitbook-introduction/index/"/>
    <url>/2023/01/18/output/gitbook-introduction/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="前置要求"><a href="#前置要求" class="headerlink" title="前置要求"></a>前置要求</h1><h2 id="nodejs"><a href="#nodejs" class="headerlink" title="nodejs"></a>nodejs</h2><p>高版本可能不兼容，需要版本在v10左右。 <a href="https://nodejs.org/download/release/v10.21.0/">https://nodejs.org/download/release/v10.21.0/</a></p><h2 id="更换镜像"><a href="#更换镜像" class="headerlink" title="更换镜像"></a>更换镜像</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm config get registry<br>npm config <span class="hljs-built_in">set</span> registry https://registry.npm.taobao.org<br></code></pre></td></tr></table></figure><h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">npm uninstall -g gitbook-cli<br></code></pre></td></tr></table></figure><p>安装完之后用<code>gitbook -V</code>查看版本，自动install gitbook。</p><h1 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">gitbook -V      查看版本号<br>gitbook init    初始化<br>gitbook serve   预览<br>gitbook build   生成<br>gitbook build --gitbook=2.6.7 生成时指定gitbook的版本, 本地没有会先下载<br>gitbook uninstall 2.6.7   卸载指定版本号的gitbook<br>gitbook fetch [version]      获取[版本]下载并安装&lt;版本&gt;<br>gitbook --<span class="hljs-built_in">help</span>   显示帮助文档<br>gitbook ls-remote  列出NPM上的可用版本：<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Codestudio Weekend Contest 56 - Ninja And The Challenge</title>
    <link href="/2023/01/14/output/codestudio-weekend-contest-56-ninja-and-the-challenge/index/"/>
    <url>/2023/01/14/output/codestudio-weekend-contest-56-ninja-and-the-challenge/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>给一个序列，一次操作可以使得任意元素+1&#x2F;-1，问最少多少次操作可以使得整个序列递增或递减？</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><p>能否只构造成递增来解决？</p><blockquote><p>当然可以，如果想要构造成递减，只需要把序列逆序，然后构造成递增。</p></blockquote><p>假设我们只有 2 个数字 [10, 6]，那么我们可以将 6 向上移动 4 步或 10 向下移动 4 步；无论哪种方式，成本都是 4。同时，以同样的成本，我们还可以制作 [7, 7] 或 [8, 8] 或 [9, 9] 或 [10, 10]。</p><p>假设我们支付了 4 的成本并使其成为 [10, 6] → [6, 6]，并且由于我们已经支付了成本，以后如果我们改变主意，我们可以自由地向上移动 [6, 6]到 [7, 7], [8, 8], …, 无需额外费用，因为 [7, 7], [8, 8],[9, 9]… 都需要我们已经支付的 4 个步骤. 数字 [6, 6] 现在向上自由。</p><p>一个向上的自由数字可以自由上升直到它之前的最大数字，并作为它的最低值存储。对于每个数字，我们找到它的向上空闲数并制作向上空闲数组。保证我们总是可以使用这个更新的空闲数组来增加数组。</p><p>例如，如果向上自由数组是 [1, 7, 6, 3]，我们可以创建一个零成本的递增数组 [1, 7, 7, 7]，因为最后 6, 3 是向上自由的。</p><p>如果下一个数是5，那么我们以2为代价减少7→5，新的向上自由数组变为[1,7,6,3]→[1,5,6,3,5]，而这个数组可以成为零成本的递增序列 [1, 5, 6, 6, 6]。</p><p>总之，如果新数字大于迄今为止最大的向上自由数字，则追加它，因为序列已经在增加。但如果不是，则以差值为代价，将最大的向上自由数减少到与新数相同；这两个数字现在都向上免费了。第二大数字现在成为新的高度。</p><p>我们使用最大堆来存储这些向上的空闲数，以在 O(log(n)) 时间内找到最大的一个。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">solve</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt;&amp; nums)</span> </span>&#123;<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    std::priority_queue&lt;<span class="hljs-type">int</span>&gt; pq;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; x : nums) &#123;<br>        <span class="hljs-keyword">if</span> (!pq.<span class="hljs-built_in">empty</span>() &amp;&amp; pq.<span class="hljs-built_in">top</span>() &gt; x) &#123;<br>            ans += pq.<span class="hljs-built_in">top</span>() - x;<br>            pq.<span class="hljs-built_in">pop</span>();<br>            pq.<span class="hljs-built_in">push</span>(x);<br>        &#125;<br>        pq.<span class="hljs-built_in">push</span>(x);<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">minimumMovesToSort</span><span class="hljs-params">(<span class="hljs-type">int</span> n, vector&lt;<span class="hljs-type">int</span>&gt; &amp;a)</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">b</span><span class="hljs-params">(a.rbegin(), a.rend())</span></span>;<br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">min</span>(<span class="hljs-built_in">solve</span>(a), <span class="hljs-built_in">solve</span>(b));<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">int main() &#123;</span><br><span class="hljs-comment">    std::ios::sync_with_stdio(false);</span><br><span class="hljs-comment">    std::cin.tie(nullptr);</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">    return 0;</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++模版 - 偏特化与全特化</title>
    <link href="/2023/01/11/output/c-template_specialization/index/"/>
    <url>/2023/01/11/output/c-template_specialization/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>模板就是实现代码重用机制的一种工具，它可以实现类型参数化，即把类型定义为参数，从而实现了真正的代码可重用性。 模版可以分为两类，一个是函数模版，另外一个是类模版。</p><blockquote><p>C++的模板机制被证明是图灵完备的，即可以通过<a href="https://harttle.land/2015/09/16/effective-cpp-48.html" title="模板元编程（template meta programming）">模板元编程（template meta programming）</a>的方式在编译期做任何计算。</p></blockquote><h2 id="实例化"><a href="#实例化" class="headerlink" title="实例化"></a>实例化</h2><p>模板定义本身不参与编译，而是编译器根据模板的用户使用模板时提供的类型参数生成代码，再进行编译。 用户提供不同的类型参数，就会实例化出不同的代码。</p><h1 id="类模版"><a href="#类模版" class="headerlink" title="类模版"></a>类模版</h1><p>类模板描述了一组相关的类或数据类型，它们只能通过类型来区分：整数值、指向（或引用）具有全局链接的变量的指针、其他的组合。 类模板尤其适用于描述通用但类型安全的数据结构。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;类型形式参数&gt;<br><span class="hljs-keyword">class</span> 类名<br>&#123;<br>    <span class="hljs-comment">//类声明体;</span><br>&#125;;<br><br><span class="hljs-keyword">template</span> &lt;类型形式参数&gt;<br>返回类型 类名 &lt;类型&gt; :: 成员函数名(形式参数)<br>&#123;<br>    <span class="hljs-comment">//成员函数定义体;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="全特化"><a href="#全特化" class="headerlink" title="全特化"></a>全特化</h2><p>所谓模板全特化限定死模板实现的具体类型；</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">double</span>&gt;&#123;<br>    <span class="hljs-type">int</span> data1;<br>    <span class="hljs-type">double</span> data2;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="偏特化"><a href="#偏特化" class="headerlink" title="偏特化"></a>偏特化</h2><p>偏特化是指提供另一份template定义式，而其本身仍为templatized，这是针对于template参数更进一步的条件限制所设计出来的一个特化版本。 也就是如果这个模板有多个类型，那么只限定其中的一部分;</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&lt;<span class="hljs-type">int</span>, T2&gt;&#123;<br>    ...<br>&#125;;<br></code></pre></td></tr></table></figure><h1 id="函数模版"><a href="#函数模版" class="headerlink" title="函数模版"></a>函数模版</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;类型形式参数&gt;      <span class="hljs-comment">//类型形式参数即此格式：&lt;typename  形式参数&gt;  或 &lt;class 形式参数&gt;</span><br>返回类型  函数名 （形式参数）<br>&#123;<br> <span class="hljs-comment">//函数定义体;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="全特化-1"><a href="#全特化-1" class="headerlink" title="全特化"></a>全特化</h2><p>函数模板全特化和类模板全特化本质是一样的，是对模板参数的特殊化处理。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">max</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">int</span> lhs, <span class="hljs-type">const</span> <span class="hljs-type">int</span> rhs)</span></span>&#123;   <br>    <span class="hljs-keyword">return</span> lhs &gt; rhs ? lhs : rhs;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="特化的歧义"><a href="#特化的歧义" class="headerlink" title="特化的歧义"></a>特化的歧义</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123; T d; &#125;<br><br><span class="hljs-keyword">template</span> &lt;&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-type">int</span> d; &#125;<br></code></pre></td></tr></table></figure><p>此时编译器不知道f()是从f\()特化来的，编译时会有错误：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">error: no <span class="hljs-keyword">function</span> template matches <span class="hljs-keyword">function</span> template specialization <span class="hljs-string">&#x27;f&#x27;</span><br></code></pre></td></tr></table></figure><p>这时我们便需要显式指定”模板实参”：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash">template &lt;class T&gt;<br>void <span class="hljs-function"><span class="hljs-title">f</span></span>()&#123; T d; &#125;<br><br>template &lt;&gt;<br>void f&lt;int&gt;()&#123; int d; &#125;<br></code></pre></td></tr></table></figure><h2 id="偏特化-1"><a href="#偏特化-1" class="headerlink" title="偏特化"></a>偏特化</h2><p>函数模版没有偏特化。</p><p>例如下面代码会编译出错：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;&#125;<br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-type">void</span> <span class="hljs-built_in">f</span>&lt;<span class="hljs-type">int</span>, T2&gt;()&#123;&#125;<br></code></pre></td></tr></table></figure><p><strong>但函数允许重载，声明另一个函数模板即可替代偏特化的需要：</strong></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">f</span><span class="hljs-params">()</span></span>&#123;&#125;              <span class="hljs-comment">// 注意：这里没有&quot;模板实参&quot;</span><br></code></pre></td></tr></table></figure><p>多数情况下函数模板重载就可以完成函数偏特化的需要，一个例外便是std命名空间。 std是一个特殊的命名空间，用户可以特化其中的模板，但不允许添加模板（其实任何内容都是禁止添加的）。 因此在std中添加重载函数是不允许的，在<a href="https://harttle.land/2015/08/23/effective-cpp-25.html" title="Effective C++: Item 25">Effective C++: Item 25</a>中给出了一个更详细的案例。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><ol><li>函数模板只有全特化，没有偏特化；</li><li>模板、模板的特化和模板的偏特化都存在的情况下，编译器在编译阶段进行匹配，优先特殊的；</li><li>模板函数不能是虚函数；因为每个包含虚函数的类具有一个virtual table,包含该类的所有虚函数的地址，因此vtable的大小是确定的。模板只有被使用时才会被实例化，将其声明为虚函数会使vtable的大小不确定。所以，成员函数模板不能为虚函数。</li></ol>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>CodeChef Starters 72 div2 - No sequence</title>
    <link href="/2023/01/05/output/codechef-starters-72-div2-no-sequence/index/"/>
    <url>/2023/01/05/output/codechef-starters-72-div2-no-sequence/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>三个数字N，K，S，构造一个长度为N的序列B，要求如下：</p><ul><li>$B_i \in {-1,0,1}$</li><li>$\sum_{i&#x3D;1}^N B_i * K^{i-1}&#x3D;S$</li></ul><p>输出任意一种序列，如果没有输出-2。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>通过观察$\sum_{i&#x3D;1}^N B_i * K^{i-1}&#x3D;S $</p><p>可以得到$ S &#x3D; B1 + \sum_{i&#x3D;2}^N B_i * K^{i-1} $，即</p><p>$$ S\equiv B_1 \quad (mod \ K) $$</p><p>所以通过S可以确定B1的值，然后通过一些简单的代数可以得到</p><p>$$ \frac{S-B1}{K} &#x3D; B2+\sum_{i&#x3D;3}^N B_i * K^{i-2} $$</p><p>即</p><p>$$\frac{S-B_1}{K} \equiv B_2 \quad (mod \ K) $$</p><p>所以可以确定B2的值，以此类推可以得到所有B的值，如果中途出现越界情况，直接返-2即可。</p><h1 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    author:  jujimeizuo</span><br><span class="hljs-comment"> *    created: 2023-01-04 22:39:48</span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">solve</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> n, K;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> S;<br>    std::cin &gt;&gt; n &gt;&gt; K &gt;&gt; S;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">B</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-type">bool</span> ok = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (S % K == <span class="hljs-number">0</span>) &#123;<br>            S /= K;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((S - <span class="hljs-number">1</span>) % K == <span class="hljs-number">0</span>) &#123;<br>            S = (S - <span class="hljs-number">1</span>) / K;<br>            B[i] = <span class="hljs-number">1</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ((S + <span class="hljs-number">1</span>) % K == <span class="hljs-number">0</span>) &#123;<br>            S = (S + <span class="hljs-number">1</span>) / K;<br>            B[i] = <span class="hljs-number">-1</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            ok = <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">break</span> ;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (!ok || S != <span class="hljs-number">0</span>) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">-2</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            std::cout &lt;&lt; B[i] &lt;&lt; <span class="hljs-string">&quot; \n&quot;</span>[i == n - <span class="hljs-number">1</span>];<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> _;<br>    std::cin &gt;&gt; _;<br>    <span class="hljs-keyword">while</span> (_--) &#123;<br>        <span class="hljs-built_in">solve</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux GDB调试</title>
    <link href="/2022/12/31/output/linux-gdb-debug/index/"/>
    <url>/2022/12/31/output/linux-gdb-debug/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="1-什么是GDB"><a href="#1-什么是GDB" class="headerlink" title="1. 什么是GDB"></a>1. 什么是GDB</h1><ul><li>GDB 是由 GNU 软件系统社区提供的调试工具，同 GCC 配套组成了一套完整的开发环境，GDB 是 Linux 和许多类 Unix 系统中的标准开发环境。</li><li>一般来说，GDB 主要帮助你完成下面四个方面的功能：<ol><li>启动程序，可以按照自定义的要求随心所欲的运行程序</li><li>可让被调试的程序在所指定的调置的断点处停住（断点可以是条件表达式）</li><li>当程序被停住时，可以检查此时程序中所发生的事</li><li>可以改变程序，将一个 BUG 产生的影响修正从而测试其他 BUG</li></ol></li></ul><h1 id="2-准备工作"><a href="#2-准备工作" class="headerlink" title="2. 准备工作"></a>2. 准备工作</h1><p>通常，在为调试而编译时，我们会关掉编译器的优化选项（<code>-O</code>）， 并打开调试选项（<code>-g</code>）。另外，<code>-Wall</code>在尽量不影响程序行为的情况下选项打开所有warning，也可以发现许多问题，避免一些不必要的 BUG。 例如： <code>gcc -g -Wall program.c -o program</code> <code>-g</code> 选项的作用是在可执行文件中加入源代码的信息，比如可执行文件中第几条机 器指令对应源代码的第几行，但并不是把整个源文件嵌入到可执行文件中，所以在调 试时必须保证 gdb 能找到源文件。 调试下列程序前要做准备工作，在shell中输入：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">gcc -g -Wall test.c -o <span class="hljs-built_in">test</span><br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#test.c</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">test</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span></span>;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-type">int</span> a, b;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;argc = %d\n&quot;</span>, argc);<br><br>    <span class="hljs-keyword">if</span>(argc &lt; <span class="hljs-number">3</span>) &#123;<br>        a = <span class="hljs-number">10</span>;<br>        b = <span class="hljs-number">30</span>;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        a = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">1</span>]);<br>        b = <span class="hljs-built_in">atoi</span>(argv[<span class="hljs-number">2</span>]);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a = %d, b = %d\n&quot;</span>, a, b);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;a + b = %d\n&quot;</span>, a + b);<br><br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; a; ++i) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;i = %d\n&quot;</span>, i);<br>        <span class="hljs-comment">// 函数调用</span><br>        <span class="hljs-type">int</span> res = <span class="hljs-built_in">test</span>(i);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;res value: %d\n&quot;</span>, res);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;THE END !!!\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><h1 id="3-GDB-命令-：-启动、退出、查看代码"><a href="#3-GDB-命令-：-启动、退出、查看代码" class="headerlink" title="3. GDB 命令 ： 启动、退出、查看代码"></a>3. GDB 命令 ： 启动、退出、查看代码</h1><h2 id="启动和退出"><a href="#启动和退出" class="headerlink" title="启动和退出"></a>启动和退出</h2><ul><li><code>gdb</code> 可执行程序</li><li><code>quit</code>或<code>q</code>退出 注意：在进行准备工作之后才可以期待调试。</li></ul><p><img src="/images/image-1672462308255.png" alt="file"></p><p>在调试命令行输入quit就可退出调试。</p><h2 id="给程序设置参数-获取设置参数"><a href="#给程序设置参数-获取设置参数" class="headerlink" title="给程序设置参数 &#x2F; 获取设置参数"></a>给程序设置参数 &#x2F; 获取设置参数</h2><ul><li><code>set args 10 20</code></li><li><code>show args</code> 注意：有一些程序需要设置参数，例如上述的test.c程序，main函数需要指定参数。</li></ul><p><img src="/images/image-1672462408961.png" alt="file"></p><h2 id="GDB-使用帮助"><a href="#GDB-使用帮助" class="headerlink" title="GDB 使用帮助"></a>GDB 使用帮助</h2><ul><li><code>help</code> <code>help</code> 具体命令 用来查看调试帮助或具体指令的相关信息</li></ul><h2 id="查看当前文件代码"><a href="#查看当前文件代码" class="headerlink" title="查看当前文件代码"></a>查看当前文件代码</h2><ul><li><code>list/l</code> （从默认位置显示）</li></ul><p><img src="/images/image-1672462449889.png" alt="file"></p><ul><li><code>list/l 行号</code> （从指定的行显示）注意是把行号内容放在中间显示。</li></ul><p><img src="/images/image-1672462538567.png" alt="file"></p><h2 id="查看非当前文件代码"><a href="#查看非当前文件代码" class="headerlink" title="查看非当前文件代码"></a>查看非当前文件代码</h2><ul><li><code>list/l 文件名 : 行号</code></li><li><code>list/l 文件名 : 函数名</code> 一个程序有好几个文件组成，当我们调试主函数所在程序时，其他文件的代码也需要查看，就可以使用上述命令。一个项目中含bubble，select.cpp，main.cpp</li></ul><p><img src="/images/image-1672462611599.png" alt="file"></p><p><img src="/images/image-1672462633560.png" alt="file"></p><h2 id="设置显示的行数"><a href="#设置显示的行数" class="headerlink" title="设置显示的行数"></a>设置显示的行数</h2><ul><li><code>show list/listsize</code></li><li><code>set list/listsize 行数</code></li></ul><h1 id="4-GDB命令：断点操作"><a href="#4-GDB命令：断点操作" class="headerlink" title="4. GDB命令：断点操作"></a>4. GDB命令：断点操作</h1><h2 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h2><ul><li><code>b/break 行号</code></li><li><code>b/break 函数名</code></li><li><code>b/break 文件名 : 行号</code></li><li><code>b/break 文件名 : 函数</code></li></ul><p>如下图 在第6行设置断点： <img src="/images/image-1672462743491.png" alt="file"></p><p>其它断点设置方法类似list&#x2F;l操作。</p><h2 id="查看断点"><a href="#查看断点" class="headerlink" title="查看断点"></a>查看断点</h2><ul><li><code>i/info b/break</code> 查看断点信息：</li></ul><p><img src="/images/image-1672462775358.png" alt="file"></p><p>其中num代表断点编号，Type下的breakpoint说明该点为断点，Disp为断点状态，Enb是yes代表为有效断点，adress为断点地址，What说明断点的在那个文件的第几行。</p><h2 id="删除断点"><a href="#删除断点" class="headerlink" title="删除断点"></a>删除断点</h2><ul><li><code>d/del/delete 断点编号</code> 如下图所示删除断点编号为1的断点。 <img src="/images/image-1672462817833.png" alt="file"></li></ul><h2 id="设置断点无效"><a href="#设置断点无效" class="headerlink" title="设置断点无效"></a>设置断点无效</h2><ul><li><code>dis/disable 断点编号</code></li></ul><h2 id="设置断点生效"><a href="#设置断点生效" class="headerlink" title="设置断点生效"></a>设置断点生效</h2><ul><li><code>ena/enable 断点编号</code></li></ul><h2 id="设置条件断点（一般用在循环的位置）"><a href="#设置条件断点（一般用在循环的位置）" class="headerlink" title="设置条件断点（一般用在循环的位置）"></a>设置条件断点（一般用在循环的位置）</h2><ul><li><code>b/break 13 if i==3</code></li></ul><p><img src="/images/image-1672462898795.png" alt="file"></p><h1 id="5-GDB-命令-：-调试命令"><a href="#5-GDB-命令-：-调试命令" class="headerlink" title="5. GDB 命令 ： 调试命令"></a>5. GDB 命令 ： 调试命令</h1><h2 id="运行-GDB-程序"><a href="#运行-GDB-程序" class="headerlink" title="运行 GDB 程序"></a>运行 GDB 程序</h2><ul><li><p><code>start</code>（程序停在第一行）</p></li><li><p><code>run</code>（遇到断点才停）</p></li><li><p>使用<code>run</code>指令和<code>c</code>(继续指令）</p></li></ul><h2 id="继续运行，到下一个断点停"><a href="#继续运行，到下一个断点停" class="headerlink" title="继续运行，到下一个断点停"></a>继续运行，到下一个断点停</h2><ul><li><p><code>c/continue</code></p><h2 id="向下执行一行代码（不会进入函数体）"><a href="#向下执行一行代码（不会进入函数体）" class="headerlink" title="向下执行一行代码（不会进入函数体）"></a>向下执行一行代码（不会进入函数体）</h2></li><li><p><code>n/next</code></p></li></ul><h2 id="变量操作"><a href="#变量操作" class="headerlink" title="变量操作"></a>变量操作</h2><ul><li><code>p/print 变量名</code>（打印变量值）</li><li><code>ptype 变量名</code>（打印变量类型）</li></ul><h2 id="向下单步调试（遇到函数进入函数体）"><a href="#向下单步调试（遇到函数进入函数体）" class="headerlink" title="向下单步调试（遇到函数进入函数体）"></a>向下单步调试（遇到函数进入函数体）</h2><ul><li><code>s/step</code></li><li><code>finish</code>（跳出函数体）</li></ul><h2 id="自动变量操作"><a href="#自动变量操作" class="headerlink" title="自动变量操作"></a>自动变量操作</h2><ul><li><code>display 变量名</code>（自动打印指定变量的值）</li><li><code>i/info display</code></li><li><code>undisplay 编号</code></li></ul><h2 id="其它操作"><a href="#其它操作" class="headerlink" title="其它操作"></a>其它操作</h2><ul><li><code>set var 变量名 = 变量值</code> （循环中用的较多）</li><li><code>until</code>（跳出循环）</li></ul>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>添加git SSH Keys</title>
    <link href="/2022/12/30/output/add-git-ssh-keys/index/"/>
    <url>/2022/12/30/output/add-git-ssh-keys/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="为什么需要添加"><a href="#为什么需要添加" class="headerlink" title="为什么需要添加"></a>为什么需要添加</h1><p>现在的github，如果想要push等操作，已经不支持密码来控制，改为ssh keys来控制，所以会存在下面这种情况.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">[root@VM-16-10-centos WebServer]<span class="hljs-comment"># git push origin master</span><br>git@github.com: Permission denied (publickey).<br>fatal: Could not <span class="hljs-built_in">read</span> from remote repository.<br></code></pre></td></tr></table></figure><p>Permission denied (publickey) 没有权限的publickey ，出现这错误一般是以下两种原因</p><ul><li>客户端与服务端未生成 ssh key</li><li>客户端与服务端的ssh key不匹配 找到问题的原因了，解决办法也就有了，重新生成一次ssh key ，服务端也重新配置一次即可。</li></ul><h1 id="如何添加"><a href="#如何添加" class="headerlink" title="如何添加"></a>如何添加</h1><h2 id="客户端生成ssh-key"><a href="#客户端生成ssh-key" class="headerlink" title="客户端生成ssh key"></a>客户端生成ssh key</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-keygen -t rsa -C <span class="hljs-string">&quot;youremail@example.com&quot;</span><br></code></pre></td></tr></table></figure><p><a href="mailto:&#121;&#111;&#x75;&#114;&#x65;&#109;&#97;&#105;&#x6c;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#111;&#x6d;">&#121;&#111;&#x75;&#114;&#x65;&#109;&#97;&#105;&#x6c;&#64;&#x65;&#x78;&#97;&#x6d;&#x70;&#x6c;&#101;&#x2e;&#x63;&#111;&#x6d;</a>改为自己的邮箱即可，途中会让你输入密码啥的，不需要管，一路回车即可，会生成你的ssh key。（如果重新生成的话会覆盖之前的ssh key。）</p><p>再执行以下操作：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-agent -s <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh-add ~/.ssh/id_rsa<br></code></pre></td></tr></table></figure><h2 id="配置服务端"><a href="#配置服务端" class="headerlink" title="配置服务端"></a>配置服务端</h2><p>打开你刚刚生成的id_rsa.pub，将里面的内容复制，进入你的github账号，在settings下，SSH and GPG keys下new SSH key，然后将id_rsa.pub里的内容复制到Key中，完成后Add SSH Key。</p><p><img src="/images/image-1672404926598.png" alt="file"></p><h1 id="验证Key"><a href="#验证Key" class="headerlink" title="验证Key"></a>验证Key</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">ssh -T git@github.com <br></code></pre></td></tr></table></figure><p>提示：Hi xxx! You’ve successfully authenticated, but GitHub does not provide shell access. 问题就解决啦</p>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>矩阵的行/列满秩</title>
    <link href="/2022/12/17/output/full-rank/index/"/>
    <url>/2022/12/17/output/full-rank/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="名词解释"><a href="#名词解释" class="headerlink" title="名词解释"></a>名词解释</h2><ul><li>行满秩</li></ul><p>矩阵有效的行数，也就是线性无关的行的个数。</p><ul><li>列满秩</li></ul><p>矩阵有效的列数，也就是线性无关的列的个数。</p><ul><li>满秩</li></ul><p>一个矩阵行满秩或者列满秩（满足一个即可）就称为满秩矩阵。</p><p>这里需要注意的是，并不是只有方阵才能满秩。因为“满秩”说的是一个矩阵中最大的非零 $n$ 阶方阵的阶数 $n$, 很显然，只要一个矩阵行满秩（列满秩），那么这个矩阵内部就不会存在阶数大于其行数（列数）的方阵了，自然也不会存在阶数大于其行数（列数）的非零方阵。</p><ul><li>行秩 $&#x3D;$ 列秩 $&#x3D;$ 秩</li></ul><p>无论一个行列式是否是行满秩或列满秩矩阵，都有如下性质：</p><p>行秩 $&#x3D;$ 列秩 $&#x3D;$ 秩。</p><p>对此我们可以这样理解：由于转置并不改变矩阵的秩，因此必然有“行秩 $&#x3D;$ 列秩”。</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>若 $A$ 【行】满秩，则：</p><p>$$R(BA)&#x3D;R(B).$$</p><p>若 $A$ 【列】满秩，则：</p><p>$$R(AB)&#x3D;R(B).$$</p><h2 id="性质解释"><a href="#性质解释" class="headerlink" title="性质解释"></a>性质解释</h2><p>下面对上述性质的解释并不是严格的数学推导，而是通过合理的思考方式，在能够自圆其说的情况下，对上述性质做形象化的解释以帮助记忆和使用上述性质。</p><p>当 $A$ 【行】满秩时，对 $R(BA)&#x3D;R(B)$ 的理解为：</p><p><img src="/images/image-1671248187897.png" alt="file"></p><p>当 $A$ 【列】满秩时，对 $R(AB)&#x3D;R(B)$ 的理解为：</p><p><img src="/images/image-1671248202548.png" alt="file"></p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>大整数相乘 - 模拟/分治/FFT/CRT/网络流/Furer</title>
    <link href="/2022/12/06/output/bigintegermultiply/index/"/>
    <url>/2022/12/06/output/bigintegermultiply/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h1><p>有两个超过long long类型的大整数X和Y，用较低的复杂度求解X*Y。</p><h1 id="六种方法"><a href="#六种方法" class="headerlink" title="六种方法"></a>六种方法</h1><h2 id="方法一：模拟"><a href="#方法一：模拟" class="headerlink" title="方法一：模拟"></a>方法一：模拟</h2><p>时间复杂度：$O(n^2)$</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>模拟乘法的过程，一个数的第i位和另一个数的第j位相乘，一定会累加到结果的第i+j位，结果的数组一个数组元素存2位数，最后对结果整除得到进位，mod得到余数就是i+j位的数字，最后打印出来。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">multiply</span><span class="hljs-params">(std::string s, std::string t)</span> </span>&#123;<br>    <span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>) s.<span class="hljs-built_in">size</span>(), m = (<span class="hljs-type">int</span>) t.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-built_in">reverse</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-built_in">reverse</span>(t.<span class="hljs-built_in">begin</span>(), t.<span class="hljs-built_in">end</span>());<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ans</span><span class="hljs-params">(n + m + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> bit = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m || bit; j++) &#123;<br>            <span class="hljs-type">int</span> now = ans[i + j] + (s[i] - <span class="hljs-string">&#x27;0&#x27;</span>) * (t[i] - <span class="hljs-string">&#x27;0&#x27;</span>) + bit;<br>            ans[i + j] = now % <span class="hljs-number">10</span>;<br>            bit = now / <span class="hljs-number">10</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (ans.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) &#123;<br>        ans.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法二：分治"><a href="#方法二：分治" class="headerlink" title="方法二：分治"></a>方法二：分治</h2><p>时间复杂度：$O(n^{log^3}) \approx O(n^{\frac{3}{2}}) \approx O(n^{1.59})$</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>分治算法解题的一般步骤：</p><p>分解：将要解决的问题划分为若干个规模较小的同类问题 求解：当子问题划分的足够小时，用较简单的方法解决 合并：按原问题的要求，将子问题的解逐层合并构成原问题的解</p><h3 id="X和Y的位数相同"><a href="#X和Y的位数相同" class="headerlink" title="X和Y的位数相同"></a>X和Y的位数相同</h3><p><img src="/images/20201129001414493.png"></p><p>$$ X &#x3D; A*10^{\frac{n}{2}}+B \quad Y&#x3D;C*10^{\frac{2}{n}} + D $$</p><p>$$ XY &#x3D; (A*10^{\frac{n}{2}}+B)*(C*10^{\frac{n}{2}}+D) $$</p><p>$$ XY &#x3D; AC*10^n+(AD+BC)*10^{\frac{2}{n}}+BD $$</p><p>计算成本：我们必须进行4次n&#x2F;2位整数的乘法(AC，AD，BC和BD)，以及3次不超过n位的整数加法此外还要做2次移位。所有这些加法和移位共用O（n）步运算。设T（n）是2个n位整数相乘所需的运算总数，我们有：</p><p>$$ T(n) &#x3D; O(1) \quad n &#x3D; 1 $$</p><p>$$ T(n)&#x3D;4T(n&#x2F;2)+O(n) \quad n &gt; 1 $$</p><p>得：</p><p>$$T(n) &#x3D; O(n^2)$$</p><p>这种方法不见得比暴力更有效，所以需要改进一点，变换上式得：</p><p>$$ XY&#x3D;AC*10^n + ((A-B)*(D-C) + AC+BD)*10^{\frac{2}{n}}+BD $$</p><p>计算成本：3次n&#x2F;2位乘法，6次不超过n位加减法，2次移位，所有加法和移位共计O(n)次运算。我们有：</p><p>$$ T(n) &#x3D; O(1) \quad n &#x3D; 1 $$</p><p>$$T(n)&#x3D;3T(n&#x2F;2) + O(n) \quad n &gt; 1$$</p><p>得：</p><p>$$T(n) &#x3D; O(n^{log^3}) \approx O(n^{\frac{3}{2}}) \approx O(n^{1.59})$$</p><h3 id="X和Y的位数不同"><a href="#X和Y的位数不同" class="headerlink" title="X和Y的位数不同"></a>X和Y的位数不同</h3><p>和位数相同同理</p><p>假设 n1为B的位数，B属于低位的那一部分 n2为A的位数，A属于高位的那一部分 m1为D的位数，D属于低位的那一部分 m2为D的位数，C属于高位的那一部分</p><p>$$XY&#x3D;(A*10^{n_2}+B)*(C*10^{m_2}+D)+BD$$</p><p>$$XY&#x3D;AC*10^{n_2+m_2}+(AD*10^{n_2}+BC*10^{m_2})+BD$$</p><p>上式一共需要进行2次n2的乘法（AC、AD各一次）、2次m2的乘法（AC、BC各一次）和3次加法，因而该算法的时间复杂度为</p><p>$$T(m + n) &#x3D; 2*T(m) + 2*T(n)+O(m+n)$$</p><p>跟上面一样，对AD+BC进行分解优化得：</p><p>$$XY&#x3D;2*AC*10^{n_2+m_2}+(A*10^{n_2}-B)*(D-C*10^{m_2}) + 2*BD$$</p><p>修改后的时间复杂度为：</p><p>$$T(m+n) &#x3D; T(m) + T(n) + T(min(n, m)) + O(m + n)$$</p><p>由于$T(min(n,m)) &lt; T(m)+T(n) $，所以修改后的算法更好，时间复杂度为</p><p>$$T(n) &#x3D; O(n^{log^3}) \approx O(n^{\frac{3}{2}}) \approx O(n^{1.59})$$</p><h3 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">solve</span><span class="hljs-params">(std::string X, std::string Y)</span> </span>&#123;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">result</span><span class="hljs-params">(<span class="hljs-number">255</span>, <span class="hljs-number">0</span>)</span></span>;<br>    std::function&lt;<span class="hljs-type">void</span>(std::string, std::string, <span class="hljs-type">int</span>)&gt; multiply = [&amp;](std::string s, std::string t, <span class="hljs-type">int</span> pos) &#123;<br>        <span class="hljs-type">int</span> n = (<span class="hljs-type">int</span>) s.<span class="hljs-built_in">size</span>(), m = (<span class="hljs-type">int</span>) t.<span class="hljs-built_in">size</span>();<br>        <span class="hljs-keyword">if</span> (n == <span class="hljs-number">0</span> || m == <span class="hljs-number">0</span>) &#123;                 <span class="hljs-comment">// 位数为0时</span><br>            <span class="hljs-keyword">return</span> ;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (n == <span class="hljs-number">1</span> &amp;&amp; m == <span class="hljs-number">1</span>) &#123;          <span class="hljs-comment">// 递归到当前数组s和t的位数全为1时</span><br>            result[pos] += (s[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span>) * (t[<span class="hljs-number">0</span>] - <span class="hljs-string">&#x27;0&#x27;</span>);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125; <span class="hljs-keyword">else</span> &#123;                                <span class="hljs-comment">// 当数组s和t的位数至少有一个不为1时</span><br>            <span class="hljs-type">int</span> n1 = n / <span class="hljs-number">2</span>;                     <span class="hljs-comment">// n1为B的位数，B属于低位的那一部分</span><br>            <span class="hljs-type">int</span> n2 = n - n1;                    <span class="hljs-comment">// n2为A的位数，A属于高位的那一部分</span><br>            <span class="hljs-type">int</span> m1 = m / <span class="hljs-number">2</span>;                     <span class="hljs-comment">// m1为D的位数，D属于低位的那一部分</span><br>            <span class="hljs-type">int</span> m2 = m - m1;                    <span class="hljs-comment">// m2为D的位数，C属于高位的那一部分</span><br>            std::string A = s.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, n2);    <span class="hljs-comment">// 获取s的高位部分A</span><br>            std::string B = s.<span class="hljs-built_in">substr</span>(n2);       <span class="hljs-comment">// 获取s的低位部分B</span><br>            std::string C = t.<span class="hljs-built_in">substr</span>(<span class="hljs-number">0</span>, m2);    <span class="hljs-comment">// 获取t的高位部分C</span><br>            std::string D = t.<span class="hljs-built_in">substr</span>(m2);       <span class="hljs-comment">// 获取t的低位部分D</span><br>            <span class="hljs-built_in">multiply</span>(A, C, pos + n1 + m1);      <span class="hljs-comment">// AC,在result[pos+n1+m1]的位置存储AC，也是说偏移pos+n1+m1位，pos初始化为0</span><br>            <span class="hljs-built_in">multiply</span>(B, C, pos + m1);           <span class="hljs-comment">// BC,偏移pos+m1位</span><br>            <span class="hljs-built_in">multiply</span>(A, D, pos + n1);           <span class="hljs-comment">// AD,偏移pos+1位</span><br>            <span class="hljs-built_in">multiply</span>(B, D, pos);                <span class="hljs-comment">// BD,偏移pos位</span><br>        &#125;<br>    &#125;;<br>    <span class="hljs-built_in">multiply</span>(X, Y, <span class="hljs-number">0</span>);<br><br>    <span class="hljs-type">int</span> len = (<span class="hljs-type">int</span>) X.<span class="hljs-built_in">size</span>() + (<span class="hljs-type">int</span>) Y.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= len; i++) &#123;<br>        <span class="hljs-type">int</span> now = result[i] % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> bit1 = result[i] / <span class="hljs-number">10</span> % <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> bit2 = result[i] / <span class="hljs-number">100</span>;<br>        result[i] = now;<br>        result[i + <span class="hljs-number">1</span>] += bit1;<br>        result[i + <span class="hljs-number">2</span>] += bit2;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (result.<span class="hljs-built_in">back</span>() == <span class="hljs-number">0</span>) &#123;<br>        result.<span class="hljs-built_in">pop_back</span>();<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="方法三：FFT"><a href="#方法三：FFT" class="headerlink" title="方法三：FFT"></a>方法三：FFT</h2><p>时间复杂度：$O(nlogn)$</p><p>通过分治的思想，最终演变成FFT的雏形，FFT的思想也是分治，但是它的理论要更为深奥。 为了避免精度问题，可以改用快速数论变换FNTT。 <a href="https://blog.csdn.net/TheWayForDream/article/details/113944059">具体可以看这篇文章的推导</a></p><h2 id="方法四：中国剩余定理"><a href="#方法四：中国剩余定理" class="headerlink" title="方法四：中国剩余定理"></a>方法四：中国剩余定理</h2><p>把每个数分解到一些互素的模上，然后每个同余方程对应乘起来就行。</p><h2 id="方法五：网络流"><a href="#方法五：网络流" class="headerlink" title="方法五：网络流"></a>方法五：网络流</h2><p>补</p><h2 id="方法六-Furer’s-algorithm"><a href="#方法六-Furer’s-algorithm" class="headerlink" title="方法六: Furer’s algorithm"></a>方法六: Furer’s algorithm</h2><p>在渐进意义上FNTT还快的算法。不过好像不太实用，本文就不作介绍了。大家可以参考<a href="https://en.wikipedia.org/wiki/F%C3%BCrer%27s_algorithm">维基百科Fürer’s algorithm</a></p>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>算术表达式求值</title>
    <link href="/2022/12/06/output/expression/index/"/>
    <url>/2022/12/06/output/expression/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>表达式求值要解决的问题一般是输入一个字符串表示的表达式，要求输出它的值。当然也有变种比如表达式中是否包含括号，指数运算，含多少变量，判断多个表达式是否等价，等等。</p><p>表达式一般需要先进行语法分析（grammer parsing）再求值，也可以边分析边求值，语法分析的作用是检查输入的字符串是否是一个合法的表达式，一般使用语法分析器（parser）解决。</p><p>表达式包含两类字符：运算数和运算符。对于长度为n的表达式，借助合适的分析方法，可以在 $O(n)$的时间复杂度内完成分析与求值。</p><h2 id="表达式树与逆波兰表达式"><a href="#表达式树与逆波兰表达式" class="headerlink" title="表达式树与逆波兰表达式"></a>表达式树与逆波兰表达式</h2><p>一种递归分析表达式的方法是，将表达式当成普通的语法规则进行分析，分析后拆分成如图所示的</p><p><img src="/images/bet.png"></p><p>表达式树，然后在树结构上自底向上进行运算。</p><p>表达式树上进行 树的遍历 可以得到不同类型的表达式。算术表达式分为三种，分别是前缀表达式、中缀表达式、后缀表达式。中缀表达式是日常生活中最常用的表达式；后缀表达式是计算机容易理解的表达式。</p><p>前序遍历对应前缀表达式（波兰式） 中序遍历对应中缀表达式 后序遍历对应后缀表达式（逆波兰式） 逆波兰表达式（后缀表达式）是书写数学表达式的一种形式，其中运算符位于其操作数之后。例如，以下表达式：</p><p>$$a+b*c*d+(e-f)*(g*h+i)$$</p><p>可以用逆波兰表达式书写：</p><p>$$abc*d*+ef-gh*i+*+$$</p><p>因此，逆波兰表达式与表达式树一一对应。逆波兰表达式不需要括号表示，它的运算顺序是唯一确定的。</p><p>逆波兰表达式的方便之处在于很容易在线性时间内计算。举个例子：在逆波兰表达式32\*1- 中，首先计算 3*2&#x3D;6（使用最后一个运算符，即栈顶运算符），然后计算6-1&#x3D;5 。可以看到：对于一个逆波兰表达式，只需要 维护一个数字栈，每次遇到一个运算符，就取出两个栈顶元素，将运算结果重新压入栈中。最后，栈中唯一一个元素就是该逆波兰表达式的运算结果。该算法拥有O(n) 的时间复杂度。</p><h2 id="只含左结合的二元运算符的含括号表达式"><a href="#只含左结合的二元运算符的含括号表达式" class="headerlink" title="只含左结合的二元运算符的含括号表达式"></a>只含左结合的二元运算符的含括号表达式</h2><p>考虑简化的问题。假设所有运算符都是二元的：所有运算符都有两个参数。并且所有运算符都是左结合的：如果运算符的优先级相等，则从左到右执行。允许使用括号。</p><p>对于这种类型的中缀表达式的计算，可以将其转化为后缀表达式再进行计算。定义两个 栈 来分别存储运算符和运算数，每当遇到一个数直接放进运算数栈。每个运算符块对应于一对括号，运算符栈只对于运算符块的内部单调。每当遇到一个操作符时，要查找运算符栈中最顶部运算符块中的元素，在运算符块的内部保持运算符按照优先级降序进行适当的弹出操作，弹出的同时求出对应的子表达式的值。</p><p>以下部分用「输出」表示输出到后缀表达式，即将该数字放在运算数栈上，或者弹出运算符和两个操作数，运算后再将结果压回运算数栈上。从左到右扫描该中缀表达式：</p><ol><li>如果遇到数字，直接输出该数字。</li><li>如果遇到左括号，那么将其放在运算符栈上。</li><li>如果遇到右括号，不断输出栈顶元素，直至遇到左括号，左括号出栈。换句话说，执行一对括号内的所有运算符。</li><li>如果遇到其他运算符，不断输出所有运算优先级大于等于当前运算符的运算符。最后，新的运算符入运算符栈。</li><li>在处理完整个字符串之后，一些运算符可能仍然在堆栈中，因此把栈中剩下的符号依次输出，表达式转换结束。</li></ol><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">std::string <span class="hljs-title">convert</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string &amp;s)</span> </span>&#123;<br>    std::unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; level &#123;&#123;<span class="hljs-string">&#x27;+&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;-&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;*&#x27;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;/&#x27;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;(&#x27;</span>, <span class="hljs-number">-1</span>&#125;, &#123;<span class="hljs-string">&#x27;)&#x27;</span>, <span class="hljs-number">-1</span>&#125;&#125;;<br>    std::stack&lt;<span class="hljs-type">char</span>&gt; oper;<br>    std::stringstream ss;<br>    ss &lt;&lt; s;<br>    std::string t, tmp;<br>    <span class="hljs-keyword">while</span> (ss &gt;&gt; tmp) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(tmp[<span class="hljs-number">0</span>])) &#123;<br>            t += tmp + <span class="hljs-string">&quot; &quot;</span>;<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>            oper.<span class="hljs-built_in">push</span>(tmp[<span class="hljs-number">0</span>]);<br>        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;)&#x27;</span>) &#123;<br>            <span class="hljs-keyword">while</span> (!oper.<span class="hljs-built_in">empty</span>() &amp;&amp; oper.<span class="hljs-built_in">top</span>() != <span class="hljs-string">&#x27;(&#x27;</span>) &#123;<br>                t += std::<span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>, oper.<span class="hljs-built_in">top</span>()) + <span class="hljs-string">&quot; &quot;</span>;<br>                oper.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            oper.<span class="hljs-built_in">pop</span>();<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">while</span> (!oper.<span class="hljs-built_in">empty</span>() &amp;&amp; level[oper.<span class="hljs-built_in">top</span>()] &gt;= level[tmp[<span class="hljs-number">0</span>]]) &#123;<br>                t += std::<span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>, oper.<span class="hljs-built_in">top</span>()) + <span class="hljs-string">&quot; &quot;</span>;<br>                oper.<span class="hljs-built_in">pop</span>();<br>            &#125;<br>            oper.<span class="hljs-built_in">push</span>(tmp[<span class="hljs-number">0</span>]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">while</span> (!oper.<span class="hljs-built_in">empty</span>()) &#123;<br>        t += std::<span class="hljs-built_in">string</span>(<span class="hljs-number">1</span>, oper.<span class="hljs-built_in">top</span>()) + <span class="hljs-string">&quot; &quot;</span>;<br>        oper.<span class="hljs-built_in">pop</span>();<br>    &#125;<br>    <span class="hljs-keyword">return</span> t;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">calc</span><span class="hljs-params">(<span class="hljs-type">const</span> std::string&amp; s)</span> </span>&#123;<br>    std::stack&lt;<span class="hljs-type">int</span>&gt; num;<br>    std::stringstream ss;<br>    ss &lt;&lt; s;<br>    std::string t, tmp;<br>    <span class="hljs-keyword">while</span> (ss &gt;&gt; tmp) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-built_in">isdigit</span>(tmp[<span class="hljs-number">0</span>])) &#123;<br>            num.<span class="hljs-built_in">push</span>(<span class="hljs-built_in">stoi</span>(tmp));<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-type">int</span> b = <span class="hljs-number">0</span>, a = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">if</span> (!num.<span class="hljs-built_in">empty</span>()) b = num.<span class="hljs-built_in">top</span>();<br>            num.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (!num.<span class="hljs-built_in">empty</span>()) a = num.<span class="hljs-built_in">top</span>();<br>            num.<span class="hljs-built_in">pop</span>();<br>            <span class="hljs-keyword">if</span> (tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;+&#x27;</span>) num.<span class="hljs-built_in">push</span>(a + b);<br>            <span class="hljs-keyword">if</span> (tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;-&#x27;</span>) num.<span class="hljs-built_in">push</span>(a - b);<br>            <span class="hljs-keyword">if</span> (tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;*&#x27;</span>) num.<span class="hljs-built_in">push</span>(a * b);<br>            <span class="hljs-keyword">if</span> (tmp[<span class="hljs-number">0</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) num.<span class="hljs-built_in">push</span>(a / b);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> num.<span class="hljs-built_in">top</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>考研</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Atcoder ABC280</title>
    <link href="/2022/12/03/output/atcoder-abc280/index/"/>
    <url>/2022/12/03/output/atcoder-abc280/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="A-Pawn-on-a-Grid"><a href="#A-Pawn-on-a-Grid" class="headerlink" title="A. Pawn on a Grid"></a>A. Pawn on a Grid</h1><p>统计<code>#</code>个数。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    author:  jujimeizuo</span><br><span class="hljs-comment"> *    created: 2022-12-03 20:00:15</span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> n, m;<br>    std::cin &gt;&gt; n &gt;&gt; m;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        std::string s;<br>        std::cin &gt;&gt; s;<br>        cnt += std::<span class="hljs-built_in">count</span>(s.<span class="hljs-built_in">begin</span>(), s.<span class="hljs-built_in">end</span>(), <span class="hljs-string">&#x27;#&#x27;</span>);<br>    &#125;<br><br>    std::cout &lt;&lt; cnt &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-Inverse-Prefix-Sum"><a href="#B-Inverse-Prefix-Sum" class="headerlink" title="B. Inverse Prefix Sum"></a>B. Inverse Prefix Sum</h1><p>模拟。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    author:  jujimeizuo</span><br><span class="hljs-comment"> *    created: 2022-12-03 20:01:17</span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        std::cin &gt;&gt; a[i];<br>        <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) std::cout &lt;&lt; a[i] - a[i - <span class="hljs-number">1</span>] &lt;&lt; <span class="hljs-string">&quot; &quot;</span>;<br>        <span class="hljs-keyword">else</span> std::cout &lt;&lt; a[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-Extra-Character"><a href="#C-Extra-Character" class="headerlink" title="C. Extra Character"></a>C. Extra Character</h1><p>找到第一个不相等字符位置。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    author:  jujimeizuo</span><br><span class="hljs-comment"> *    created: 2022-12-03 20:03:26</span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    std::string s, t;<br>    std::cin &gt;&gt; s &gt;&gt; t;<br><br>    <span class="hljs-type">int</span> p = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">while</span> (p &lt; (<span class="hljs-type">int</span>) s.<span class="hljs-built_in">size</span>() &amp;&amp; s[p] == t[p]) &#123;<br>        p++;<br>    &#125;<br><br>    std::cout &lt;&lt; p + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="D-Factorial-and-Multiple"><a href="#D-Factorial-and-Multiple" class="headerlink" title="D. Factorial and Multiple"></a>D. Factorial and Multiple</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>找到最小的n是的n!是k的倍数。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>n!的因子p个数为<code>n / p + n / p / p + ...</code> 质因数分解K，对于K的一个质因子p，个数为cnt，二分求出最小的x，使得x的p个数大于等于cnt。 <code>ans = std::max(ans, x)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    author:  jujimeizuo</span><br><span class="hljs-comment"> *    created: 2022-12-03 20:05:06</span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> K;<br>    std::cin &gt;&gt; K;<br><br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">auto</span> check = [&amp;](<span class="hljs-type">long</span> <span class="hljs-type">long</span> x, <span class="hljs-type">long</span> <span class="hljs-type">long</span> i, <span class="hljs-type">long</span> <span class="hljs-type">long</span> c) -&gt; <span class="hljs-type">bool</span> &#123;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x) &#123;<br>            cnt += x / i;<br>            x /= i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> cnt &gt;= c;<br>    &#125;;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-type">long</span> i = <span class="hljs-number">2</span>; i * i &lt;= K; i++) &#123;<br>        <span class="hljs-type">int</span> cnt = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (K % i == <span class="hljs-number">0</span>) cnt++, K /= i;<br>        <span class="hljs-keyword">if</span> (cnt == <span class="hljs-number">0</span>) <span class="hljs-keyword">continue</span> ;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> l = l, r = <span class="hljs-number">1E12</span>;<br>        <span class="hljs-type">long</span> <span class="hljs-type">long</span> x = <span class="hljs-number">-1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">long</span> <span class="hljs-type">long</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (<span class="hljs-built_in">check</span>(mid, i, cnt)) &#123;<br>                x = mid;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        ans = std::<span class="hljs-built_in">max</span>(ans, x);<br>    &#125;<br>    <span class="hljs-keyword">if</span> (K &gt; <span class="hljs-number">1</span>) &#123;<br>        ans = std::<span class="hljs-built_in">max</span>(ans, K);<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="E-Critical-Hit"><a href="#E-Critical-Hit" class="headerlink" title="E. Critical Hit"></a>E. Critical Hit</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>一只怪物有n滴血，攻击一滴血的概率为p&#x2F;100 (p1),攻击两滴血的概率为1 - (100 &#x2F; p) (p2)，求打死怪物的攻击期望。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>设dp[i]表示攻击i滴血的攻击期望，则转移方程为 <code>dp[i] = dp[i - 1] * p1 + dp[i - 2] * P2 + 1</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> *    author:  jujimeizuo</span><br><span class="hljs-comment"> *    created: 2022-12-03 21:18:42</span><br><span class="hljs-comment">**/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> n, p;<br>    std::cin &gt;&gt; n &gt;&gt; p;<br><br>    Mint inv100 = <span class="hljs-built_in">power</span>(<span class="hljs-built_in">Mint</span>(<span class="hljs-number">100</span>), md - <span class="hljs-number">2</span>);<br>    Mint p2 = inv100 * p, p1 = inv100 * (<span class="hljs-number">100</span> - p);<br><br>    <span class="hljs-function">std::vector&lt;Mint&gt; <span class="hljs-title">dp</span><span class="hljs-params">(n + <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        dp[i] = dp[i - <span class="hljs-number">1</span>] * p1 + dp[std::<span class="hljs-built_in">max</span>(<span class="hljs-number">0</span>, i - <span class="hljs-number">2</span>)] * p2 + <span class="hljs-number">1</span>;<br>    &#125;<br><br>    std::cout &lt;&lt; dp[n] &lt;&lt; <span class="hljs-string">&#x27;\n&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>competition</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>TopCoder SRM842</title>
    <link href="/2022/12/03/output/topcoder-srm842/index/"/>
    <url>/2022/12/03/output/topcoder-srm842/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h1 id="A-ToniasTower"><a href="#A-ToniasTower" class="headerlink" title="A. ToniasTower"></a>A. ToniasTower</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>Tonia 有N个单位立方体。她想用它们来建造一座塔。 Tonia 的塔将由一排或多排立方体组成，每一排立在下一排上。（显然，除了站在地上的最下面一排。） 只有一个限制：除底部以外的每一行都必须严格比它所在的行短（即，立方体严格减少）。</p><p>Tonia 现在想知道：她可以用所有立方体建造的最高塔是什么？ 找到最大的 X，这样 Tonia 可以使用她的N个立方体来建造一个有 X 行立方体的塔。然后，找到一种建造这样一座塔的方法。换句话说，确定塔的 X 行中每一行的立方体数量。 返回带有 X 个元素的 a：对于塔的每一行，从上到下，Tonia 应该在该行中使用的立方体数量。</p><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><p>让n一次减去，1，2，3，4，5…，最后如果剩下一个数字，则加给最后一个数。</p><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">ToniasTower</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">build</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span></span>;<br>&#125;;<br><br><span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">ToniasTower::build</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> </span>&#123;<br>    std::vector&lt;<span class="hljs-type">int</span>&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        ans.<span class="hljs-built_in">push_back</span>(i);<br>        n -= i;<br>    &#125;<br>    ans.<span class="hljs-built_in">back</span>() += n;<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="B-SmallRectangles"><a href="#B-SmallRectangles" class="headerlink" title="B. SmallRectangles"></a>B. SmallRectangles</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>我们有两个 A 和 B，分别有AL和BL元素。这些描述了如何切割矩形</p><p>整个矩形的尺寸为 sum(A) 乘以 sum(B)。通过使AL -1 切割正交于长度 sum(A) 的一侧和BL -1 切割与另一侧正交， 它被切割成AL乘以BL的较小矩形。</p><p>A 的元素是段的长度，切割将长度 sum(A) 的边分成这些段。类似地，B 的元素是矩形另一边被分割成的线段的长度。因此，A 和 B 是通过将大矩形切成块而产生的较小矩形的边长。</p><h2 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h2><p>对每一个pair插入到set中，求set到size()即可。</p><h2 id="Code-1"><a href="#Code-1" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">SmallRectangles</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">count</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; Aprefix, std::vector&lt;<span class="hljs-type">int</span>&gt; Bprefix, <span class="hljs-type">int</span> AL, <span class="hljs-type">int</span> BL, <span class="hljs-type">int</span> AM, <span class="hljs-type">int</span> BM, <span class="hljs-type">int</span> seed)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">long</span> <span class="hljs-type">long</span> <span class="hljs-title">SmallRectangles::count</span><span class="hljs-params">(std::vector&lt;<span class="hljs-type">int</span>&gt; Aprefix, std::vector&lt;<span class="hljs-type">int</span>&gt; Bprefix, <span class="hljs-type">int</span> AL, <span class="hljs-type">int</span> BL, <span class="hljs-type">int</span> AM, <span class="hljs-type">int</span> BM, <span class="hljs-type">int</span> seed)</span> </span>&#123;<br>    std::map&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;, <span class="hljs-type">long</span> <span class="hljs-type">long</span>&gt; cnt;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; AL; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; BL; j++) &#123;<br>            <span class="hljs-type">int</span> a = std::<span class="hljs-built_in">min</span>(Aprefix[i], Bprefix[j]);<br>            <span class="hljs-type">int</span> b = std::<span class="hljs-built_in">max</span>(Aprefix[i], Bprefix[j]);<br>            cnt[&#123;a, b&#125;]++;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">long</span> <span class="hljs-type">long</span> ans = cnt.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-keyword">return</span> ans;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="C-StringReduction"><a href="#C-StringReduction" class="headerlink" title="C. StringReduction"></a>C. StringReduction</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>你有一串小写英文字母： 开始。</p><p>您还获得了 X和 Y。这些描述了您可以对字符串执行的一些操作。更准确地说，对于每个有效索引 i，整数X [i] 和字符Y [i] 描述了一个这样的操作，如下所述。</p><p>您可以通过以任意顺序任意多次执行以下操作来修改字符串：</p><p>交换字符串中的任意两个连续字符。 对于任何有效索引 i：选择一组特定的X [i] 个字母Y [i ] 的连续副本。擦除其中的X [i]-1 个，保留剩下的一个。 当然，只有当当前字符串中某处存在所需的相同字母组时，才能应用擦除规则。</p><h2 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h2><p>用cnt存下每个字符的个数，对每个字符，尽最大努力依次减去X[i] - 1</p><h2 id="Code-2"><a href="#Code-2" class="headerlink" title="Code"></a>Code</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringReduction</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">reduce</span><span class="hljs-params">(std::string, std::vector&lt;<span class="hljs-type">int</span>&gt;, std::string)</span></span>;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">StringReduction::reduce</span><span class="hljs-params">(std::string start, std::vector&lt;<span class="hljs-type">int</span>&gt; X, std::string Y)</span> </span>&#123;<br><br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">cnt</span><span class="hljs-params">(<span class="hljs-number">26</span>)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> &amp;c : start) &#123;<br>        cnt[c - <span class="hljs-string">&#x27;a&#x27;</span>]++;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-type">int</span>) X.<span class="hljs-built_in">size</span>(); i++) &#123;<br>        <span class="hljs-keyword">if</span> (X[i] == <span class="hljs-number">1</span>) <span class="hljs-keyword">continue</span> ;<br>        <span class="hljs-type">int</span> digit = Y[i] - <span class="hljs-string">&#x27;a&#x27;</span>;<br>        <span class="hljs-keyword">while</span> (cnt[digit] &gt;= X[i]) &#123;<br>            cnt[digit] -= X[i] - <span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">return</span> std::<span class="hljs-built_in">accumulate</span>(cnt.<span class="hljs-built_in">begin</span>(), cnt.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>competition</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>C++ 回调函数及 std::function 与 std::bind</title>
    <link href="/2022/11/20/output/callback/index/"/>
    <url>/2022/11/20/output/callback/index/</url>
    
    <content type="html"><![CDATA[<p>[toc] <strong>回调函数是做为参数传递的一种函数</strong>，在早期C样式编程当中，回调函数必须依赖函数指针来实现。</p><p>而后的C++语言当中，又引入了 std::function 与 std::bind 来配合进行回调函数实现。</p><p>标准库中有大量函数应用到了回调函数，其中 std::sort 就是一个经典例子。</p><h1 id="一、-回调函数"><a href="#一、-回调函数" class="headerlink" title="一、 回调函数"></a>一、 回调函数</h1><p>回调函数的创建步骤大概为：</p><p>1，声明一个函数指针类型。</p><p>2，拟写使用回调函数的函数，将函数指针类型及变量名声明作为参数传递。</p><p>3，拟写符合函数指针类型的实现函数，将实现函数的指针作为参数传递给使用它的函数。</p><p>下面演示了一个最简单的回调函数定义及使用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*Calc)</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CalcValue</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">const</span> Calc &amp;func)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">func</span>(a, b);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">6</span>;<br>    <span class="hljs-type">int</span> c = <span class="hljs-built_in">CalcValue</span>(a, b, Add);<br><br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Value: &quot;</span> &lt;&lt; c &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>可以看到，我们通过语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">typedef</span> <span class="hljs-title">int</span> <span class="hljs-params">(*Calc)</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span></span>;<br></code></pre></td></tr></table></figure><p>来定义了回调函数的指针类型，包括返回值类型、(*类型名)函数指针、参数表。</p><p>继而又定义并且实现了回调函数的使用者函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">CalcValue</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b, <span class="hljs-type">const</span> Calc &amp;func)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">func</span>(a, b);<br>&#125;<br></code></pre></td></tr></table></figure><p>再去定义并实现符合函数指针类型的实现函数：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br></code></pre></td></tr></table></figure><p>必须要注意的是，实现函数的类型必须要和函数指针的类型声明一致，也就是返回值和参数表（个数、类型）要完全一致。</p><p>这样就完成了一个简单且最基本的回调函数。</p><p>那么，回调函数是什么情况下使用的呢？</p><p>举个最经典的例子就是 <code>std::sort</code>，当你需要给一个存储有自定义结构体的 vector 进行排序时，编译器是无法知道如何对自定义结构体进行排序的。</p><p>这时候就需要实现一个回调函数来告诉编译器如何排序：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">typedef</span> <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataPool</span> &#123;<br>    <span class="hljs-type">int</span> value = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> date = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">DataPool</span>(<span class="hljs-type">int</span> v, <span class="hljs-type">int</span> d) : <span class="hljs-built_in">value</span>(v), <span class="hljs-built_in">date</span>(d) &#123;&#125;;<br>&#125;DataPool;<br><br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">SortCallBack</span><span class="hljs-params">(<span class="hljs-type">const</span> DataPool &amp;a, <span class="hljs-type">const</span> DataPool&amp; b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a.value &lt; b.value;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    vector&lt;DataPool&gt; vec;<br>    vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">DataPool</span>(<span class="hljs-number">2</span>, <span class="hljs-number">1</span>));<br>    vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">DataPool</span>(<span class="hljs-number">5</span>, <span class="hljs-number">2</span>));<br>    vec.<span class="hljs-built_in">push_back</span>(<span class="hljs-built_in">DataPool</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>));<br><br>    std::<span class="hljs-built_in">sort</span>(vec.<span class="hljs-built_in">begin</span>(), vec.<span class="hljs-built_in">end</span>(), SortCallBack);<br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>这样，就相当于自定义了 struct 的排序规则，自然编译器也可以使用 <code>std::sort</code> 对自定义 struct 进行排序操作。</p><h1 id="二、std-function-与-std-bind"><a href="#二、std-function-与-std-bind" class="headerlink" title="二、std::function 与 std::bind"></a>二、std::function 与 std::bind</h1><p>上面演示了最简单的回调函数创建及使用，然而，上面的代码却出现了一个局限性，就是：</p><p>如果需要去回调一个类成员函数，函数指针则无法指向类成员函数。</p><p>在基本C样式面向过程编程当中，这种局限性并不那么明显甚至可以说不存在。但是到了C++当中，这种弊端就显而易见了，解决方式便是使用 std::function 与 std::bind 互相配合。</p><p>它们的头文件是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br></code></pre></td></tr></table></figure><ul><li>std::function</li></ul><p>std::function 是一个模板类。作用是对C++中的可调用对象进行包装，例如普通函数、成员函数、模板函数、静态函数、lambda表达式等。</p><p>它的最基本的作用是，简化调用的复杂程度，统一调用的方式。如果代码中混杂着大量普通函数、模板函数、lambda，使用 std::function 是非常有必要的。</p><p>语法是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">【伪代码】std::function&lt;returnType(argType, argType，...)&gt; func;<br><br>【常规情况】std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; func;<br></code></pre></td></tr></table></figure><p>可以看到，这个模板类当中对类型的声明方式是 &lt; 返回值类型 ( 参数类型1, 参数类型2, …) &gt;。</p><p>你几乎可以拿它包装任何可调用对象，只需简单粗暴的将可调用对象作为右值赋值给它：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">CompareInt</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a &gt; b;<br>&#125;<br><br>std::function&lt;<span class="hljs-type">bool</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; compareFunc = CompareInt;<br></code></pre></td></tr></table></figure><p>那么如何使用它来调用类成员函数呢？这时就需要用到经常与 <code>std::function</code> 配合使用的 <code>std::bind</code>。</p><ul><li>std::bind</li></ul><p>它是一个基于模板的函数，顾明思意它的作用是绑定并返回一个 std::function 对象。</p><p>那么什么是“绑定”？它本身作为延迟计算的思想的一种实现，作为一个调用过程当中的转发者而存在，返回一个 <code>std::function</code> 对象。</p><p>它与 <code>std::function</code> 不同的是，function 是模板类，bind 是模板函数，而 bind 返回的可调用对象可以直接给 function 进行包装并保存。</p><p>为什么要进行“包装”与“转发”呢？</p><p>首先，不规范的解释是，function 的作用是包装，它可以包装类成员函数，但却无法生成类成员函数的可调用对象。而 <code>std::bind</code> 则是可以生成。</p><p>因此，function 与 bind 结合后，便成为了 C++ 中类成员函数作为回调函数的一种规范的实现方式。</p><p><code>std::bind</code> 的语法是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><br><span class="hljs-comment">/* --- 普通函数 --- */</span><br>【伪代码】std::<span class="hljs-built_in">bind</span>(&amp;funcName, std::placeholders::_1, ...);<br><br>【常规情况】std::<span class="hljs-built_in">bind</span>(&amp;Add, std::placeholders::_1, std::placeholders::_2);<br><br><span class="hljs-comment">/* --- 类成员函数 --- */</span><br>【伪代码】std::<span class="hljs-built_in">bind</span>(&amp;className::funcName, classPtr, std::placeholders::_1, ...);<br><br>【常规情况】std::<span class="hljs-built_in">bind</span>(&amp;BrainToolBox::Add, brain, std::placeholders::_1, std::placeholders::_2);<br></code></pre></td></tr></table></figure><p>当用作普通函数的绑定时，第一个参数是可调用对象(普通函数、lambda等)，而第二个参数开始对应可调用对象的参数表。</p><p><code>std::placeholders::_1</code> 代表可调用对象的第一个参数，<code>_2</code>就代表第二个参数，依此类推。</p><p>当用作类成员函数的绑定时，第一个参数仍然是作为类成员的可调用对象引用，第二个参数则是对象的指针，而第三个参数开始对应可调用对象的参数表。</p><p>同样使用 <code>std::placeholders::_*</code> 依次向后推。</p><p>所以，与 <code>std::function</code> 相结合，便可以实现对类成员函数的调用：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">BrainToolBox</span><br>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">Add</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123; <span class="hljs-keyword">return</span> a + b; &#125;;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span><br><span class="hljs-function"></span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">4</span>;<br>    <span class="hljs-type">int</span> b = <span class="hljs-number">6</span>;<br><br>    std::shared_ptr&lt;BrainToolBox&gt; brain = std::<span class="hljs-built_in">make_shared</span>&lt;BrainToolBox&gt;();<br>    std::function&lt;<span class="hljs-type">int</span>(<span class="hljs-type">int</span>, <span class="hljs-type">int</span>)&gt; addFunc = std::<span class="hljs-built_in">bind</span>(&amp;BrainToolBox::Add, brain, std::placeholders::_1, std::placeholders::_2);<br><br>　　 <span class="hljs-type">int</span> c = <span class="hljs-built_in">addFunc</span>(a, b);<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;c Value: &quot;</span> &lt;&lt; c &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> EXIT_SUCCESS;<br>&#125;<br></code></pre></td></tr></table></figure><p>对 <code>std::bind</code> 的额外注解：</p><blockquote><p>1，调用指向非静态成员函数指针或指向非静态数据成员指针时，首参数必须是引用或指针（可以包含智能指针，如 std::shared_ptr 与 std::unique_ptr），指向将访问其成员的对象。 2，到 bind 的参数被复制或移动，而且决不按引用传递，除非包装于 std::ref 或 std::cref 。 3，允许同一 bind 表达式中的多重占位符（例如多个 _1 ），但结果仅若对应参数（ u1 ）是左值或不可移动右值才良好定义。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Linux统计文件夹下的文件数目</title>
    <link href="/2022/11/18/output/getfilenumber/index/"/>
    <url>/2022/11/18/output/getfilenumber/index/</url>
    
    <content type="html"><![CDATA[<p>Linux下有三个命令：<code>ls</code>、<code>grep</code>、<code>wc</code>。通过这三个命令的组合可以统计目录下文件及文件夹的个数。</p><ul><li><p>统计当前目录下文件的个数（不包括目录）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -l | grep <span class="hljs-string">&quot;^-&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li><li><p>统计当前目录下文件的个数（包括子目录）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -lR| grep <span class="hljs-string">&quot;^-&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure></li><li><p>查看某目录下文件夹(目录)的个数（包括子目录）</p>  <figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ <span class="hljs-built_in">ls</span> -lR | grep <span class="hljs-string">&quot;^d&quot;</span> | <span class="hljs-built_in">wc</span> -l<br></code></pre></td></tr></table></figure><p>  命令解析：</p></li><li><p><code>ls -l</code> 长列表输出该目录下文件信息(注意这里的文件是指目录、链接、设备文件等)，每一行对应一个文件或目录，<code>ls -lR</code>是列出所有文件，包括子目录。</p></li><li><p><code>grep &quot;^-&quot;</code> 过滤<code>ls</code>的输出信息，只保留一般文件，只保留目录是<code>grep &quot;^d&quot;</code>。</p></li><li><p><code>wc -l</code> 统计输出信息的行数，统计结果就是输出信息的行数，一行信息对应一个文件，所以就是文件的个数。</p></li></ul>]]></content>
    
    
    <categories>
      
      <category>linux</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>实现简易http服务器</title>
    <link href="/2022/11/09/output/tinyhttpd/index/"/>
    <url>/2022/11/09/output/tinyhttpd/index/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="tinyhttpd工作流程"><a href="#tinyhttpd工作流程" class="headerlink" title="tinyhttpd工作流程"></a>tinyhttpd工作流程</h2><p><img src="/images/process.png"></p><h2 id="核心函数说明"><a href="#核心函数说明" class="headerlink" title="核心函数说明"></a>核心函数说明</h2><ul><li>startup: 绑定监听套接字</li><li>accept_request 每次收到请求，创建一个线程来处理接收到的请求</li><li>serve_file 接读取文件返回给请求的http客户端</li><li>execute_cgi 执行cgi文件</li></ul><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><p>index.html必须没有执行权限，否则看不到内容，并且会产生Program received signal SIGPIPE, Broken pipe，因为程序中如果有可执行权限会当cgi脚本处理。 所以假如html有执行权限先把它去除了，<code>chmod 600 index.html</code></p><p>color.cgi、date.cgi必须要有执行权限，<code>chmod 755 *.cgi</code></p><h2 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h2><h4 id="在项目文件目录下执行make"><a href="#在项目文件目录下执行make" class="headerlink" title="在项目文件目录下执行make"></a>在项目文件目录下执行make</h4><p><img src="/images/make.png"></p><h4 id="在浏览器中输入-127-0-0-1-port"><a href="#在浏览器中输入-127-0-0-1-port" class="headerlink" title="在浏览器中输入 127.0.0.1:port"></a>在浏览器中输入 <code>127.0.0.1:port</code></h4><p><img src="/images/index.png"></p><h4 id="测试color-cgi"><a href="#测试color-cgi" class="headerlink" title="测试color.cgi"></a>测试color.cgi</h4><p><img src="/images/red.png"></p><h4 id="测试index2-html"><a href="#测试index2-html" class="headerlink" title="测试index2.html"></a>测试index2.html</h4><p><img src="/images/index2.png"></p><h4 id="测试date-cgi"><a href="#测试date-cgi" class="headerlink" title="测试date.cgi"></a>测试date.cgi</h4><p><img src="/images/date.png"></p><h2 id="httpd-c"><a href="#httpd-c" class="headerlink" title="httpd.c"></a>httpd.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* J. David&#x27;s webserver */</span><br><span class="hljs-comment">/* This is a simple webserver.</span><br><span class="hljs-comment"> * Created November 1999 by J. David Blackstone.</span><br><span class="hljs-comment"> * CSE 4344 (Network concepts), Prof. Zeigler</span><br><span class="hljs-comment"> * University of Texas at Arlington</span><br><span class="hljs-comment"> */</span><br><span class="hljs-comment">/* This program compiles for Sparc Solaris 2.6.</span><br><span class="hljs-comment"> * To compile for Linux:</span><br><span class="hljs-comment"> *  1) Comment out the #include &lt;pthread.h&gt; line.</span><br><span class="hljs-comment"> *  2) Comment out the line that defines the variable newthread.</span><br><span class="hljs-comment"> *  3) Comment out the two lines that run pthread_create().</span><br><span class="hljs-comment"> *  4) Uncomment the line that runs accept_request().</span><br><span class="hljs-comment"> *  5) Remove -lsocket from the Makefile.</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;ctype.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;strings.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;pthread.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/wait.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> ISspace(x) isspace((int)(x))</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> SERVER_STRING <span class="hljs-string">&quot;Server: jdbhttpd/0.1.0\r\n&quot;</span></span><br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 每次收到请求，创建一个线程来处理接收到的请求</span><br><span class="hljs-comment"> * 把client_sock转成地址作为参数传入pthread_create</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">accept_request</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 错误请求</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bad_request</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 读取文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">cat</span><span class="hljs-params">(<span class="hljs-type">int</span>, FILE *)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 无法执行</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">cannot_execute</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 错误输出</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">error_die</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 执行cig脚本</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">execute_cgi</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 得到一行数据，只要发现c为\n，就认为是一行结束，如果读到\r，在用MSG_PEEK的方式读入一个字符，如果是\n，从socket用读出</span><br><span class="hljs-comment"> * 如果是下个字符则不处理，将c置为\n，结束。如果读到的数据为0中断，或者小于0，也视为结束，c置为\n</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_line</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">char</span> *, <span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 返回httpd头</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">headers</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 没有发现文件</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">not_found</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果不是CGI文件，直接读取文件返回给请求的http客户端</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">server_file</span><span class="hljs-params">(<span class="hljs-type">int</span>, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 开启tcp连接，绑定端口等操作</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">startup</span><span class="hljs-params">(u_short *)</span>;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 如果不是Get或者Post，就报方法没有实现</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">unimplemented</span><span class="hljs-params">(<span class="hljs-type">int</span>)</span>;<br><br><span class="hljs-comment">// Http请求，后续主要是处理这个头</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// GET / HTTP/1.1</span><br><span class="hljs-comment">// Host: 192.168.0.23:47310</span><br><span class="hljs-comment">// Connection: keep-alive</span><br><span class="hljs-comment">// Upgrade-Insecure-Requests: 1</span><br><span class="hljs-comment">// User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/55.0.2883.87 Safari/537.36</span><br><span class="hljs-comment">// Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*; q = 0.8</span><br><span class="hljs-comment">// Accept - Encoding: gzip, deflate, sdch</span><br><span class="hljs-comment">// Accept - Language : zh - CN, zh; q = 0.8</span><br><span class="hljs-comment">// Cookie: __guid = 179317988.1576506943281708800.1510107225903.8862; monitor_count = 5</span><br><span class="hljs-comment">//</span><br><br><span class="hljs-comment">// POST / color1.cgi HTTP / 1.1</span><br><span class="hljs-comment">// Host: 192.168.0.23 : 47310</span><br><span class="hljs-comment">// Connection : keep - alive</span><br><span class="hljs-comment">// Content - Length : 10</span><br><span class="hljs-comment">// Cache - Control : max - age = 0</span><br><span class="hljs-comment">// Origin : http ://192.168.0.23:40786</span><br><span class="hljs-comment">// Upgrade - Insecure - Requests : 1</span><br><span class="hljs-comment">// User - Agent : Mozilla / 5.0 (Windows NT 6.1; WOW64) AppleWebKit / 537.36 (KHTML, like Gecko) Chrome / 55.0.2883.87 Safari / 537.36</span><br><span class="hljs-comment">// Content - Type : application / x - www - form - urlencoded</span><br><span class="hljs-comment">// Accept : text / html, application / xhtml + xml, application / xml; q = 0.9, image / webp, */*;q=0.8</span><br><span class="hljs-comment">// Referer: http://192.168.0.23:47310/</span><br><span class="hljs-comment">// Accept-Encoding: gzip, deflate</span><br><span class="hljs-comment">// Accept-Language: zh-CN,zh;q=0.8</span><br><span class="hljs-comment">// Cookie: __guid=179317988.1576506943281708800.1510107225903.8862; monitor_count=281</span><br><span class="hljs-comment">// Form Data</span><br><span class="hljs-comment">// color=gray</span><br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* A request has caused a call to accept() on the server port to</span><br><span class="hljs-comment"> * return.  Process the request appropriately.</span><br><span class="hljs-comment"> * Parameters: the socket connected to the client */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">accept_request</span><span class="hljs-params">(<span class="hljs-type">void</span> *arg)</span> &#123;<br>    <span class="hljs-comment">// socket</span><br>    <span class="hljs-type">int</span> client = (<span class="hljs-type">intptr_t</span>) arg;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br>    <span class="hljs-type">int</span> numchars;<br>    <span class="hljs-type">char</span> method[<span class="hljs-number">255</span>];<br>    <span class="hljs-type">char</span> url[<span class="hljs-number">255</span>];<br>    <span class="hljs-type">char</span> path[<span class="hljs-number">512</span>];<br>    <span class="hljs-type">size_t</span> i, j;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">stat</span> <span class="hljs-title">st</span>;</span><br>    <span class="hljs-type">int</span> cgi = <span class="hljs-number">0</span>;    <span class="hljs-comment">/* becomes true if server decides this is a CGI</span><br><span class="hljs-comment">                     * program */</span><br>    <span class="hljs-type">char</span> *query_string = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-comment">// 根据上面的Get请求，可以看到这边就是取第一行</span><br>    <span class="hljs-comment">// 这边都是在处理第一条http信息</span><br>    <span class="hljs-comment">// &quot;GET / HTTP/1.1\n&quot;</span><br>    numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>    i = <span class="hljs-number">0</span>; j = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-comment">// 第一行字符串提取Get</span><br>    <span class="hljs-keyword">while</span> (!ISspace(buf[j]) &amp;&amp; (i &lt; <span class="hljs-keyword">sizeof</span>(method) - <span class="hljs-number">1</span>)) &#123;<br>        method[i] = buf[j];<br>        i++; j++;<br>    &#125;<br><br>    <span class="hljs-comment">// 结束</span><br>    method[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-comment">// 判断是Get还是Post</span><br>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) &amp;&amp; strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>)) &#123;<br>        unimplemented(client);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">// 如果是POST，cgi置为1</span><br>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>        cgi = <span class="hljs-number">1</span>;<br>    &#125;<br><br>    i = <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">// 跳过空格</span><br>    <span class="hljs-keyword">while</span> (ISspace(buf[j]) &amp;&amp; (j &lt; <span class="hljs-keyword">sizeof</span>(buf))) &#123;<br>        j++;<br>    &#125;<br><br>     <span class="hljs-comment">//得到 &quot;/&quot;   注意：如果你的http的网址为http://192.168.0.23:47310/index.html</span><br>     <span class="hljs-comment">//               那么你得到的第一条http信息为GET /index.html HTTP/1.1，那么</span><br>     <span class="hljs-comment">//               解析得到的就是/index.html</span><br>    <span class="hljs-keyword">while</span> (!ISspace(buf[j]) &amp;&amp; (i &lt; <span class="hljs-keyword">sizeof</span>(url) - <span class="hljs-number">1</span>) &amp;&amp; (j &lt; <span class="hljs-keyword">sizeof</span>(buf))) &#123;<br>        url[i] = buf[j];<br>        i++; j++;<br>    &#125;<br>    url[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-comment">// 判断Get请求</span><br>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>        query_string = url;<br>        <span class="hljs-keyword">while</span> ((*query_string != <span class="hljs-string">&#x27;?&#x27;</span>) &amp;&amp; (*query_string != <span class="hljs-string">&#x27;\0&#x27;</span>)) &#123;<br>            query_string++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (*query_string == <span class="hljs-string">&#x27;?&#x27;</span>) &#123;<br>            cgi = <span class="hljs-number">1</span>;<br>            *query_string = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            query_string++;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 路径</span><br>    <span class="hljs-built_in">sprintf</span>(path, <span class="hljs-string">&quot;htdocs%s&quot;</span>, url);<br><br>    <span class="hljs-comment">// 默认地址，解析道的路径如果是/，则自动加上index.html</span><br>    <span class="hljs-keyword">if</span> (path[<span class="hljs-built_in">strlen</span>(path) - <span class="hljs-number">1</span>] == <span class="hljs-string">&#x27;/&#x27;</span>) &#123;<br>        <span class="hljs-built_in">strcat</span>(path, <span class="hljs-string">&quot;index.html&quot;</span>);<br>    &#125;<br><br>    <span class="hljs-comment">// 获得文件信息</span><br>    <span class="hljs-keyword">if</span> (stat(path, &amp;st) == <span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-comment">// 把所有http信息读出然后丢弃</span><br>        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf)) &#123; <span class="hljs-comment">/* read &amp; discard headers */</span><br>            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>        &#125;<br>        <span class="hljs-comment">// 没有找到</span><br>        not_found(client);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">if</span> ((st.st_mode &amp; S_IFMT) == S_IFDIR) &#123;<br>            <span class="hljs-built_in">strcat</span>(path, <span class="hljs-string">&quot;/index.html&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">// 如果你的文件默认是有执行全县的，自动解析成cgi程序，如果有执行权限但是不能执行，会接受到报错信号</span><br>        <span class="hljs-keyword">if</span> ((st.st_mode &amp; S_IXUSR) ||<br>            (st.st_mode &amp; S_IXGRP) ||<br>            (st.st_mode &amp; S_IXOTH)  ) &#123;<br>            cgi = <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!cgi) &#123;<br>            <span class="hljs-comment">// 接读取文件返回给请求的http客户端</span><br>            server_file(client, path);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 执行cgi文件</span><br>            execute_cgi(client, path, method, query_string);<br>        &#125;<br>        <span class="hljs-comment">// 执行完毕关闭socket</span><br>    &#125;<br>    close(client);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Inform the client that a request it has made has a problem.</span><br><span class="hljs-comment"> * Parameters: client socket */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">bad_request</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span> &#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 500 BAD REQUEST\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-type: test/html\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;P&gt;Your browser sent a bad request, &quot;</span>);<br>    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;such as a POST without a Content-Length.\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-keyword">sizeof</span>(buf), <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Put the entire contents of a file out on a socket.  This function</span><br><span class="hljs-comment"> * is named after the UNIX &quot;cat&quot; command, because it might have been</span><br><span class="hljs-comment"> * easier just to do something like pipe, fork, and exec(&quot;cat&quot;).</span><br><span class="hljs-comment"> * Parameters: the client socket descriptor</span><br><span class="hljs-comment"> *             FILE pointer for the file to cat */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-comment">// 得到文件内容，发送</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">cat</span><span class="hljs-params">(<span class="hljs-type">int</span> client, FILE *resource)</span> &#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><br>    fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), resource);<br>    <span class="hljs-comment">// 循环读</span><br>    <span class="hljs-keyword">while</span> (!feof(resource)) &#123;<br>        send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>        fgets(buf, <span class="hljs-keyword">sizeof</span>(buf), resource);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Inform the client that a CGI script could not be executed.</span><br><span class="hljs-comment"> * Parameter: the client socket descriptor. */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">cannot_execute</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span> &#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 500 Internal Server Error\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-type: text/html\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;P&gt;Error prohibited CGI execution.\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Print out an error message with perror() (for system errors; based</span><br><span class="hljs-comment"> * on value of errno, which indicates system call errors) and exit the</span><br><span class="hljs-comment"> * program indicating an error. */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">error_die</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *sc)</span> &#123;<br>    perror(sc);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Execute a CGI script.  Will need to set environment variables as</span><br><span class="hljs-comment"> * appropriate.</span><br><span class="hljs-comment"> * Parameters: client socket descriptor</span><br><span class="hljs-comment"> *             path to the CGI script */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">execute_cgi</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path,</span><br><span class="hljs-params">                        <span class="hljs-type">const</span> <span class="hljs-type">char</span> *method, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *query_string)</span> &#123;<br>    <span class="hljs-comment">// 缓冲区</span><br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-comment">// 2根管道</span><br>    <span class="hljs-type">int</span> cgi_output[<span class="hljs-number">2</span>];<br>    <span class="hljs-type">int</span> cgi_input[<span class="hljs-number">2</span>];<br><br>    <span class="hljs-comment">// 进程pid和状态</span><br>    <span class="hljs-type">pid_t</span> pid;<br>    <span class="hljs-type">int</span> status;<br><br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-type">char</span> c;<br><br>    <span class="hljs-comment">// 读取的字符数</span><br>    <span class="hljs-type">int</span> numchars = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-comment">// http的content_length</span><br>    <span class="hljs-type">int</span> content_length = <span class="hljs-number">-1</span>;<br><br>    <span class="hljs-comment">// 默认字符</span><br>    buf[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>; buf[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-comment">// 忽略大小写比较字符串</span><br>    <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// 读取数据，把整个header都读掉，以为Get写死了直接读取index.html，没有必要分析余下的http信息了</span><br>        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf)) &#123; <span class="hljs-comment">/* read &amp; discard headers */</span><br>            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>        &#125;<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">/* POST */</span><br>        numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>        <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf)) &#123;<br>            <span class="hljs-comment">// 如果是POST请求，就需要得到Content-Length，Content-Length：这个字符串一共长15位，所以</span><br>            <span class="hljs-comment">// 取出头部一句后，将第16位设置结束符，进行比较</span><br>            <span class="hljs-comment">// 第16位置为结束</span><br>            buf[<span class="hljs-number">15</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>            <span class="hljs-keyword">if</span> (strcasecmp(buf, <span class="hljs-string">&quot;Content-Length:&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-comment">// 内存从第17位开始就是长度，将17位开始的所有字符串转成整数就是content-length</span><br>                content_length = atoi(&amp;buf[<span class="hljs-number">16</span>]);<br>            &#125;<br>            numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>        &#125;<br>        <span class="hljs-keyword">if</span> (content_length == <span class="hljs-number">-1</span>) &#123;<br>            bad_request(client);<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br><br>    <span class="hljs-comment">// 建立output管道</span><br>    <span class="hljs-keyword">if</span> (pipe(cgi_output) &lt; <span class="hljs-number">0</span>) &#123;<br>        cannot_execute(client);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">// 建立input管道</span><br>    <span class="hljs-keyword">if</span> (pipe(cgi_input) &lt; <span class="hljs-number">0</span>) &#123;<br>        cannot_execute(client);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">//       fork后管道都复制了一份，都是一样的</span><br>    <span class="hljs-comment">//       子进程关闭2个无用的端口，避免浪费             </span><br>    <span class="hljs-comment">//       ×&lt;-------------------------&gt;1    output</span><br>    <span class="hljs-comment">//       0&lt;--------------------------&gt;×   input</span><br><br>    <span class="hljs-comment">//       父进程关闭2个无用的端口，避免浪费             </span><br>    <span class="hljs-comment">//       0&lt;--------------------------&gt;×   output</span><br>    <span class="hljs-comment">//       ×&lt;-------------------------&gt;1    input</span><br>    <span class="hljs-comment">//       此时父子进程已经可以通信</span><br><br>    <span class="hljs-comment">// fork进程，子进程用于执行CGI</span><br>    <span class="hljs-comment">// 父进程用于收数据以及发送子进程处理的回复数据</span><br>    <span class="hljs-keyword">if</span> ( (pid = fork()) &lt; <span class="hljs-number">0</span> ) &#123;<br>        cannot_execute(client);<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">/*child: CGI script */</span><br>        <span class="hljs-type">char</span> meth_env[<span class="hljs-number">255</span>];<br>        <span class="hljs-type">char</span> query_env[<span class="hljs-number">255</span>];<br>        <span class="hljs-type">char</span> length_env[<span class="hljs-number">255</span>];<br><br>        <span class="hljs-comment">// 子进程输出重定向到output管道的1端</span><br>        dup2(cgi_output[<span class="hljs-number">1</span>], <span class="hljs-number">1</span>);<br>        <span class="hljs-comment">// 子进程输入重定向到input管道的0端</span><br>        dup2(cgi_input[<span class="hljs-number">0</span>], <span class="hljs-number">0</span>);<br><br>        <span class="hljs-comment">// 关闭无用管道</span><br>        close(cgi_output[<span class="hljs-number">0</span>]);<br>        close(cgi_input[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-comment">// CGI环境变量</span><br>        <span class="hljs-built_in">sprintf</span>(meth_env, <span class="hljs-string">&quot;REQUEST_METHOD=%s&quot;</span>, method);<br>        putenv(meth_env);<br>        <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;GET&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-built_in">sprintf</span>(query_env, <span class="hljs-string">&quot;REQUEST_STRING=%s&quot;</span>, query_string);<br>            putenv(query_env);<br>        &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">/* POST */</span><br>            <span class="hljs-built_in">sprintf</span>(length_env, <span class="hljs-string">&quot;CONTENT_LENGTH=%d&quot;</span>, content_length);<br>            putenv(length_env);<br>        &#125;<br>        <span class="hljs-comment">// 替换执行path</span><br>        execl(path, path, <span class="hljs-literal">NULL</span>);<br>        <span class="hljs-comment">// int m = execl(path, path, NULL);</span><br>        <span class="hljs-comment">// 如果path有问题，例如将html网页改成可执行的，但是执行后m为-1</span><br>        <span class="hljs-comment">// 退出子进程，管道被破坏，但是父进程还在往里面写东西，触发Program received signal SIGPIPE, Broken pipe.</span><br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>    &#125; <span class="hljs-keyword">else</span> &#123; <span class="hljs-comment">/* parent */</span><br>        <span class="hljs-comment">// 关闭无用管道</span><br>        close(cgi_output[<span class="hljs-number">1</span>]);<br>        close(cgi_input[<span class="hljs-number">0</span>]);<br><br>        <span class="hljs-keyword">if</span> (strcasecmp(method, <span class="hljs-string">&quot;POST&quot;</span>) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; content_length; i++) &#123;<br>                <span class="hljs-comment">// 得到post请求数据，写到input管道中，供子进程使用</span><br>                recv(client, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>                write(cgi_input[<span class="hljs-number">1</span>], &amp;c, <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-comment">// 从output管道读到子进程处理后的信息，然后send出去</span><br>        <span class="hljs-keyword">while</span> (read(cgi_output[<span class="hljs-number">0</span>], &amp;c, <span class="hljs-number">1</span>) &gt; <span class="hljs-number">0</span>) &#123;<br>            send(client, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        &#125;<br><br>        <span class="hljs-comment">// 完成操作后关闭管道</span><br>        close(cgi_output[<span class="hljs-number">0</span>]);<br>        close(cgi_input[<span class="hljs-number">1</span>]);<br><br>        <span class="hljs-comment">// 等待子进程返回</span><br>        waitpid(pid, &amp;status, <span class="hljs-number">0</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Get a line from a socket, whether the line ends in a newline,</span><br><span class="hljs-comment"> * carriage return, or a CRLF combination.  Terminates the string read</span><br><span class="hljs-comment"> * with a null character.  If no newline indicator is found before the</span><br><span class="hljs-comment"> * end of the buffer, the string is terminated with a null.  If any of</span><br><span class="hljs-comment"> * the above three line terminators is read, the last character of the</span><br><span class="hljs-comment"> * string will be a linefeed and the string will be terminated with a</span><br><span class="hljs-comment"> * null character.</span><br><span class="hljs-comment"> * Parameters: the socket descriptor</span><br><span class="hljs-comment"> *             the buffer to save the data in</span><br><span class="hljs-comment"> *             the size of the buffer</span><br><span class="hljs-comment"> * Returns: the number of bytes stored (excluding null) */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-comment">//得到一行数据,只要发现c为\n,就认为是一行结束，如果读到\r,再用MSG_PEEK的方式读入一个字符，如果是\n，从socket用读出</span><br><span class="hljs-comment">//如果是下个字符则不处理，将c置为\n，结束。如果读到的数据为0中断，或者小于0，也视为结束，c置为\n</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">get_line</span><span class="hljs-params">(<span class="hljs-type">int</span> sock, <span class="hljs-type">char</span> *buf, <span class="hljs-type">int</span> size)</span> &#123;<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-type">int</span> n;<br><br>    <span class="hljs-keyword">while</span> ((i &lt; size - <span class="hljs-number">1</span>) &amp;&amp; (c != <span class="hljs-string">&#x27;\n&#x27;</span>)) &#123;<br>        n = recv(sock, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>        <span class="hljs-comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span><br>        <span class="hljs-keyword">if</span> (n &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> (c == <span class="hljs-string">&#x27;\r&#x27;</span>) &#123;<br>                <span class="hljs-comment">// 偷窥一个字节，如果是\n就读走</span><br>                n = recv(sock, &amp;c, <span class="hljs-number">1</span>, MSG_PEEK);<br>                <span class="hljs-comment">/* DEBUG printf(&quot;%02X\n&quot;, c); */</span><br>                <span class="hljs-keyword">if</span> ((n &gt; <span class="hljs-number">0</span>) &amp;&amp; (c == <span class="hljs-string">&#x27;\n&#x27;</span>)) &#123;<br>                    recv(sock, &amp;c, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-comment">//不是\n（读到下一行的字符）或者没读到，置c为\n 跳出循环,完成一行读取</span><br>                    c = <span class="hljs-string">&#x27;\n&#x27;</span>;<br>                &#125;<br>            &#125;<br>            buf[i] = c;<br>            i++;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            c = <span class="hljs-string">&#x27;\n&#x27;</span>;<br>        &#125;<br>    &#125;<br>    buf[i] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br><br>    <span class="hljs-keyword">return</span> (i);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Return the informational HTTP headers about a file. */</span><br><span class="hljs-comment">/* Parameters: the socket to print the headers on</span><br><span class="hljs-comment"> *             the name of the file */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-comment">// 加入http的headers</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">headers</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span> &#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br>    (<span class="hljs-type">void</span>) filename; <span class="hljs-comment">/* could use filename to determine file type */</span><br><br>    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 200 OK\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">strcpy</span>(buf, SERVER_STRING);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-type: text/html\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">strcpy</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Give a client a 404 not found status message. */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-comment">//如果资源没有找到得返回给客户端下面的信息</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">not_found</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span> &#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 404 NOT FOUND\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, SERVER_STRING);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;HTML&gt;&lt;TITLE&gt;Not Found&lt;/TITLE&gt;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;BODY&gt;&lt;P&gt;The server could not fulfill\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;your request because the resource specified\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;is unavailable or nonexistent.\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Send a regular file to the client.  Use headers, and report</span><br><span class="hljs-comment"> * errors to client if they occur.</span><br><span class="hljs-comment"> * Parameters: a pointer to a file structure produced from the socket</span><br><span class="hljs-comment"> *              file descriptor</span><br><span class="hljs-comment"> *             the name of the file to serve */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-comment">//如果不是CGI文件，直接读取文件返回给请求的http客户端</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">server_file</span><span class="hljs-params">(<span class="hljs-type">int</span> client, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *filename)</span> &#123;<br>    FILE *resource = <span class="hljs-literal">NULL</span>;<br>    <span class="hljs-type">int</span> numchars = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-comment">// 默认字符</span><br>    buf[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;A&#x27;</span>; buf[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">while</span> ((numchars &gt; <span class="hljs-number">0</span>) &amp;&amp; <span class="hljs-built_in">strcmp</span>(<span class="hljs-string">&quot;\n&quot;</span>, buf)) &#123; <span class="hljs-comment">/* read &amp; discard headers */</span><br>        numchars = get_line(client, buf, <span class="hljs-keyword">sizeof</span>(buf));<br>    &#125;<br>    resource = fopen(filename, <span class="hljs-string">&quot;r&quot;</span>);<br>    <span class="hljs-keyword">if</span> (resource == <span class="hljs-literal">NULL</span>) &#123;<br>        not_found(client);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        headers(client, filename);<br>        cat(client, resource);<br>    &#125;<br>    fclose(resource);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* This function starts the process of listening for web connections</span><br><span class="hljs-comment"> * on a specified port.  If the port is 0, then dynamically allocate a</span><br><span class="hljs-comment"> * port and modify the original port variable to reflect the actual</span><br><span class="hljs-comment"> * port.</span><br><span class="hljs-comment"> * Parameters: pointer to variable containing the port to connect on</span><br><span class="hljs-comment"> * Returns: the socket */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-type">int</span> <span class="hljs-title function_">startup</span><span class="hljs-params">(u_short *port)</span> &#123;<br>    <span class="hljs-type">int</span> httpd = <span class="hljs-number">0</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">name</span>;</span><br><br>    httpd = socket(PF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    <span class="hljs-keyword">if</span> (httpd == <span class="hljs-number">-1</span>) &#123;<br>        error_die(<span class="hljs-string">&quot;socket&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">memset</span>(&amp;name, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(name));<br>    name.sin_family = AF_INET;<br>    name.sin_port = htons(*port);<br>    name.sin_addr.s_addr = htonl(INADDR_ANY);<br>    <span class="hljs-comment">// 绑定socket</span><br>    <span class="hljs-keyword">if</span> (bind(httpd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;name, <span class="hljs-keyword">sizeof</span>(name)) &lt; <span class="hljs-number">0</span>) &#123;<br>        error_die(<span class="hljs-string">&quot;bind&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">// 如果端口没有设置，提供个随机端口</span><br>    <span class="hljs-keyword">if</span> (*port == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">/* if dynamically allocating a port */</span><br>        <span class="hljs-type">socklen_t</span> namelen = <span class="hljs-keyword">sizeof</span>(name);<br>        <span class="hljs-keyword">if</span> (getsockname(httpd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;name, &amp;namelen) == <span class="hljs-number">-1</span>) &#123;<br>            error_die(<span class="hljs-string">&quot;getsockname&quot;</span>);<br>        &#125;<br>        *port = ntohs(name.sin_port);<br>    &#125;<br>    <span class="hljs-comment">// 监听</span><br>    <span class="hljs-keyword">if</span> (listen(httpd, <span class="hljs-number">5</span>) &lt; <span class="hljs-number">0</span>) &#123;<br>        error_die(<span class="hljs-string">&quot;listen&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">return</span> (httpd);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><span class="hljs-comment">/* Inform the client that the requested web method has not been</span><br><span class="hljs-comment"> * implemented.</span><br><span class="hljs-comment"> * Parameter: the client socket */</span><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-comment">//如果方法没有实现，就返回此信息</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">unimplemented</span><span class="hljs-params">(<span class="hljs-type">int</span> client)</span> &#123;<br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>];<br><br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;HTTP/1.0 501 Method Not Implemented\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, SERVER_STRING);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;Content-Type: text/html\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;HTML&gt;&lt;HEAD&gt;&lt;TITLE&gt;Method Not Implemented\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/TITLE&gt;&lt;/HEAD&gt;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;BODY&gt;&lt;P&gt;HTTP request method not supported.\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">sprintf</span>(buf, <span class="hljs-string">&quot;&lt;/BODY&gt;&lt;/HTML&gt;\r\n&quot;</span>);<br>    send(client, buf, <span class="hljs-built_in">strlen</span>(buf), <span class="hljs-number">0</span>);<br>&#125;<br><br><span class="hljs-comment">/**********************************************************************/</span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span> &#123;<br>    <span class="hljs-type">int</span> server_sock = <span class="hljs-number">-1</span>;<br>    u_short port = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> client_sock = <span class="hljs-number">-1</span>;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">client_name</span>;</span><br><br>    <span class="hljs-comment">// 这边要为socklen_t类型</span><br>    <span class="hljs-type">socklen_t</span> client_name_len = <span class="hljs-keyword">sizeof</span>(client_name);<br>    <span class="hljs-type">pthread_t</span> newthread;<br><br>    server_sock = startup(&amp;port);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;httpd running on port %d\n&quot;</span>, port);<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-comment">// 接受请求，函数原型</span><br>        <span class="hljs-comment">// #include &lt;sys/types.h&gt;</span><br>        <span class="hljs-comment">// #include &lt;sys/socket.h&gt;</span><br>        <span class="hljs-comment">// int accept(int sockfd, struct sockaddr *addr, socklen_t *addrlen);</span><br>        client_sock = accept(server_sock, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;client_name, &amp;client_name_len);<br>        <span class="hljs-keyword">if</span> (client_sock == <span class="hljs-number">-1</span>) &#123;<br>            error_die(<span class="hljs-string">&quot;accept&quot;</span>);<br>        &#125;<br>        <span class="hljs-comment">/* accept_request(client_sock) */</span><br><br>        <span class="hljs-comment">// 每次收到请求，创建一个线程来处理接收到的请求</span><br>        <span class="hljs-comment">// 把client_sock转成地址作为参数传入pthread_create</span><br>        <span class="hljs-keyword">if</span> (pthread_create(&amp;newthread, <span class="hljs-literal">NULL</span>, (<span class="hljs-type">void</span> *)accept_request, (<span class="hljs-type">void</span> *)(<span class="hljs-type">intptr_t</span>)client_sock) != <span class="hljs-number">0</span>) &#123;<br>            perror(<span class="hljs-string">&quot;pthread_create&quot;</span>);<br>        &#125;<br>    &#125;<br>    close(server_sock);<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="simpleclient-c"><a href="#simpleclient-c" class="headerlink" title="simpleclient.c"></a>simpleclient.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/types.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/socket.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;netinet/in.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;arpa/inet.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc, <span class="hljs-type">char</span> *argv[])</span> &#123;<br>    <span class="hljs-type">int</span> sockfd;<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sockaddr_in</span> <span class="hljs-title">address</span>;</span><br>    <span class="hljs-type">int</span> result;<br>    <span class="hljs-type">char</span> ch = <span class="hljs-string">&#x27;A&#x27;</span>;<br><br>    sockfd = socket(AF_INET, SOCK_STREAM, <span class="hljs-number">0</span>);<br>    address.sin_family = AF_INET;<br>    address.sin_addr.s_addr = inet_addr(<span class="hljs-string">&quot;127.0.0.1&quot;</span>);<br>    address.sin_port = htons(<span class="hljs-number">9734</span>);<br>    len = <span class="hljs-keyword">sizeof</span>(address);<br>    result = connect(sockfd, (<span class="hljs-keyword">struct</span> sockaddr *)&amp;address, len);<br><br>    <span class="hljs-keyword">if</span> (result == <span class="hljs-number">-1</span>) &#123;<br>        perror(<span class="hljs-string">&quot;oops: client1&quot;</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br>    write(sockfd, &amp;ch, <span class="hljs-number">1</span>);<br>    read(sockfd, &amp;ch, <span class="hljs-number">1</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;char from server = %c\n&quot;</span>, ch);<br>    close(sockfd);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">0</span>);<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>C++实现TinyThreadPool</title>
    <link href="/2022/11/02/output/tinythreadpool/index/"/>
    <url>/2022/11/02/output/tinythreadpool/index/</url>
    
    <content type="html"><![CDATA[<h2 id="ThreadPool-h"><a href="#ThreadPool-h" class="headerlink" title="ThreadPool.h"></a>ThreadPool.h</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">ifndef</span> __THREAD_POOL_H_</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> __THREAD_POOL_H_</span><br><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;vector&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;queue&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;memory&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;thread&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;mutex&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;condition_variable&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;future&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;functional&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdexcept&gt;</span></span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadPool</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">ThreadPool</span>(<span class="hljs-type">size_t</span>);<br>    <span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>, <span class="hljs-keyword">class</span>... Args&gt;<br>    <span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">enqueue</span><span class="hljs-params">(F&amp;&amp; f, Args&amp;&amp;... args)</span></span><br><span class="hljs-function">            -&gt; std::future&lt;<span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-title">F</span><span class="hljs-params">(Args...)</span>&gt;::type&gt;</span>;<br>    ~<span class="hljs-built_in">ThreadPool</span>();<br><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-comment">// need to keep track of threads so we can join them</span><br>    std::vector&lt;std::thread&gt; workers;<br>    <span class="hljs-comment">// the task queue</span><br>    std::queue&lt;std::function&lt;<span class="hljs-type">void</span>()&gt; &gt; tasks;<br><br>    <span class="hljs-comment">// synchronization</span><br>    std::mutex queue_mutex;<br>    std::condition_variable condition;<br>    <span class="hljs-type">bool</span> stop;<br>&#125;;<br><br><span class="hljs-comment">// the constructer just launches some amount of workers</span><br><span class="hljs-function"><span class="hljs-keyword">inline</span> <span class="hljs-title">ThreadPool::ThreadPool</span><span class="hljs-params">(<span class="hljs-type">size_t</span> threads)</span></span><br><span class="hljs-function">        : stop(false) &#123;</span><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">size_t</span> i = <span class="hljs-number">0</span>; i &lt; threads; i++) &#123;<br>        workers.<span class="hljs-built_in">emplace_back</span>([<span class="hljs-keyword">this</span>] &#123;<br>            <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>                std::function&lt;<span class="hljs-built_in">void</span>()&gt; task;<br>                &#123;<br>                    std::unique_lock&lt;std::mutex&gt; <span class="hljs-built_in">lock</span>(<span class="hljs-keyword">this</span> -&gt; queue_mutex);<br>                    <span class="hljs-keyword">this</span> -&gt; condition.<span class="hljs-built_in">wait</span>(lock,<br>                        [<span class="hljs-keyword">this</span>]&#123; <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span> -&gt; stop || !<span class="hljs-keyword">this</span> -&gt; tasks.<span class="hljs-built_in">empty</span>(); &#125;);<br>                    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> -&gt; stop &amp;&amp; <span class="hljs-keyword">this</span> -&gt; tasks.<span class="hljs-built_in">empty</span>()) &#123;<br>                        <span class="hljs-keyword">return</span> ;<br>                    &#125;<br>                    task = std::<span class="hljs-built_in">move</span>(<span class="hljs-keyword">this</span> -&gt; tasks.<span class="hljs-built_in">front</span>());<br>                    <span class="hljs-keyword">this</span> -&gt; tasks.<span class="hljs-built_in">pop</span>();<br>                &#125;<br>                <span class="hljs-built_in">task</span>();<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// add new work item to the pool</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span>, <span class="hljs-keyword">class</span>... Args&gt;<br><span class="hljs-function"><span class="hljs-keyword">auto</span> <span class="hljs-title">ThreadPool::enqueue</span><span class="hljs-params">(F&amp;&amp; f, Args&amp;&amp;... args)</span></span><br><span class="hljs-function">        -&gt; std::future&lt;<span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-title">F</span><span class="hljs-params">(Args...)</span>&gt;::type&gt; </span>&#123;<br>    <span class="hljs-keyword">using</span> return_type = <span class="hljs-keyword">typename</span> std::result_of&lt;<span class="hljs-built_in">F</span>(Args...)&gt;::type;<br>    <span class="hljs-keyword">auto</span> task = std::make_shared&lt;std::packaged_task&lt;<span class="hljs-built_in">return_type</span>()&gt; &gt; (<br>        std::<span class="hljs-built_in">bind</span>(std::forward&lt;F&gt;(f), std::forward&lt;Args&gt;(args)...)<br>    );<br><br>    std::future&lt;return_type&gt; res = task -&gt; <span class="hljs-built_in">get_future</span>();<br>    &#123;<br>        <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(queue_mutex)</span></span>;<br><br>        <span class="hljs-comment">// don&#x27;t allow enqueueing after stopping the pool</span><br>        <span class="hljs-keyword">if</span> (stop) &#123;<br>            <span class="hljs-keyword">throw</span> std::<span class="hljs-built_in">runtime_error</span>(<span class="hljs-string">&quot;enqueue on stopped ThreadPool&quot;</span>);<br>        &#125;<br><br>        tasks.<span class="hljs-built_in">emplace</span>([ task ]() &#123; (*task)(); &#125;);<br>    &#125;<br>    condition.<span class="hljs-built_in">notify_one</span>();<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><br><span class="hljs-comment">// the destructor joins all threads</span><br><span class="hljs-keyword">inline</span> ThreadPool::~<span class="hljs-built_in">ThreadPool</span>() &#123;<br>    &#123;<br>        <span class="hljs-function">std::unique_lock&lt;std::mutex&gt; <span class="hljs-title">lock</span><span class="hljs-params">(queue_mutex)</span></span>;<br>        stop = <span class="hljs-literal">true</span>;<br>    &#125;<br>    condition.<span class="hljs-built_in">notify_all</span>();<br>    <span class="hljs-keyword">for</span> (std::thread &amp;worker : workers) &#123;<br>        worker.<span class="hljs-built_in">join</span>();<br>    &#125;<br>&#125;<br><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br></code></pre></td></tr></table></figure><h2 id="test-cc"><a href="#test-cc" class="headerlink" title="test.cc"></a>test.cc</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;ThreadPool.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br><br>    <span class="hljs-comment">// create thread pool with 4 worker threads</span><br>    <span class="hljs-function">ThreadPool <span class="hljs-title">pool</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;<br><br>    <span class="hljs-comment">// enqueue and store future</span><br>    <span class="hljs-keyword">auto</span> result = pool.<span class="hljs-built_in">enqueue</span>([](<span class="hljs-type">int</span> answer) &#123; <span class="hljs-keyword">return</span> answer; &#125;, <span class="hljs-number">42</span>);<br><br>    <span class="hljs-comment">// get result from future</span><br>    std::cout &lt;&lt; result.<span class="hljs-built_in">get</span>() &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="out"><a href="#out" class="headerlink" title="out"></a>out</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">42<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>字节跳动2023秋招研发第四场笔试【后端方向】</title>
    <link href="/2022/09/18/output/bytedance2023fourwrittenexan/index/"/>
    <url>/2022/09/18/output/bytedance2023fourwrittenexan/index/</url>
    
    <content type="html"><![CDATA[<h2 id="T1-金字塔"><a href="#T1-金字塔" class="headerlink" title="T1 金字塔"></a>T1 金字塔</h2><h3 id="模拟-O-mlogm"><a href="#模拟-O-mlogm" class="headerlink" title="模拟 O(mlogm)"></a>模拟 O(mlogm)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt; &gt; <span class="hljs-built_in">a</span>(n);<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">bool</span>&gt;&gt; <span class="hljs-built_in">flag</span>(n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> m;<br>        std::cin &gt;&gt; m;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; m; j++) &#123;<br>            <span class="hljs-type">int</span> x;<br>            std::cin &gt;&gt; x;<br>            a[i].<span class="hljs-built_in">push_back</span>(x);<br>            flag[i].<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">false</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; flag[<span class="hljs-number">0</span>].<span class="hljs-built_in">size</span>(); i++) flag[<span class="hljs-number">0</span>][i] = <span class="hljs-literal">true</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-comment">// a[i][j] + 50 in a[i - 1]</span><br>        <span class="hljs-comment">// a[i][j] + 1 in a[i - 1] a[i][j] + 99 in a[i - 1]</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; a[i].<span class="hljs-built_in">size</span>(); j++) &#123;<br>            <span class="hljs-type">int</span> p1 = std::<span class="hljs-built_in">lower_bound</span>(a[i - <span class="hljs-number">1</span>].<span class="hljs-built_in">begin</span>(), a[i - <span class="hljs-number">1</span>].<span class="hljs-built_in">end</span>(), a[i][j]) - a[i - <span class="hljs-number">1</span>].<span class="hljs-built_in">begin</span>();<br>            <span class="hljs-comment">// pre one</span><br>            <span class="hljs-keyword">if</span> (p1 &gt;= <span class="hljs-number">1</span> &amp;&amp; flag[i - <span class="hljs-number">1</span>][p1 - <span class="hljs-number">1</span>] &amp;&amp; a[i - <span class="hljs-number">1</span>][p1 - <span class="hljs-number">1</span>] + <span class="hljs-number">100</span> &gt; a[i][j] + <span class="hljs-number">50</span>) &#123;<br>                flag[i][j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-comment">// next one</span><br>            <span class="hljs-keyword">if</span> (p1 &lt; a[i - <span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>() &amp;&amp; flag[i - <span class="hljs-number">1</span>][p1] &amp;&amp; a[i - <span class="hljs-number">1</span>][p1] &lt; a[i][j] + <span class="hljs-number">50</span>) &#123;<br>                flag[i][j] = <span class="hljs-literal">true</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (p1 &gt;= <span class="hljs-number">1</span> &amp;&amp; p1 &lt; a[i - <span class="hljs-number">1</span>].<span class="hljs-built_in">size</span>() &amp;&amp; flag[i - <span class="hljs-number">1</span>][p1 - <span class="hljs-number">1</span>] &amp;&amp; flag[i - <span class="hljs-number">1</span>][p1] &amp;&amp; a[i - <span class="hljs-number">1</span>][p1 - <span class="hljs-number">1</span>] + <span class="hljs-number">100</span> &gt; a[i][j] &amp;&amp; a[i - <span class="hljs-number">1</span>][p1] &lt; a[i][j] + <span class="hljs-number">100</span>) &#123;<br>                flag[i][j] = <span class="hljs-literal">true</span>;<br>            &#125;<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; flag[i].<span class="hljs-built_in">size</span>(); j++) &#123;<br>            ans += flag[i][j];<br>        &#125;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T2-最长01序列"><a href="#T2-最长01序列" class="headerlink" title="T2 最长01序列"></a>T2 最长01序列</h2><h3 id="尺取-O-n"><a href="#尺取-O-n" class="headerlink" title="尺取 O(n)"></a>尺取 O(n)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    std::string s;<br>    std::cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>    <span class="hljs-type">int</span> ans = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> cnt = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> r = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">while</span> (r &lt; n) &#123;<br>        <span class="hljs-keyword">if</span> (s[r] != s[r - <span class="hljs-number">1</span>]) cnt++;<br>        <span class="hljs-keyword">else</span> &#123;<br>            ans = std::<span class="hljs-built_in">max</span>(ans, cnt);<br>            cnt = <span class="hljs-number">1</span>;<br>        &#125;<br>        r++;<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; std::endl;<br><br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T3-修改最短子串使得整串词频相同"><a href="#T3-修改最短子串使得整串词频相同" class="headerlink" title="T3 修改最短子串使得整串词频相同"></a>T3 修改最短子串使得整串词频相同</h2><h3 id="前缀和-二分-O-nlogn"><a href="#前缀和-二分-O-nlogn" class="headerlink" title="前缀和 + 二分 O(nlogn)"></a>前缀和 + 二分 O(nlogn)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    std::string s;<br>    std::cin &gt;&gt; s;<br>    <span class="hljs-type">int</span> n = s.<span class="hljs-built_in">size</span>();<br>    std::unordered_map&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; ch&#123;&#123;<span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-number">0</span>&#125;, &#123;<span class="hljs-string">&#x27;S&#x27;</span>, <span class="hljs-number">1</span>&#125;, &#123;<span class="hljs-string">&#x27;D&#x27;</span>, <span class="hljs-number">2</span>&#125;, &#123;<span class="hljs-string">&#x27;F&#x27;</span>, <span class="hljs-number">3</span>&#125;&#125;;<br>    std::vector&lt;std::vector&lt;<span class="hljs-type">int</span>&gt;&gt; <span class="hljs-built_in">sum</span>(<span class="hljs-number">4</span>, std::<span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(n + <span class="hljs-number">1</span>));<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>            sum[j][i] = sum[j][i - <span class="hljs-number">1</span>] + (j == ch[s[i - <span class="hljs-number">1</span>]]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> ans = n;<br>    <span class="hljs-type">int</span> avg = n / <span class="hljs-number">4</span>;<br>    <span class="hljs-keyword">if</span> (sum[<span class="hljs-number">0</span>][n] == avg &amp;&amp; sum[<span class="hljs-number">1</span>][n] == avg &amp;&amp; sum[<span class="hljs-number">2</span>][n] == avg &amp;&amp; sum[<span class="hljs-number">3</span>][n] == avg) &#123;<br>        std::cout &lt;&lt; <span class="hljs-number">0</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">1</span>; i &lt;= n; i++) &#123;<br>        <span class="hljs-type">int</span> l = i, r = n;<br>        <span class="hljs-type">int</span> res = n;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">pre</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span>, <span class="hljs-title">suffix</span><span class="hljs-params">(<span class="hljs-number">4</span>)</span></span>;<br>            <span class="hljs-type">bool</span> flag = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">4</span>; j++) &#123;<br>                pre[j] = sum[j][i - <span class="hljs-number">1</span>];<br>                suffix[j] = sum[j][n] - sum[j][mid];<br>                <span class="hljs-keyword">if</span> (pre[j] + suffix[j] &gt; avg) flag = <span class="hljs-literal">false</span>;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                res = mid - i + <span class="hljs-number">1</span>;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        ans = std::<span class="hljs-built_in">min</span>(ans, res);<br>    &#125;<br>    std::cout &lt;&lt; ans &lt;&lt; std::endl;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="T4-最长区间的最大值和最小值的绝对值差小于等于k，并求区间个数和起点和终点"><a href="#T4-最长区间的最大值和最小值的绝对值差小于等于k，并求区间个数和起点和终点" class="headerlink" title="T4 最长区间的最大值和最小值的绝对值差小于等于k，并求区间个数和起点和终点"></a>T4 最长区间的最大值和最小值的绝对值差小于等于k，并求区间个数和起点和终点</h2><h3 id="ST表维护区间最值，把i设为起始点并二分求出终点-O-nlognlogn"><a href="#ST表维护区间最值，把i设为起始点并二分求出终点-O-nlognlogn" class="headerlink" title="ST表维护区间最值，把i设为起始点并二分求出终点 O(nlognlogn)"></a>ST表维护区间最值，把i设为起始点并二分求出终点 O(nlognlogn)</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;bits/stdc++.h&quot;</span></span><br><br><span class="hljs-meta">#<span class="hljs-keyword">ifdef</span> LOCAL</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;algo/debug.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">else</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> debug(...) 42</span><br><span class="hljs-meta">#<span class="hljs-keyword">endif</span></span><br><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T, <span class="hljs-keyword">class</span> <span class="hljs-title class_">F</span> = std::function&lt;<span class="hljs-built_in">T</span>(<span class="hljs-type">const</span> T&amp;, <span class="hljs-type">const</span> T&amp;)&gt;&gt;<br><span class="hljs-keyword">class</span> SparseTable &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> n;<br>    std::vector&lt;std::vector&lt;T&gt;&gt; mat;<br>    F func;<br><br>    <span class="hljs-built_in">SparseTable</span>(<span class="hljs-type">const</span> std::vector&lt;T&gt;&amp; a, <span class="hljs-type">const</span> F&amp; f) : <span class="hljs-built_in">func</span>(f) &#123;<br>        n = <span class="hljs-built_in">static_cast</span>&lt;<span class="hljs-type">int</span>&gt;(a.<span class="hljs-built_in">size</span>());<br>        <span class="hljs-type">int</span> max_log = <span class="hljs-number">32</span> - __builtin_clz(n);<br>        mat.<span class="hljs-built_in">resize</span>(max_log);<br>        mat[<span class="hljs-number">0</span>] = a;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = <span class="hljs-number">1</span>; j &lt; max_log; j++) &#123;<br>            mat[j].<span class="hljs-built_in">resize</span>(n - (<span class="hljs-number">1</span> &lt;&lt; j) + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= n - (<span class="hljs-number">1</span> &lt;&lt; j); i++) &#123;<br>                mat[j][i] = <span class="hljs-built_in">func</span>(mat[j - <span class="hljs-number">1</span>][i], mat[j - <span class="hljs-number">1</span>][i + (<span class="hljs-number">1</span> &lt;&lt; (j - <span class="hljs-number">1</span>))]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function">T <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-type">int</span> from, <span class="hljs-type">int</span> to)</span> <span class="hljs-type">const</span> </span>&#123;<br>        <span class="hljs-built_in">assert</span>(<span class="hljs-number">0</span> &lt;= from &amp;&amp; from &lt;= to &amp;&amp; to &lt;= n - <span class="hljs-number">1</span>);<br>        <span class="hljs-type">int</span> lg = <span class="hljs-number">32</span> - __builtin_clz(to - from + <span class="hljs-number">1</span>) - <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">func</span>(mat[lg][from], mat[lg][to - (<span class="hljs-number">1</span> &lt;&lt; lg) + <span class="hljs-number">1</span>]);<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    std::ios::<span class="hljs-built_in">sync_with_stdio</span>(<span class="hljs-literal">false</span>);<br>    std::cin.<span class="hljs-built_in">tie</span>(<span class="hljs-literal">nullptr</span>);<br><br>    <span class="hljs-type">int</span> n;<br>    std::cin &gt;&gt; n;<br>    <span class="hljs-type">int</span> k;<br>    std::cin &gt;&gt; k;<br>    <span class="hljs-function">std::vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">h</span><span class="hljs-params">(n)</span></span>;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        std::cin &gt;&gt; h[i];<br>    &#125;<br>    <span class="hljs-function">SparseTable&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mx</span><span class="hljs-params">(h, [](<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; i, <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; j) &#123; <span class="hljs-keyword">return</span> std::max(i, j); &#125;)</span></span>;<br>    <span class="hljs-function">SparseTable&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">mn</span><span class="hljs-params">(h, [](<span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; i, <span class="hljs-type">const</span> <span class="hljs-type">int</span>&amp; j) &#123; <span class="hljs-keyword">return</span> std::min(i, j); &#125;)</span></span>;<br><br>    std::vector&lt;std::pair&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;&gt; ans;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-type">int</span> l = i, r = n - <span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span> j = r - l + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (l &lt;= r) &#123;<br>            <span class="hljs-type">int</span> mid = (l + r) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span> (mx.<span class="hljs-built_in">get</span>(i, mid) - mn.<span class="hljs-built_in">get</span>(i, mid) &lt;= k) &#123;<br>                j = mid;<br>                l = mid + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                r = mid - <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// i - j</span><br>        <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">empty</span>()) &#123;<br>            ans.<span class="hljs-built_in">push_back</span>(&#123;i, j&#125;);<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">front</span>().second - ans.<span class="hljs-built_in">front</span>().first + <span class="hljs-number">1</span> &lt; j - i + <span class="hljs-number">1</span>) &#123;<br>                ans.<span class="hljs-built_in">clear</span>();<br>                ans.<span class="hljs-built_in">push_back</span>(&#123;i, j&#125;);<br>            &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (ans.<span class="hljs-built_in">front</span>().second - ans.<span class="hljs-built_in">front</span>().first + <span class="hljs-number">1</span> == j - i + <span class="hljs-number">1</span>) &#123;<br>                ans.<span class="hljs-built_in">push_back</span>(&#123;i, j&#125;);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    std::cout &lt;&lt; ans.<span class="hljs-built_in">front</span>().second - ans.<span class="hljs-built_in">front</span>().first + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; ans.<span class="hljs-built_in">size</span>() &lt;&lt; std::endl;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">auto</span>&amp; [x, y] : ans) &#123;<br>        std::cout &lt;&lt; x + <span class="hljs-number">1</span> &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; y + <span class="hljs-number">1</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>笔试</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>shared_ptr自定义实现</title>
    <link href="/2022/07/30/output/shared_ptr/index/"/>
    <url>/2022/07/30/output/shared_ptr/index/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 智能指针中的引用计数类</span><br><span class="hljs-comment"> */</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RefCount</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">RefCount</span>() : <span class="hljs-built_in">count_</span>(<span class="hljs-keyword">new</span> <span class="hljs-built_in">size_t</span>(<span class="hljs-number">1</span>)) &#123;&#125;<br><br>    <span class="hljs-comment">// 拷贝构造</span><br>    <span class="hljs-built_in">RefCount</span>(<span class="hljs-type">const</span> RefCount &amp;rhs) : <span class="hljs-built_in">count_</span>(rhs.count_) &#123;<br>        (*count_)++;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动构造</span><br>    <span class="hljs-built_in">RefCount</span>(RefCount &amp;&amp;rhs) : <span class="hljs-built_in">count_</span>(rhs.count_) &#123;<br>        rhs.count_ = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 拷贝赋值</span><br>    RefCount &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> RefCount &amp;rhs) &#123;<br>        <span class="hljs-built_in">tryRelease</span>();<br>        count_ = rhs.count_;<br>        (*count_)++;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动赋值</span><br>    RefCount &amp;<span class="hljs-keyword">operator</span>=(RefCount &amp;&amp;rhs) &#123;<br>        <span class="hljs-built_in">tryRelease</span>();<br>        count_ = rhs.count_;<br>        rhs.count_ = <span class="hljs-literal">nullptr</span>;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">RefCount</span>() &#123;<br>        <span class="hljs-keyword">if</span> (*count_ == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">delete</span> count_;<br>            count_ = <span class="hljs-literal">nullptr</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            (*count_)--;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">size_t</span> <span class="hljs-title">IsOnly</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> *count_ == <span class="hljs-number">1</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 尝试减少引用计数并释放内存</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">tryRelease</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (count_ == <span class="hljs-literal">nullptr</span>) &#123;<br>            <span class="hljs-keyword">return</span> ;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (*count_ == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">delete</span> count_;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            (*count_)--;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span> :<br>    <span class="hljs-type">size_t</span>* count_;<br>&#125;;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * 智能指针封装类</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">typename</span> T&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SmartPtr</span> &#123;<br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-comment">// 默认构造函数</span><br>    <span class="hljs-built_in">SmartPtr</span>() : <span class="hljs-built_in">SmartPtr</span>(<span class="hljs-literal">nullptr</span>) &#123;&#125;<br><br>    <span class="hljs-comment">// 原始构造函数</span><br>    <span class="hljs-function"><span class="hljs-keyword">explicit</span> <span class="hljs-title">SmartPtr</span><span class="hljs-params">(T* ptr = <span class="hljs-literal">nullptr</span>)</span> : ptr_(ptr) &#123;</span>&#125;<br><br>    <span class="hljs-comment">// 拷贝构造函数</span><br>    <span class="hljs-built_in">SmartPtr</span>(<span class="hljs-type">const</span> SmartPtr&amp; rhs) &#123;<br>        ptr_ = rhs.ptr_;<br>        count_ = rhs.count_;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动构造函数</span><br>    <span class="hljs-built_in">SmartPtr</span>(SmartPtr&amp;&amp; rhs) <span class="hljs-keyword">noexcept</span> : <span class="hljs-built_in">ptr_</span>(rhs.ptr_), <span class="hljs-built_in">count_</span>(rhs.count_) &#123;<br>        rhs.count_ = rhs.ptr_ = <span class="hljs-literal">nullptr</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 拷贝赋值</span><br>    SmartPtr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> SmartPtr&amp; rhs) &#123;<br>        <span class="hljs-keyword">if</span> (count_.<span class="hljs-built_in">IsOnly</span>()) &#123;<br>            <span class="hljs-keyword">delete</span> ptr_;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            count_.<span class="hljs-built_in">tryRelease</span>();<br>        &#125;<br>        ptr_ = rhs.ptr_;<br>        count_ = rhs.count_;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-comment">// 移动赋值</span><br>    SmartPtr&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> SmartPtr&amp;&amp; rhs) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> == &amp;rhs) &#123;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br>        count_ = std::<span class="hljs-built_in">move</span>(rhs.count_);<br>        ptr_ = rhs.ptr_;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    ~<span class="hljs-built_in">SmartPtr</span>() &#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;SmartPtr deconstructor&quot;</span> &lt;&lt; std::endl;<br>        <span class="hljs-keyword">if</span> (count_.<span class="hljs-built_in">IsOnly</span>()) &#123;<br>            <span class="hljs-keyword">delete</span> ptr_;<br>            ptr_ = <span class="hljs-literal">nullptr</span>;<br>        &#125;<br>        count_.<span class="hljs-built_in">tryRelease</span>();<br>    &#125;<br><br>    <span class="hljs-comment">// 解引用运算符*</span><br>    T&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> *ptr_;<br>    &#125;<br><br>    <span class="hljs-comment">// 成员访问运算符-&gt;</span><br>    T* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-type">const</span> &#123;<br>        <span class="hljs-keyword">return</span> ptr_;<br>    &#125;<br><br><span class="hljs-keyword">private</span> :<br>    T* ptr_;<br>    RefCount count_;<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Shared_Ptr</span> &#123;<br><span class="hljs-keyword">public</span> :<br>    <span class="hljs-built_in">Shared_Ptr</span>(T* ptr = <span class="hljs-literal">nullptr</span>) : _pPtr(ptr), _pRefCount(<span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-number">1</span>)), _pMutex(<span class="hljs-keyword">new</span> mutex) &#123;&#125;<br><br>    <span class="hljs-built_in">Shared_Ptr</span>(<span class="hljs-type">const</span> Shared_Ptr&lt;T&gt;&amp; sp) : _pPtr(sp._pPtr), _pRefCount(sp._pRefCount), _pMutex(sp._pMutex) &#123;<br>        <span class="hljs-built_in">AddRefCount</span>();<br>    &#125;<br><br>    ~<span class="hljs-built_in">Shared_Ptr</span>() &#123;<br>        <span class="hljs-built_in">Release</span>();<br>    &#125;<br><br>    Shared_Ptr&lt;T&gt;&amp; <span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> Shared_Ptr&lt;T&gt;&amp; sp) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span> != sp) &#123;<br>            <span class="hljs-built_in">Release</span>();<br>            _pPtr = sp._pPtr;<br>            _pRefCount = sp._pRefCount;<br>            _pMutex = sp._pMutex;<br>            <span class="hljs-built_in">AddRefCount</span>();<br>        &#125;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    T&amp; <span class="hljs-keyword">operator</span>*() &#123;<br>        <span class="hljs-keyword">return</span> *_pPtr;<br>    &#125;<br><br>    T* <span class="hljs-keyword">operator</span>-&gt;() &#123;<br>        <span class="hljs-keyword">return</span> _pPtr;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">UseCount</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> *_pRefCount; &#125;<br><br>    <span class="hljs-function">T* <span class="hljs-title">Get</span><span class="hljs-params">()</span> </span>&#123; <span class="hljs-keyword">return</span> _pPtr; &#125;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">AddRefCount</span><span class="hljs-params">()</span> </span>&#123;<br>        _pMutex -&gt; <span class="hljs-built_in">lock</span>();<br>        ++(*_pRefCount);<br>        _pMutex -&gt; <span class="hljs-built_in">unlock</span>();<br>    &#125;<br><br><span class="hljs-keyword">private</span> :<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">Release</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-type">bool</span> deleteflag = <span class="hljs-literal">false</span>;<br>        _pMutex -&gt; <span class="hljs-built_in">lock</span>();<br>        <span class="hljs-keyword">if</span> (--(*_pRefCount) == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">delete</span> _pRefCount;<br>            <span class="hljs-keyword">delete</span> _pPtr;<br>            deleteflag = <span class="hljs-literal">true</span>;<br>        &#125;<br>        _pMutex -&gt; <span class="hljs-built_in">unlock</span>();<br>        <span class="hljs-keyword">if</span> (deleteflag == <span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">delete</span> _pMutex;<br>        &#125;<br>    &#125;<br><br><span class="hljs-keyword">private</span> :<br>    <span class="hljs-type">int</span> *_pRefCount;<br>    T* _pPtr;<br>    mutex* _pMutex;<br>&#125;;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>c</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>go-python</title>
    <link href="/2022/05/17/output/go-python/index/"/>
    <url>/2022/05/17/output/go-python/index/</url>
    
    <content type="html"><![CDATA[<p><strong>视觉智慧实践课上需要写深度学习-图像检索的大作业。Python是机器&#x2F;深度学习御用开发语言，Golang是新时代后端开发语言。Python很适合算法写模型，而Golang很适合提供API服务，两位同志都红的发紫。（抄袭）</strong></p><p><strong>所以算法方面用python写的sift，qt不想写（不喜欢），最近又在学go，所以准备用gin搭建web端，不过go和python之间好像有什么联系，没错，就是go-python，所以开始吧。</strong></p><h2 id="go-python"><a href="#go-python" class="headerlink" title="go-python"></a>go-python</h2><ul><li><a href="github.com/sbinet/go-python">go-python</a>主要用在python2.x</li><li><a href="github.com/DataDog/go-python3">go-python3</a>主要用来在python3.x</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">go get -u github.com/DataDog/go-python3<br></code></pre></td></tr></table></figure><p>我的mac是python3.9版本的，所以在<code>go build</code>的时候报错：</p><figure class="highlight gradle"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs gradle"># github.com<span class="hljs-regexp">/DataDog/g</span>o-python3<br>..<span class="hljs-regexp">/../g</span>o<span class="hljs-regexp">/pkg/m</span>od<span class="hljs-regexp">/github.com/</span>!data!dog<span class="hljs-regexp">/go-python3@v0.0.0-20211102160307-40adc605f1fe/</span>dict.go:<span class="hljs-number">141</span>:<span class="hljs-number">13</span>: could not determine kind of name <span class="hljs-keyword">for</span> C.PyDict_ClearFreeList<br></code></pre></td></tr></table></figure><p>意思就是python3.9的这个函数PyDict_ClearFreeList被删除了，找不到</p><p>通过查看这个<a href="https://github.com/DataDog/go-python3/issues/38">issue</a>可以发现：</p><ul><li>python的版本需要用3.7，所以需要配置python3.7虚拟环境</li><li>下好之后，需要用到pkg-config</li></ul><p>解决方案：</p><p>下载<a href="python.org/downloads/macos/">python3.7</a>，然后用anaconda或者venv创建虚拟环境。</p><p>我通过<code>brew install pkg-config</code>，然后<code>export $PKG_CONFIG_PATH=/usr/local/bin/pkg-config</code>，还是不太行。 原来需要用到python3.7里的pkg-config。</p><p>直接执行下面:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">sudo vim ~/.bash_profile<br><span class="hljs-built_in">export</span> <span class="hljs-variable">$PKG_CONFIG_PATH</span>=/Library/Frameworks/Python.framework/Versions/3.7/lib/pkgconfig<br><span class="hljs-built_in">source</span> ~/.bash_profile<br></code></pre></td></tr></table></figure><p>最后<code>go build</code>可以顺利完成。</p><h2 id="go调用python的过程"><a href="#go调用python的过程" class="headerlink" title="go调用python的过程"></a>go调用python的过程</h2><ol><li>初始化python环境</li><li>引入模块py对象</li><li>使用该模块的变量与函数</li><li>解析结果</li><li>销毁python3运行环境</li></ol><h2 id="调用中必用到到几个函数"><a href="#调用中必用到到几个函数" class="headerlink" title="调用中必用到到几个函数"></a>调用中必用到到几个函数</h2><p><code>init func()</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">init</span><span class="hljs-params">()</span></span> &#123;<br>    python3.Py_Initialize()<br>    <span class="hljs-keyword">if</span> !python3.Py_IsInitialized() &#123;<br>        fmt.Printf(<span class="hljs-string">&quot;Error initializing the python interpreter&quot;</span>)<br>        os.Exit(<span class="hljs-number">1</span>)<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>ImportModule func(dir, name strng) *python3.PyObject</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// ImportModule</span><br><span class="hljs-comment">// @Description: 导入一个包</span><br><span class="hljs-comment">// @param dir</span><br><span class="hljs-comment">// @param name</span><br><span class="hljs-comment">// @return *python3.PyObject</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">ImportModule</span><span class="hljs-params">(dir, name <span class="hljs-type">string</span>)</span></span> *python3.PyObject &#123;<br>    sysModule := python3.PyImport_ImportModule(<span class="hljs-string">&quot;sys&quot;</span>)<br>    path := sysModule.GetAttrString(<span class="hljs-string">&quot;path&quot;</span>)<br>    pathStr, _ := pythonRepr(path)<br>    log.Println(<span class="hljs-string">&quot;before add path is &quot;</span> + pathStr)<br>    python3.PyList_Insert(path, <span class="hljs-number">0</span>, python3.PyUnicode_FromString(<span class="hljs-string">&quot;&quot;</span>))<br>    python3.PyList_Insert(path, <span class="hljs-number">0</span>, python3.PyUnicode_FromString(dir))<br>    pathStr, _ = pythonRepr(path)<br>    log.Println(<span class="hljs-string">&quot;after add path is &quot;</span> + pathStr)<br>    <span class="hljs-keyword">return</span> python3.PyImport_ImportModule(name)<br>&#125;<br></code></pre></td></tr></table></figure><p><code>pythonRepr func(o *python3.PyObject) (string, error)</code></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs go"><span class="hljs-comment">// pythonRepr</span><br><span class="hljs-comment">// @Description: PyObject转换为string</span><br><span class="hljs-comment">// @param o</span><br><span class="hljs-comment">// @return string</span><br><span class="hljs-comment">// @return error</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">pythonRepr</span><span class="hljs-params">(o *python3.PyObject)</span></span> (<span class="hljs-type">string</span>, <span class="hljs-type">error</span>) &#123;<br>    <span class="hljs-keyword">if</span> o == <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;object is nil&quot;</span>)<br>    &#125;<br>    s := o.Repr()<br>    <span class="hljs-keyword">if</span> s == <span class="hljs-literal">nil</span> &#123;<br>        python3.PyErr_Clear()<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>, fmt.Errorf(<span class="hljs-string">&quot;failed to call Repr object method&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">defer</span> s.DecRef()<br><br>    <span class="hljs-keyword">return</span> python3.PyUnicode_AsUTF8(s), <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>消息队列</title>
    <link href="/2022/05/15/output/mq/index/"/>
    <url>/2022/05/15/output/mq/index/</url>
    
    <content type="html"><![CDATA[<h1 id="1-消息模型"><a href="#1-消息模型" class="headerlink" title="1 消息模型"></a>1 消息模型</h1><h2 id="1-1-点对点"><a href="#1-1-点对点" class="headerlink" title="1.1 点对点"></a>1.1 点对点</h2><p>消息生产者向消息队列中发送了一个消息之后，只能被一个消费者消费一次。</p><p><img src="/images/image-20191212011250613.png"></p><h2 id="1-2-发布-订阅"><a href="#1-2-发布-订阅" class="headerlink" title="1.2 发布&#x2F;订阅"></a>1.2 发布&#x2F;订阅</h2><p>消息生产者向频道发送了一个消息之后，多个消费者可以从该频道订阅到这条消息并消费。</p><p><img src="/images/image-20191212011410374.png"></p><p>发布与订阅模式和观察者模式有以下不同：</p><ul><li>观察者模式中，观察者和主题都知道对方的存在；而在发布与订阅模式中，生产者与消费者不知道对方的存在，它们之间通过频道进行通信。</li><li>观察者模式是同步的，当事件触发时，主题会调用观察者的方法，然后等待方法返回；而发布与订阅模式是异步的，生产者向频道发送一个消息之后，就不需要关心消费者何时去订阅这个消息，可以立即返回。</li></ul><p><img src="/images/image-20191212011747967.png"></p><h1 id="2-使用场景"><a href="#2-使用场景" class="headerlink" title="2 使用场景"></a>2 使用场景</h1><h2 id="2-1-异步处理"><a href="#2-1-异步处理" class="headerlink" title="2.1 异步处理"></a>2.1 异步处理</h2><p>发送者将消息发送给消息队列之后，不需要同步等待消息接收者处理完毕，而是立即返回进行其他操作。消息接收者从消息队列中订阅消息之后异步处理。</p><p>例如在注册流程中通常需要发送验证邮件来确保注册用户身份的合法性，可以使用消息队列使发送验证邮件的操作异步处理，用户在填写完注册信息之后就可以完成注册，而将发送验证邮件这一消息发送到消息队列中。</p><p>只有在业务流程允许异步处理的情况下才能这么做，例如上面的注册流程中，如果要求用户对验证邮件进行点击之后才能完成注册的话，就不能再使用消息队列。</p><h2 id="2-2-流量削锋"><a href="#2-2-流量削锋" class="headerlink" title="2.2 流量削锋"></a>2.2 流量削锋</h2><p>在高并发的场景下，如果短时间有大量的请求到达会压垮服务器。</p><p>可以将请求发送到消息队列中，服务器按照其处理能力从消息队列中的订阅消息进行处理。</p><h2 id="2-3-应用解耦"><a href="#2-3-应用解耦" class="headerlink" title="2.3 应用解耦"></a>2.3 应用解耦</h2><p>如果模块之间不直接进行调用，模块之间耦合度就会很低，那么修改一个模块或者新增一个模块对其它模块的影响会很小，从而实现可扩展性。</p><p>通过使用消息队列，一个模块只需要向消息队列中发送消息，其它模块可以选择性地从消息队列中订阅消息从而完成调用。</p><h1 id="3-可靠性"><a href="#3-可靠性" class="headerlink" title="3 可靠性"></a>3 可靠性</h1><h2 id="3-1-发送端的可靠性"><a href="#3-1-发送端的可靠性" class="headerlink" title="3.1 发送端的可靠性"></a>3.1 发送端的可靠性</h2><p>发送端完成操作后一定能将消息成功发送到消息队列中。</p><p>实现方法：</p><p>在本地数据库建一张消息表，将消息数据与业务数据保存在同一数据库实例里，这样就可以利用本地数据库的事务机制。事务提交成功后，将消息表中的消息转移到消息队列中，若转移消息成功则删除消息表中的数据，否则继续重传。</p><h2 id="3-2-接收端的可靠性"><a href="#3-2-接收端的可靠性" class="headerlink" title="3.2 接收端的可靠性"></a>3.2 接收端的可靠性</h2><p>接收端能够给从消息队列成功消费一次消息。</p><p>两种实现方法：</p><ol><li>保证接收端处理消息的业务逻辑具有幂等性：只要具有幂等性，那么消费多少次消息，最后处理的结果都是一样的。</li><li>保证消息具有唯一编号，并使用一张日志表来记录已经消费的消息编号。</li></ol>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Go For Codeforces</title>
    <link href="/2022/05/12/output/go-for-codeforces/index/"/>
    <url>/2022/05/12/output/go-for-codeforces/index/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 用 gomod管理</span><br>go get github.com/EndlessCheng/codeforces-go<br></code></pre></td></tr></table></figure><blockquote><p>用最基本的fmt.Scanln()当然可以，这里提供一种解决方法，用bufio处理，将输入输出转换成go_test。</p></blockquote><h3 id="Sol-go"><a href="#Sol-go" class="headerlink" title="Sol.go"></a>Sol.go</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;bufio&quot;</span><br>    <span class="hljs-string">&quot;fmt&quot;</span><br>    <span class="hljs-string">&quot;io&quot;</span><br>    <span class="hljs-string">&quot;os&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">Sol</span><span class="hljs-params">(_r io.Reader, _w io.Writer)</span></span> &#123;<br>    in := bufio.NewReader(_r)<br>    out := bufio.NewWriter(_w)<br>    <span class="hljs-keyword">defer</span> out.Flush()<br><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123; Sol(os.Stdin, os.Stdout) &#125;<br></code></pre></td></tr></table></figure><h3 id="Sol-test-go"><a href="#Sol-test-go" class="headerlink" title="Sol_test.go"></a>Sol_test.go</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs">输入（inputCopy）<br>输出（outputCopy）<br></code></pre></td></tr></table></figure><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs Go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">&quot;testing&quot;</span><br>    <span class="hljs-string">&quot;github.com/EndlessCheng/codeforces-go/main/testutil&quot;</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">TestSol</span><span class="hljs-params">(t *testing.T)</span></span> &#123;<br>    <span class="hljs-comment">// just copy from website</span><br>    rawText := <span class="hljs-string">`</span><br><span class="hljs-string">inputCopy</span><br><span class="hljs-string"></span><br><span class="hljs-string">outputCopy</span><br><span class="hljs-string"></span><br><span class="hljs-string">`</span><br>    testutil.AssertEqualCase(t, rawText, <span class="hljs-number">0</span>, Sol)<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>操作系统期末复习</title>
    <link href="/2022/05/11/output/os/index/"/>
    <url>/2022/05/11/output/os/index/</url>
    
    <content type="html"><![CDATA[<h1 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h1><h2 id="1-1-基本特征"><a href="#1-1-基本特征" class="headerlink" title="1.1 基本特征"></a>1.1 基本特征</h2><h3 id="1-1-1-并发"><a href="#1-1-1-并发" class="headerlink" title="1.1.1 并发"></a>1.1.1 并发</h3><p>并发是指宏观上在一段时间内能同时运行多个程序，而并行则指同一时刻能运行多个指令。 并行需要硬件支持，如多流水线，多核处理器或者分布式计算系统。 操作系统通过引入进程和线程，使得程序能够并发运行。 操作系统通过引入进程和线程，使得程序能够并发运行。</p><h3 id="1-1-2-共享"><a href="#1-1-2-共享" class="headerlink" title="1.1.2 共享"></a>1.1.2 共享</h3><p>共享是指系统中的资源可以被多个并发进程共同使用。 有两种共享方式：互斥共享和同时共享。 互斥共享的资源称为临界资源，例如打印机等，在同一时刻只允许一个进程访问，需要用同步机制来实现互斥访问。</p><h3 id="1-1-3-虚拟"><a href="#1-1-3-虚拟" class="headerlink" title="1.1.3 虚拟"></a>1.1.3 虚拟</h3><p>虚拟技术把一个物理实体转换为多个逻辑实体。</p><p>主要有两种虚拟技术：时（时间）分复用技术和空（空间）分复用技术。</p><p>多个进程能在同一个处理器上并发执行使用了时分复用技术，让每个进程轮流占用处理器，每次只执行一小个时间片并快速切换。</p><p>虚拟内存使用了空分复用技术，它将物理内存抽象为地址空间，每个进程都有各自的地址空间，地址空间的页被映射到物理内存，地址空间并不需要全部在物理内存中，当使用一个没有在物理内存的页时，执行页面置换算法，将该页置换到内存中。</p><h3 id="1-1-4-异步"><a href="#1-1-4-异步" class="headerlink" title="1.1.4 异步"></a>1.1.4 异步</h3><p>异步指进程不是一次性执行完毕，而是走走停停，以不可知的速度向前推进。</p><h2 id="1-2-基本功能"><a href="#1-2-基本功能" class="headerlink" title="1.2 基本功能"></a>1.2 基本功能</h2><h3 id="1-2-1-进程管理"><a href="#1-2-1-进程管理" class="headerlink" title="1.2.1 进程管理"></a>1.2.1 进程管理</h3><p>进程控制、进程同步、进程通信、死锁处理、处理机调度等。</p><h3 id="1-2-2-内存管理"><a href="#1-2-2-内存管理" class="headerlink" title="1.2.2 内存管理"></a>1.2.2 内存管理</h3><p>内存分配、地址映射、内存保护与共享、虚拟内存等。</p><h3 id="1-2-3-文件管理"><a href="#1-2-3-文件管理" class="headerlink" title="1.2.3 文件管理"></a>1.2.3 文件管理</h3><p>文件存储空间的管理、目录管理、文件读写管理和保护等。</p><h3 id="1-2-4-设备管理"><a href="#1-2-4-设备管理" class="headerlink" title="1.2.4 设备管理"></a>1.2.4 设备管理</h3><p>完成用户的I&#x2F;O请求，方便用户使用各种设备，并提高设备的利用率。 主要包括缓冲管理、设备分配、设备处理、虚拟设备等。</p><h2 id="1-3-系统调用"><a href="#1-3-系统调用" class="headerlink" title="1.3 系统调用"></a>1.3 系统调用</h2><p>如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成。</p><p><img src="/images/tGPV0.png"></p><p>Linux的系统调用主要有以下这些：</p><table><thead><tr><th>Task</th><th>Commands</th></tr></thead><tbody><tr><td>进程控制</td><td>fork(); exit(); wait();</td></tr><tr><td>进程通信</td><td>pipe(); shmget(); mmap();</td></tr><tr><td>文件操作</td><td>open(); read(); write();</td></tr><tr><td>设备操作</td><td>ioctl(); read(); write();</td></tr><tr><td>信息维护</td><td>getpid(); alarm(); sleep();</td></tr><tr><td>安全</td><td>chmod(); umask(); chown();</td></tr></tbody></table><h2 id="1-4-宏内核和微内核"><a href="#1-4-宏内核和微内核" class="headerlink" title="1.4 宏内核和微内核"></a>1.4 宏内核和微内核</h2><h3 id="1-4-1-宏内核"><a href="#1-4-1-宏内核" class="headerlink" title="1.4.1 宏内核"></a>1.4.1 宏内核</h3><p>宏内核是将操作系统功能作为一个紧密结合的整体放到内核。 由于各模块共享信息，因此有很高的性能。</p><h3 id="1-4-2-微内核"><a href="#1-4-2-微内核" class="headerlink" title="1.4.2 微内核"></a>1.4.2 微内核</h3><p>由于操作系统不断复杂，因此将一部分操作系统移出内核，从而降低内核的复杂性。移出的部分根据分层的原则划分成若干服务，相互独立。</p><p>在微内核结构下，操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。</p><p>因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</p><p><img src="/images/2_14_microkernelArchitecture.jpg"></p><h2 id="1-5-中断分类"><a href="#1-5-中断分类" class="headerlink" title="1.5 中断分类"></a>1.5 中断分类</h2><h3 id="1-5-1-外中断"><a href="#1-5-1-外中断" class="headerlink" title="1.5.1 外中断"></a>1.5.1 外中断</h3><p>由CPU执行指令以外的时间引起，如I&#x2F;O完成中断，表示设备输入&#x2F;输出处理已经完成，处理器能够发送下一个输入&#x2F;输出请求。此外还有时钟中断、控制台中断等。</p><h3 id="1-5-2-异常"><a href="#1-5-2-异常" class="headerlink" title="1.5.2 异常"></a>1.5.2 异常</h3><p>由CPU执行指令的内部时间引起，如非法操作码、地址越界、算术溢出等。</p><h3 id="1-5-3-陷入"><a href="#1-5-3-陷入" class="headerlink" title="1.5.3 陷入"></a>1.5.3 陷入</h3><p>在用户程序中使用系统调用。</p><h1 id="2-进程管理"><a href="#2-进程管理" class="headerlink" title="2 进程管理"></a>2 进程管理</h1><h2 id="2-1-进程与线程"><a href="#2-1-进程与线程" class="headerlink" title="2.1 进程与线程"></a>2.1 进程与线程</h2><h3 id="2-1-1-进程"><a href="#2-1-1-进程" class="headerlink" title="2.1.1 进程"></a>2.1.1 进程</h3><p>进程是资源分配的基本单位。</p><p>进程控制块（Process Control Block，PCB）描述进程的基本信息和运行状态，所谓的创建进程和撤销进程，都是指对PCB的操作。</p><h3 id="2-1-2-线程"><a href="#2-1-2-线程" class="headerlink" title="2.1.2 线程"></a>2.1.2 线程</h3><p>线程是独立调度的基本单位。</p><p>一个进程中可以有多个线程，它们共享进程资源。</p><p>eg：QQ 和浏览器是两个进程，浏览器进程里面有很多线程，例如 HTTP 请求线程、事件响应线程、渲染线程等等，线程的并发执行使得在浏览器中点击一个新链接从而发起 HTTP请求时，浏览器还可以响应用户的其它事件。</p><p><img src="/images/3cd630ea-017c-488d-ad1d-732b4efeddf5.png"></p><h3 id="2-1-3-区别"><a href="#2-1-3-区别" class="headerlink" title="2.1.3 区别"></a>2.1.3 区别</h3><ol><li>拥有资源</li></ol><p>进程是资源分配的基本单位，但是线程不拥有资源，线程可以访问隶属进程的资源。</p><ol start="2"><li>调度</li></ol><p>线程是独立调度的基本单位，在同一进程中，线程的切换不会引起进程切换，从一个进程中的线程切换到另一个进程中的线程时，会引起进程切换。</p><ol start="3"><li>系统开销</li></ol><p>由于创建或撤销进程时，系统都要为之分配或回收资源，如内存空间、I&#x2F;O设备等，所付出的开销远大于创建或撤销线程时的开销。类似地，在进行进程切换时，涉及当前执行进程CPU环境的保存及新调度进程CPU环境的设置，而线程切换时只需保存和设置少量寄存器内容，开销很小。</p><ol start="4"><li>通信方面</li></ol><p>线程间可以通过直接读写同一进程中的数据进行通信，但是进程通信需要借助IPC。</p><h2 id="2-2-进程状态的切换"><a href="#2-2-进程状态的切换" class="headerlink" title="2.2 进程状态的切换"></a>2.2 进程状态的切换</h2><p><img src="/images/ProcessState.png"></p><ul><li>就绪状态（ready）：等待被调度</li><li>运行状态（running）</li><li>阻塞状态（waiting）：等待资源</li></ul><p>应该注意以下内容：</p><ul><li>只有就绪态和运行态可以相互转换，其它都是单向转换。就绪状态的进程通过调度算法从而获得CPU时间，转为运行状态；而运行状态的进程，在分配给它的CPU时间片用完之后就会转为就绪状态，等待下一次调度。</li><li>阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括CPU时间，缺少CPU时间会从运行态转换为就绪态。</li></ul><h2 id="2-3-进程调度算法"><a href="#2-3-进程调度算法" class="headerlink" title="2.3 进程调度算法"></a>2.3 进程调度算法</h2><p>不同环境的调度算法目标不同，因此需要针对不同环境来讨论调度算法。</p><h3 id="2-3-1-批处理系统"><a href="#2-3-1-批处理系统" class="headerlink" title="2.3.1 批处理系统"></a>2.3.1 批处理系统</h3><p>批处理系统没有太多的用户操作，在该系统中，调度算法目标是保证吞吐量和周转时间（从提交到终止的时间）。</p><h4 id="2-3-1-1-先来先服务-first-come-first-serverd-（FCFS）"><a href="#2-3-1-1-先来先服务-first-come-first-serverd-（FCFS）" class="headerlink" title="2.3.1.1 先来先服务 first-come first-serverd （FCFS）"></a>2.3.1.1 先来先服务 first-come first-serverd （FCFS）</h4><p>非抢占式的调度算法，按照请求的顺序进行调度。</p><p>有利于长作业，但不利于短作业，因为短作业必须一直等待前面的长作业执行完毕才能执行，而长作业又需要执行很长时间，造成了短作业等待时间过长。</p><h4 id="2-3-1-2-短作业优先-shortest-job-first-（SJF）"><a href="#2-3-1-2-短作业优先-shortest-job-first-（SJF）" class="headerlink" title="2.3.1.2 短作业优先 shortest job first （SJF）"></a>2.3.1.2 短作业优先 shortest job first （SJF）</h4><p>非抢占式的调度算法，按估计运行时间最短的顺序进行调度。</p><p>长作业有可能会饿死，处于一直等待短作业执行完毕的状态。因为如果一直有短作业到来，那么长作业永远得不到调度。</p><h4 id="2-3-1-3-最短剩余时间优先-shortest-remaining-time-next-（SRTN）"><a href="#2-3-1-3-最短剩余时间优先-shortest-remaining-time-next-（SRTN）" class="headerlink" title="2.3.1.3 最短剩余时间优先 shortest remaining time next （SRTN）"></a>2.3.1.3 最短剩余时间优先 shortest remaining time next （SRTN）</h4><p>最短作业优先的抢占式版本，按剩余运行时间的顺序进行调度。当一个新的作业到达时，其整个运行时间与当前进程的剩余时间作比较。如果新的进程需要的时间更少，则挂起当前进程，运行新的进程，否则新的进程等待。</p><h3 id="2-3-2-交互式系统"><a href="#2-3-2-交互式系统" class="headerlink" title="2.3.2 交互式系统"></a>2.3.2 交互式系统</h3><p>交互式系统有大量的用户交互操作，在该系统中调度算法的目标是快速地进行响应。</p><h4 id="2-3-2-1-时间片轮转"><a href="#2-3-2-1-时间片轮转" class="headerlink" title="2.3.2.1 时间片轮转"></a>2.3.2.1 时间片轮转</h4><p>将所有就绪进程按FCFS的原则排成一个队列，每次调度时，把CPU时间分配给队首进程，该进程可以执行一个时间片。当时间片用完时，由计时器发出时钟中断，调度程序便停止该进程的执行，并将它送往就绪队列的末尾，同时继续把CPU时间分配给队首的进程。</p><p>时间片轮转算法的效率和时间片的大小有很大关系：</p><ul><li>因为进程切换都要保存进程的信息并且载入新进程的信息，如果时间片太小，会导致进程切换得太频繁，在进程切换上就会花过多时间。</li><li>而如果时间片过长，那么实时性就不能得到保证。</li></ul><p><img src="/images/8c662999-c16c-481c-9f40-1fdba5bc9167.png"></p><h4 id="2-3-2-2-优先级调度"><a href="#2-3-2-2-优先级调度" class="headerlink" title="2.3.2.2 优先级调度"></a>2.3.2.2 优先级调度</h4><p>为每个进程分配一个优先级，按优先级进行调度。</p><p>为了防止低优先级的进程永远等不到调度，可以随着时间的推移增加等待进程的优先级。</p><h4 id="2-3-2-3-多级反馈队列"><a href="#2-3-2-3-多级反馈队列" class="headerlink" title="2.3.2.3 多级反馈队列"></a>2.3.2.3 多级反馈队列</h4><p>一个进程需要执行100个时间片，如果采用时间片轮转调度算法，那么需要交换100次。</p><p>多级队列是为这种需要连续执行多个时间片的进程考虑，它设置了多个队列，每个队列时间片大小都不同，例如1，2，4，8…。进程在第一个队列没执行完，就会被移到下一个队列。这种方式下，之前的进程只需要交换7次。</p><p>每个队列优先权也不同，最上面的优先权最高。因此只有上一个队列没有进程在排队，才能调度当前队列上的进程。</p><p>可以将这种调度算法看成是时间片轮转调度算法和优先级调度算法的结合。</p><p><img src="/images/042cf928-3c8e-4815-ae9c-f2780202c68f.png"></p><h3 id="2-3-3-实时系统"><a href="#2-3-3-实时系统" class="headerlink" title="2.3.3 实时系统"></a>2.3.3 实时系统</h3><p>实时系统要求一个请求在一个确定时间内得到响应。</p><p>分为硬实时和软实时，前者必须满足绝对的截止时间，后者可以容忍一定的超时。</p><h2 id="2-4-进程同步"><a href="#2-4-进程同步" class="headerlink" title="2.4 进程同步"></a>2.4 进程同步</h2><h3 id="2-4-1-临界区"><a href="#2-4-1-临界区" class="headerlink" title="2.4.1 临界区"></a>2.4.1 临界区</h3><p>对临界资源进行访问的那段代码称为临界区。</p><p>为了互斥访问临界资源，每个进程在进入临界区之前，需要先进行检查。</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">//</span> entry section<br><span class="hljs-regexp">//</span> critical section<br><span class="hljs-regexp">//</span> <span class="hljs-keyword">exit</span> section<br></code></pre></td></tr></table></figure><h3 id="2-4-2-同步与互斥"><a href="#2-4-2-同步与互斥" class="headerlink" title="2.4.2 同步与互斥"></a>2.4.2 同步与互斥</h3><ul><li>同步：多个进程因为合作产生的直接制约关系，使得进程有一定的先后执行关系。</li><li>互斥：多个进程在同一时刻只有一个进程能进入临界区。</li></ul><h3 id="2-4-3-信号量"><a href="#2-4-3-信号量" class="headerlink" title="2.4.3 信号量"></a>2.4.3 信号量</h3><p>信号量（Semaphore）是一个整型变量，可以对其执行down和up操作，也就是常见的P和V操作。</p><ul><li><code>down</code>：如果信号量大于0，执行-1操作；如果信号量等于0，进程睡眠，等待信号量大于0；</li><li><code>up</code>：对信号量执行+1操作，唤醒睡眠的进程让其完成down操作。</li></ul><p>down和up操作需要被设计成原语，不可分割，通常的做法是在执行这些操作的时候屏蔽中断。</p><p>如果信号量的取值只能为0或者1，那么就成为了<code>互斥量（Mutex）</code>，0表示临界区已经加锁，1表示临界区解锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> semaphore;<br>semaphore mutex = <span class="hljs-number">1</span>;<br><span class="hljs-type">void</span> <span class="hljs-title function_">P1</span><span class="hljs-params">()</span> &#123;<br>    down(&amp;mutex);<br>    <span class="hljs-comment">// 临界区</span><br>    up(&amp;mutex);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">P2</span><span class="hljs-params">()</span> &#123;<br>    down(&amp;mutex);<br>    <span class="hljs-comment">// 临界区</span><br>    up(&amp;mutex);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4-4-管程"><a href="#2-4-4-管程" class="headerlink" title="2.4.4 管程"></a>2.4.4 管程</h3><p>使用信号量机制实现的生产者消费者问题需要客户端代码做很多控制，而管程把控制的代码独立出来，不仅不容易出错，也使得客户端代码调用更容易。</p><p>略。</p><h2 id="2-5-经典同步问题"><a href="#2-5-经典同步问题" class="headerlink" title="2.5 经典同步问题"></a>2.5 经典同步问题</h2><h3 id="2-5-1-使用信号量实现生产者-消费者问题"><a href="#2-5-1-使用信号量实现生产者-消费者问题" class="headerlink" title="2.5.1 使用信号量实现生产者-消费者问题"></a>2.5.1 使用信号量实现生产者-消费者问题</h3><p>问题描述:</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">使用一个缓冲区来保存物品，只有缓冲区没有满，生产者才可以放入物品；只有缓冲区不为空，消费者才可以拿走物品。<br></code></pre></td></tr></table></figure><p>因为缓冲区属于临界资源，因此需要使用一个互斥量<code>mutex</code>来控制缓冲区的互斥访问。</p><p>为了同步生产者和消费者的行为，需要记录缓冲区中物品的数量。数量可以使用信号量来进行统计。</p><p>这里需要使用两个信号量：<code>empty</code>记录空缓冲区的数量，<code>full</code>记录满缓冲区的数量。</p><p>其中，<code>empty</code>信号量是在生产者进程中使用，当<code>empty</code>不为0时，生产者才可以放入物品；<code>full</code>信号量时在消费者进程中使用，当<code>full</code>信号量不为0时，消费者才可以取走物品。</p><p>注意：不能先对缓冲区进行加锁，再测试信号量。也就是说，不能先执行down(mutex)再执行down(empty)。如果这么做了，那么可能会出现这种情况：生产者对缓冲区加锁后，执行down(empty)操作，发现empty&#x3D;0，此时生产者睡眠，消费者不能进入临界区，因为生产者对缓冲区加锁了，消费者就无法执行up(empty)操作，empty永远都为0，导致生产者永远等待下去，不会释放锁，消费者因此也会永远等待下去。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 100</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> semaphore;<br>semaphore mutex = <span class="hljs-number">1</span>;<br>semaphore empty = N;<br>semaphore full = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">producer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        <span class="hljs-type">int</span> item = produce_item();<br>        down(&amp;empty);<br>        down(&amp;mutex);<br>        insert_item(item);<br>        up(&amp;mutex);<br>        up(&amp;full);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        down(&amp;full);<br>        down(&amp;mutex);<br>        <span class="hljs-type">int</span> item = remove_item();<br>        consume_item(item);<br>        up(&amp;mutex);<br>        up(&amp;empty);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-2-哲学家进餐问题"><a href="#2-5-2-哲学家进餐问题" class="headerlink" title="2.5.2 哲学家进餐问题"></a>2.5.2 哲学家进餐问题</h3><p><img src="/images/a9077f06-7584-4f2b-8c20-3a8e46928820.jpg"></p><p>问题描述：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">五个哲学家围着一张圆桌，每个哲学家面前放着食物。哲学家的生活有两种交替活动：吃饭以及思考。当一个哲学家吃饭时，需要先拿起自己左右两边的两根筷子，并且一次只能拿起一根筷子。<br></code></pre></td></tr></table></figure><p>下面是一种错误的解法，如果所有哲学家同时拿起左手边的筷子，那么所有哲学家都在等待其他哲学家吃完并释放自己手中的筷子，导致死锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 5</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">philosopher</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        think();<br>        take(i);            <span class="hljs-comment">// 拿起左边的筷子</span><br>        take((i + <span class="hljs-number">1</span>) % N);  <span class="hljs-comment">// 拿起右边的筷子</span><br>        eat();<br>        put(i);<br>        put((i + <span class="hljs-number">1</span>) % N);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>为了防止死锁的发生，可以设置两个条件：</p><ul><li>必须同时拿起左右两根筷子；</li><li>只有再两个邻居都没有进餐的情况下才允许进餐。</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 5</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> LEFT (i - 1 + N) % N    <span class="hljs-comment">// 左邻居</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> RIGHT (i + 1) % N       <span class="hljs-comment">// 右邻居</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> THINKING 0</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> HUNGRY 1</span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> EATING 2</span><br><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> semaphore;<br><span class="hljs-type">int</span> state[N];                   <span class="hljs-comment">// 跟踪每个哲学家的状态</span><br>semaphore mutex = <span class="hljs-number">1</span>;            <span class="hljs-comment">// 临界区的互斥，临界区时state数组，对其修改需要互斥</span><br>semaphore s[N];                 <span class="hljs-comment">// 每个哲学家的一个信号量</span><br><br><span class="hljs-type">void</span> <span class="hljs-title function_">philosopher</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        think(i);<br>        take_two(i);<br>        eat(i);<br>        put_two(i);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">take_two</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    down(&amp;mutex);<br>    state[i] = HUNGRY;<br>    check(i);<br>    up(&amp;mutex);<br>    down(&amp;s[i]); <span class="hljs-comment">// 只有收到通知之后才可以开始吃，否则会一直等下去</span><br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">put_two</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    down(&amp;mutex);<br>    state[i] = THINKING;<br>    check(LEFT); <span class="hljs-comment">// 尝试通知左右邻居，自己吃完了，你们可以开始吃了</span><br>    check(RIGHT);<br>    up(&amp;mutex);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    down(&amp;mutex);<br>    state[i] = EATING;<br>    up(&amp;mutex);<br>&#125;<br><br><span class="hljs-comment">// 检查两个邻居是否都没有用餐</span><br><span class="hljs-comment">// 如果是的话，就up(&amp;s[i])了，使得down(&amp;s[i])能够得到通知并继续执行</span><br><span class="hljs-type">void</span> <span class="hljs-title function_">check</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> &#123;<br>    <span class="hljs-keyword">if</span>(state[i] == HUNGRY &amp;&amp; state[LEFT] != EATING &amp;&amp; state[RIGHT] != EATING) &#123;<br>        state[i] = EATING;<br>        up(&amp;s[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-3-读者-写者问题"><a href="#2-5-3-读者-写者问题" class="headerlink" title="2.5.3 读者-写者问题"></a>2.5.3 读者-写者问题</h3><p>问题描述：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">允许多个进程同时对数据进行读操作，但是不允许读和写以及写和写的操作同时发生。<br></code></pre></td></tr></table></figure><p>一个整型变量<code>count</code>记录在对数据进行读操作的进程数量，一个互斥量<code>count_mutex</code>用于对<code>count</code>加锁，一个互斥量<code>data_mutex</code>用于对读写的数据加锁。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">typedef</span> <span class="hljs-type">int</span> semaphore;<br>semaphore count_mutex = <span class="hljs-number">1</span>;<br>semaphore data_mutex = <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> count = <span class="hljs-number">0</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">reader</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        down(&amp;count_mutex);<br>        count++;<br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">1</span>) down(&amp;data_mutex);<br>        up(&amp;count_mutex);<br>        read();<br>        down(&amp;count_mutex);<br>        count--;<br>        <span class="hljs-keyword">if</span>(count == <span class="hljs-number">0</span>) up(&amp;data_mutex);<br>        up(&amp;count_mutex);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">writer</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        down(&amp;data_mutex);<br>        write();<br>        up(&amp;data_mutex);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-5-4-理发师问题"><a href="#2-5-4-理发师问题" class="headerlink" title="2.5.4 理发师问题"></a>2.5.4 理发师问题</h3><p>问题描述：</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">假设有一个理发店只有一个理发师，一张理发时坐的椅子，若干张普通椅子顾客供等候时坐。没有顾客时，理发师就坐在理发的椅子上睡觉。顾客一到，他不是叫醒理发师，就是离开。如果理发师没有睡觉，而在为别人理发，他就会坐下来等候。如果所有的椅子都坐满了人，最后来的顾客就会离开。<br></code></pre></td></tr></table></figure><p>使用三个信号量和一个控制变量：</p><ol><li>控制变量<code>waiting</code>用来记录等候理发的顾客数，init &#x3D; 0;</li><li>信号量<code>customers</code>用来记录等候理发的顾客数，并用作阻塞理发师进程，init &#x3D; 0;</li><li>信号量<code>barbers</code>用来记录正在等候顾客的理发师数，并用作阻塞进程，init &#x3D; 0（刚开始时理发师在睡觉，所以理发师这个资源数目为0）；</li><li>信号量<code>mutex</code>用作互斥，init &#x3D; 1;</li></ol><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">define</span> N 3</span><br><span class="hljs-type">int</span> waiting = <span class="hljs-number">0</span>;<br>semaphore customers = <span class="hljs-number">0</span>;<br>semaphore barbers = <span class="hljs-number">0</span>;<br>semaphore mutex = <span class="hljs-number">1</span>;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">barber</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br>        down(&amp;customers); <span class="hljs-comment">// 若无顾客，理发师睡眠</span><br>        down(&amp;mutex);<br>        waiting--;<br>        up(&amp;barbers);<br>        up(&amp;mutex);<br><br>        down(&amp;mutex);<br>        <span class="hljs-keyword">if</span>(waiting == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 没有人就睡眠</span><br>            up(&amp;mutex);<br>            <span class="hljs-keyword">break</span> ;<br>        &#125;<br>        up(&amp;mutex);<br>    &#125;<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">consumer</span><span class="hljs-params">()</span> &#123;<br>    down(&amp;mutex);<br>    <span class="hljs-keyword">if</span>(waiting == N) &#123; <span class="hljs-comment">// 椅子坐满了人</span><br>        up(&amp;mutex);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        waiting++; <span class="hljs-comment">// 等候的人+1</span><br>        up(&amp;customers); <span class="hljs-comment">// 多一个顾客</span><br>        up(&amp;mutex);<br>        down(&amp;barbers); <span class="hljs-comment">// 如果没有理发师，顾客就在椅子上等着</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>理发师问题和生产者消费者问题在于</p><ol><li>当等候理发的凳子被坐满时候，顾客离开，即资源不满足的情况下，进程结束；当缓冲区满的时候，生产者出现等待事件，等到资源满足时往下执行，即资源不满足的情况下，进程等待。</li><li>当资源用信号量表示，资源不满足的情况下进程等待，所以理发师问题中，椅子不因该用信号量表示而因该用变量表示，再加上一个互斥信号量。</li><li>生产者消费者可以更改公共资源如缓冲区empty当前值，无论资源是否满足；而理发师问题中对于公共的资源椅子，资源条件不满足时，顾客是不能更改waiting的值。</li></ol><h2 id="2-6-进程通信"><a href="#2-6-进程通信" class="headerlink" title="2.6 进程通信"></a>2.6 进程通信</h2><p>进程同步与进程通信很容易混淆，它们的区别在于：</p><ul><li>进程同步：控制多个进程按一定顺序执行；</li><li>进程通信：进程间传输信息。</li></ul><p>进程通信是一种手段，而进程同步是一种目的。也可以说，为了能够达到进程同步的目的，需要让进程进行通信，传输一些进程同步所需要的信息。</p><h3 id="2-6-1-管道"><a href="#2-6-1-管道" class="headerlink" title="2.6.1 管道"></a>2.6.1 管道</h3><p>管道是通过调用<code>pipe</code>函数创建的，fd[0]用于读，fd[1]用于写。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">pipe</span><span class="hljs-params">(<span class="hljs-type">int</span> fd[<span class="hljs-number">2</span>])</span>;<br></code></pre></td></tr></table></figure><p>它具有以下限制：</p><ul><li>它支支持半双工通信（单向交替传输）；</li><li>只能在父子进程或者兄弟进程中使用。</li></ul><p><img src="/images/53cd9ade-b0a6-4399-b4de-7f1fbd06cdfb.png"></p><h3 id="2-6-2-FIFO"><a href="#2-6-2-FIFO" class="headerlink" title="2.6.2 FIFO"></a>2.6.2 FIFO</h3><p>也称为命名管道，去除了管道只能在父子进程中使用的限制。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">mkfifo</span><span class="hljs-params">(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">mode_t</span> mode)</span>;<br><span class="hljs-type">int</span> <span class="hljs-title function_">mkfifoat</span><span class="hljs-params">(<span class="hljs-type">int</span> fd, <span class="hljs-type">const</span> <span class="hljs-type">char</span> *path, <span class="hljs-type">mode_t</span> mode)</span>;<br></code></pre></td></tr></table></figure><p>FIFO常用于客户-服务器应用程序中，FIFO用作汇聚点，在客户进程和服务器进程之间传递数据。 <img src="/images/2ac50b81-d92a-4401-b9ec-f2113ecc3076.png"></p><h3 id="2-6-3-消息队列"><a href="#2-6-3-消息队列" class="headerlink" title="2.6.3 消息队列"></a>2.6.3 消息队列</h3><p>相比于FIFO，消息队列具有以下优点：</p><ul><li>消息队列可以独立于读写进程存在，从而避免了FIFO中同步管道的打开和关闭时可能产生的困难；</li><li>避免了FIFO的同步阻塞问题，不需要进程自己提供同步方法；</li><li>读进程可以根据消息类型有选择地接收消息，而不像FIFO那样只能默认地接收。</li></ul><h3 id="2-6-4-信号量"><a href="#2-6-4-信号量" class="headerlink" title="2.6.4 信号量"></a>2.6.4 信号量</h3><p>它时一个计数器，用于为多个进程提供对共享数据对象的访问。</p><h3 id="2-6-5-共享存储"><a href="#2-6-5-共享存储" class="headerlink" title="2.6.5 共享存储"></a>2.6.5 共享存储</h3><p>允许多个进程共享一个给定的存储区。因为数据不需要在进程之间复制，所以这是最快的一种IPC。 需要使用信号量用来同步对共享存储的访问。 多个进程可以将同一个文件映射到它们的地址空间从而实现共享内存。另外XSI共享内存不是使用文件，而是使用内存的匿名段。</p><h3 id="2-6-6-套结字"><a href="#2-6-6-套结字" class="headerlink" title="2.6.6 套结字"></a>2.6.6 套结字</h3><p>与其它通信机制不同的是，它可用于不同机器间的进程通信。</p><h1 id="3-死锁"><a href="#3-死锁" class="headerlink" title="3 死锁"></a>3 死锁</h1><h2 id="3-1-必要条件"><a href="#3-1-必要条件" class="headerlink" title="3.1 必要条件"></a>3.1 必要条件</h2><p><img src="/images/c037c901-7eae-4e31-a1e4-9d41329e5c3e.png"></p><ul><li>互斥：每个资源要么已经分配给了一个进程，要么就是可用的。</li><li>占有和等待：已经得到了某个资源的进程可以再请求新的资源。</li><li>不可抢占：已经分配给一个进程的资源不能强制性地被抢占，它只能被占有它的进程显式地释放。</li><li>环路等待：有两个或者两个以上的进程组成的一条环路，该环路中的每个进程都在等待下一个进程所占有的资源。</li></ul><h2 id="3-2-处理方法"><a href="#3-2-处理方法" class="headerlink" title="3.2 处理方法"></a>3.2 处理方法</h2><p>主要有以下四种方法：</p><ul><li>鸵鸟策略</li><li>死锁检测与死锁恢复</li><li>死锁预防</li><li>死锁避免</li></ul><h2 id="3-3-鸵鸟策略"><a href="#3-3-鸵鸟策略" class="headerlink" title="3.3 鸵鸟策略"></a>3.3 鸵鸟策略</h2><p>把头埋在沙子里，假装根本没发生问题。</p><p>因为解决死锁问题的代价很高，因此鸵鸟策略这种不采取任务措施的方案会获得更高的性能。</p><p>当发生死锁时不会对用户造成多大影响，或发生死锁的概率很低，可以采用鸵鸟策略。</p><p>大多数操作系统，包括 Unix，Linux和Windows，处理死锁问题的办法仅仅是忽略它。</p><h2 id="3-4-死锁检测与死锁恢复"><a href="#3-4-死锁检测与死锁恢复" class="headerlink" title="3.4 死锁检测与死锁恢复"></a>3.4 死锁检测与死锁恢复</h2><p>不试图阻止死锁，而是当检测到思索发生时，采取措施进行恢复。</p><h3 id="3-4-1-每种类型一个资源的死锁检测"><a href="#3-4-1-每种类型一个资源的死锁检测" class="headerlink" title="3.4.1 每种类型一个资源的死锁检测"></a>3.4.1 每种类型一个资源的死锁检测</h3><p><img src="/images/b1fa0453-a4b0-4eae-a352-48acca8fff74.png"></p><p>上图为资源分配图，其中方框表示资源，圆圈表示进程。资源指向进程表示该资源已经分配给该进程，进程指向资源表示进程请求获取该资源。</p><p>图 a 可以抽取出环，如图 b，它满足了环路等待条件，因此会发生死锁。</p><p>每种类型一个资源的死锁检测算法是通过检测有向图是否存在环来实现，从一个节点出发进行深度优先搜索，对访问过的节点进行标记，如果访问了已经标记的节点，就表示有向图存在环，也就是检测到死锁的发生。</p><h3 id="3-4-2-每种类型多个资源的死锁检测"><a href="#3-4-2-每种类型多个资源的死锁检测" class="headerlink" title="3.4.2 每种类型多个资源的死锁检测"></a>3.4.2 每种类型多个资源的死锁检测</h3><p><img src="/images/e1eda3d5-5ec8-4708-8e25-1a04c5e11f48.png"></p><p>上图中，有三个进程四个资源，每个数据代表的含义如下：</p><ul><li>E 向量：资源总量</li><li>A 向量：资源剩余量</li><li>C 矩阵：每个进程所拥有的资源数量，每一行都代表一个进程拥有资源的数量</li><li>R 矩阵：每个进程请求的资源数量</li></ul><p>进程 P1 和 P2 所请求的资源都得不到满足，只有进程 P3 可以，让 P3执行，之后释放 P3 拥有的资源，此时 A &#x3D; (2 2 2 0)。P2 可以执行，执行后释放 P2 拥有的资源，A &#x3D; (4 2 2 1) 。P1也可以执行。所有进程都可以顺利执行，没有死锁。</p><p>算法总结如下：</p><p>每个进程最开始时都不被标记，执行过程有可能被标记。当算法结束时，任何没有被标记的进程都是死锁进程。</p><ol><li>寻找一个没有标记的进程Pi，它所请求的资源小于等于A。</li><li>如果找到了这样一个进程，那么将C矩阵的第i行向量加到A中，标记该进程，并转回1。</li><li>如果没有这样一个进程，算法终止。</li></ol><h3 id="3-4-3-死锁恢复"><a href="#3-4-3-死锁恢复" class="headerlink" title="3.4.3 死锁恢复"></a>3.4.3 死锁恢复</h3><ul><li>利用抢占恢复</li><li>利用回滚恢复</li><li>通过杀死进程恢复</li></ul><h2 id="3-5-死锁预防"><a href="#3-5-死锁预防" class="headerlink" title="3.5 死锁预防"></a>3.5 死锁预防</h2><p>再程序运行之前预防发生死锁。</p><h3 id="3-5-1-破坏互斥条件"><a href="#3-5-1-破坏互斥条件" class="headerlink" title="3.5.1 破坏互斥条件"></a>3.5.1 破坏互斥条件</h3><p>例如假脱机打印机技术允许若干个进程同时输出，唯一真正请求物理打印机的进程是打印机守护进程。</p><h3 id="3-5-2-破坏占有和等待条件"><a href="#3-5-2-破坏占有和等待条件" class="headerlink" title="3.5.2 破坏占有和等待条件"></a>3.5.2 破坏占有和等待条件</h3><p>一般实现方式是规定所有进程在开始执行前请求所需要的全部资源。</p><h3 id="3-5-3-破坏不可抢占条件"><a href="#3-5-3-破坏不可抢占条件" class="headerlink" title="3.5.3 破坏不可抢占条件"></a>3.5.3 破坏不可抢占条件</h3><h3 id="3-5-4-破坏环路等待条件"><a href="#3-5-4-破坏环路等待条件" class="headerlink" title="3.5.4 破坏环路等待条件"></a>3.5.4 破坏环路等待条件</h3><p>给资源统一编号，进程只能按编号顺序来请求资源。</p><h2 id="3-6-死锁避免"><a href="#3-6-死锁避免" class="headerlink" title="3.6 死锁避免"></a>3.6 死锁避免</h2><p>在程序运行时避免发生死锁。</p><h3 id="3-6-1-银行家算法"><a href="#3-6-1-银行家算法" class="headerlink" title="3.6.1 银行家算法"></a>3.6.1 银行家算法</h3><h4 id="3-6-1-1-数据结构"><a href="#3-6-1-1-数据结构" class="headerlink" title="3.6.1.1 数据结构"></a>3.6.1.1 数据结构</h4><ol><li><code>Available</code> ：可利用资源向量，代表系统中所配置的该类全部可用资源的数量</li><li><code>Max</code>： 最大需求矩阵，代表进程对资源的最大需求</li><li><code>Allocation</code>：定义系统中每一类资源已分配给每一进程的资源数</li><li><code>Need</code>：表示进程还需要的各类资源数， <code>Need[i, j] = Max[i, j] - Allocation[i, j]</code></li></ol><h4 id="3-6-1-2-算法"><a href="#3-6-1-2-算法" class="headerlink" title="3.6.1.2 算法"></a>3.6.1.2 算法</h4><p>设<code>Request</code>是进程给Pi的请求向量，若<code>Request[j] = k</code>表示进程Pi需要k个j资源，当发出请求后，会进行以下检查：</p><ol><li><code>Request[j] &lt;= Need[j]</code>，请求合理，转向2，否则认为请求不合理</li><li><code>Request[j] &lt;= Available[j]</code>，请求合理，转向3，否则表示没有足够资源，进程需等待</li><li>尝试将资源分配给进程Pi：<ul><li><code>Available[j] = Available[j] - Request[j]</code></li><li><code>Allocation[j] = Allocation[j] + Request[j]</code></li><li><code>Need[j] = Need[j] - Request[j]</code></li></ul></li><li>运行安全性算法检查，检查资源分配后系统是否处于安全状态，安全，正式分配，否则恢复资源分配，进程继续等待</li></ol><h3 id="3-6-2-安全性算法"><a href="#3-6-2-安全性算法" class="headerlink" title="3.6.2 安全性算法"></a>3.6.2 安全性算法</h3><p>设置工作向量Work表示系统可提供给进程继续运行所需的给雷资源数目（<code>Work = Availalbe</code>），设置<code>Finish</code>，表示系统是否有足够的资源分配给进程 从进程集合中找到一个满足下列条件的进程：</p><ul><li><code>Finish[i] = False</code></li><li><code>Need[i, j] &lt;= Work[j]</code></li></ul><p>找到则分配资源： <code>Work[j] = Work[j] + Allocation[i, j]</code> <code>Finish[i] = True</code></p><p>重复寻找进程的步骤</p><p>如果所有进程<code>Finish[i] = True</code>，则系统处于安全状态，否则系统处于不安全状态</p><h3 id="3-6-3-什么是安全状态与不安全状态？安全状态和不安全状态和死锁之间的关系？"><a href="#3-6-3-什么是安全状态与不安全状态？安全状态和不安全状态和死锁之间的关系？" class="headerlink" title="3.6.3 什么是安全状态与不安全状态？安全状态和不安全状态和死锁之间的关系？"></a>3.6.3 什么是安全状态与不安全状态？安全状态和不安全状态和死锁之间的关系？</h3><ul><li>系统能按某种进程顺序，若{p1, p2, …, pn}为每个进程分配所需资源，直到最大需求，是每个进程都可顺利完成，这个进程序列即为安全序列，不存在安全序列，则称系统处于不安全状态</li><li>并非所有不安全状态都将导致死锁状态，但当系统进入不安全状态后，有可能进入死锁状态，只要系统处于安全状态，则可避免进入死锁状态</li><li>（安全性检查中使用的MAX，是进程执行前提供的，实际执行过程中，进程需要的最大资源量可能小于Max，例如：进程需要错误处理的代码需要n个资源，实际运行过程中没触发错误，就不会请求资源）</li></ul><h1 id="4-内存管理"><a href="#4-内存管理" class="headerlink" title="4 内存管理"></a>4 内存管理</h1><h2 id="4-1-虚拟内存"><a href="#4-1-虚拟内存" class="headerlink" title="4.1 虚拟内存"></a>4.1 虚拟内存</h2><p>虚拟内存的目的是为了让物理内存扩充成更大的逻辑内存，从而让程序获得更多的可用内存。</p><p>为了更好的管理内存，操作系统将内存抽象成地址空间。每个程序拥有自己的地址空间，这个地址空间被分割成多个块，每一块称为一页。这些页被映射物理内存，但不需要映射到连续的物理内存，也不需要所有页都必须在物理内存中。当程序引用到不在物理内存中的页时，由硬件执行必要的映射，将缺失的部分装入物理内存并重新执行失败的指令。</p><p>从上面的描述中可以看出，虚拟内存允许程序不用将地址空间中的每一页都映射到物理内存，也就是说一个程序不需要全部调入内存就可以运行，这使得有限的内存运行大程序成为可能。例如有一台计算机可以产生16位地址，那么一个程序的地址空间范围是0\~64K。该计算机只有32KB的物理内存，虚拟内存技术允许该计算机运行一个64K大小的程序。</p><p><img src="/images/7b281b1e-0595-402b-ae35-8c91084c33c1.png"></p><h2 id="4-2-分页系统地址映射"><a href="#4-2-分页系统地址映射" class="headerlink" title="4.2 分页系统地址映射"></a>4.2 分页系统地址映射</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>春招实习投递情况</title>
    <link href="/2022/03/05/output/job/index/"/>
    <url>/2022/03/05/output/job/index/</url>
    
    <content type="html"><![CDATA[<h2 id="阿里云-块存储-基础平台研发工程师-（杭州-北京）2-28-（三面块、二面分布式，已挂）"><a href="#阿里云-块存储-基础平台研发工程师-（杭州-北京）2-28-（三面块、二面分布式，已挂）" class="headerlink" title="阿里云 块存储 基础平台研发工程师 （杭州&#x2F;北京）2.28 （三面块、二面分布式，已挂）"></a>阿里云 块存储 基础平台研发工程师 （杭州&#x2F;北京）2.28 （三面块、二面分布式，已挂）</h2><h2 id="字节-AILab-后端开发工程师-（杭州）3-1-（没hc挂了）"><a href="#字节-AILab-后端开发工程师-（杭州）3-1-（没hc挂了）" class="headerlink" title="字节 AILab 后端开发工程师 （杭州）3.1 （没hc挂了）"></a>字节 AILab 后端开发工程师 （杭州）3.1 （没hc挂了）</h2><h2 id="网易-杭州研究院-Java开发实习生-（杭州）3-4-（简历挂）"><a href="#网易-杭州研究院-Java开发实习生-（杭州）3-4-（简历挂）" class="headerlink" title="网易 杭州研究院 Java开发实习生 （杭州）3.4 （简历挂）"></a>网易 杭州研究院 Java开发实习生 （杭州）3.4 （简历挂）</h2><h2 id="美团-All-后端开发工程师（上海）3-05（一面挂）"><a href="#美团-All-后端开发工程师（上海）3-05（一面挂）" class="headerlink" title="美团 All 后端开发工程师（上海）3.05（一面挂）"></a>美团 All 后端开发工程师（上海）3.05（一面挂）</h2><h2 id="腾讯-CSIG-后端开发（北上广深）3-11（投简历）"><a href="#腾讯-CSIG-后端开发（北上广深）3-11（投简历）" class="headerlink" title="腾讯 CSIG 后端开发（北上广深）3.11（投简历）"></a>腾讯 CSIG 后端开发（北上广深）3.11（投简历）</h2><h2 id="小马-后端开发（上海）3-14-（简历挂）"><a href="#小马-后端开发（上海）3-14-（简历挂）" class="headerlink" title="小马 后端开发（上海）3.14 （简历挂）"></a>小马 后端开发（上海）3.14 （简历挂）</h2><h2 id="字节-抖音-后端开发-3-26-（二面）"><a href="#字节-抖音-后端开发-3-26-（二面）" class="headerlink" title="字节 抖音 后端开发 3.26 （二面）"></a>字节 抖音 后端开发 3.26 （二面）</h2><h2 id="网易-网易云音乐-3-26（投简历）"><a href="#网易-网易云音乐-3-26（投简历）" class="headerlink" title="网易 网易云音乐 3.26（投简历）"></a>网易 网易云音乐 3.26（投简历）</h2><h2 id="元戎-C-后端开发-3-28（投简历）"><a href="#元戎-C-后端开发-3-28（投简历）" class="headerlink" title="元戎 C++后端开发 3.28（投简历）"></a>元戎 C++后端开发 3.28（投简历）</h2><h2 id="旷视-后端开发-3-28（投简历）"><a href="#旷视-后端开发-3-28（投简历）" class="headerlink" title="旷视 后端开发 3.28（投简历）"></a>旷视 后端开发 3.28（投简历）</h2><h2 id="拼多多-后端开发-3-31（投简历）"><a href="#拼多多-后端开发-3-31（投简历）" class="headerlink" title="拼多多 后端开发 3.31（投简历）"></a>拼多多 后端开发 3.31（投简历）</h2><h2 id="百度-java开发-3-31-（投简历）"><a href="#百度-java开发-3-31-（投简历）" class="headerlink" title="百度 java开发 3.31 （投简历）"></a>百度 java开发 3.31 （投简历）</h2><h2 id="广联达-java开发-3-31（投简历）"><a href="#广联达-java开发-3-31（投简历）" class="headerlink" title="广联达 java开发 3.31（投简历）"></a>广联达 java开发 3.31（投简历）</h2>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>我的ACM脚印</title>
    <link href="/2021/12/05/output/myacm/index/"/>
    <url>/2021/12/05/output/myacm/index/</url>
    
    <content type="html"><![CDATA[<p>感谢<a href="https://hukeqing.github.io/2020/12/21/acm/myACM/" title="胡大佬">胡大佬</a>的模板参考。</p><p>2021年12月4日，南京区域赛结束，同时结束的，还有我的两年多的ACM生涯。 接下来的寒假重心会向着找实习的方向努力，当然明年的区域赛、final以及明年的省赛等等，我都会去认真准备。</p><h1 id="这篇文章会写什么"><a href="#这篇文章会写什么" class="headerlink" title="这篇文章会写什么"></a>这篇文章会写什么</h1><ul><li><p>关于我</p><ul><li>我的ACM历程</li><li>我的ACM成绩</li></ul></li><li><p>写给新人</p><ul><li>什么是ACM</li><li>ACM能带来什么</li><li>ACM和其他竞赛有什么不同</li><li>什么样的人适合ACM，什么样的人不适合ACM</li></ul></li><li><p>写给ACMer</p><ul><li>关于训练</li><li>关于赛中</li></ul></li><li><p>完结撒花</p></li></ul><p>这篇文章更多来自我自己对ACM的观点，如果和你理解不同，请见谅。</p><h1 id="关于我"><a href="#关于我" class="headerlink" title="关于我"></a>关于我</h1><h2 id="我的ACM历程"><a href="#我的ACM历程" class="headerlink" title="我的ACM历程"></a>我的ACM历程</h2><h3 id="进入大学之前"><a href="#进入大学之前" class="headerlink" title="进入大学之前"></a>进入大学之前</h3><p>在2019年进入大学之前，我只是一个普普通通的高考生，学的是理科（物化生），对竞赛一无所知，可能知道数学竞赛，物理竞赛，却不知道五大学科竞赛的信息学竞赛，也就是OI。</p><p>高考填志愿的时候，在我选择计算机专业的时候，连计算机的概念是什么，你要问我为什么填计算机专业？答案只是因为高薪工作，但高薪是有高薪的理由，想必进入计算机专业的同学深有体会。</p><h3 id="大一"><a href="#大一" class="headerlink" title="大一"></a>大一</h3><p>大一上我上了王慧燕老师的C语言高级程序设计，那是我第一次接触程序。和每届新生该开始一样一窍不通，甚至连简单的输入输出都弄不明白，英语又不好，啥都看不懂，心想完了，我是不是真的不适合这个专业？</p><p>结果新生赛给了我一个“完美”答复，“牌王新生场爆零了。”很多人看我现在有一点点成绩，可却不知当时的我是什么样子的。爆零意味这什么？学院8，90%的同学都能过写上1题，而我却1题都写不来，我的室友一个一等，一个二等，还有一个和我一样，当时的我和第三位室友比赛结束后散步，“我是不是不适合学计算机”？“我真的不适合学计算机吗？”后来秉持着和高中一样的信念，“我不信我比别人差！”，更是萌生出参加ACM这样含金量极高的竞赛。</p><p>在那之后我更加努力，胡大佬也十分鼓励我，感谢胡大佬。</p><p>当时报了ACM寒假集训，因为只要撑过七天就能进集训队，人一天一天地变少，第七天只剩下3个人，我，还有我的一个队友，也是当时新生赛的冠军-站神。之后集训队要求组队，站神在知道我新生赛爆零的情况，毅然决然地邀请我组队，我也欣然接受。当时这个决定改变了我ACM的历程，如果没有和他组队的话，可能我们寝室三个人就一个队了。还有一个人是他们班班长（简单带过~</p><p>就这样，第一届粉红毛毛兔集结了。</p><h3 id="大二"><a href="#大二" class="headerlink" title="大二"></a>大二</h3><p>大一暑假还没开始，班长大人就决定不打ACM了，现在只剩下两个人，找了当时大三的爽哥组成第二届粉红毛毛兔。</p><p>大二前的暑假开始了，（ACMer没有暑假）整个暑假经历了牛客多校和杭电多校两个自闭式训练，因为算法什么的都还没学，并且全国985、211学校基本都来了，所以我们多校成绩非常难看（不想回忆）。但是也很感谢多校的机会，让我成长了很多。</p><p>在之后的比赛，拿下了我第一块浙江省赛铜牌，ICPC区域赛济南站铜牌，ICPC西安邀请赛铜牌，还有好几块铁牌，并且很幸运地和彤哥一起参加了EC-final，也成功地打铁，其实每场都很有机会拿牌，我觉得原因出现在题刷的不够，参赛经验不够等等。</p><p>寒假的时候我和队友也成功地把codeforces账号刷到蓝名。大一选择了数学方向，大二更是学了图论、数据结构、dp等等（字符串gou都不学）。</p><h3 id="大三"><a href="#大三" class="headerlink" title="大三"></a>大三</h3><p>大三刚开始，因为爽哥大四了，需要找实习工作，所以就退队了，还差一位队友，找了yyds的fjh，fjh当时的acm成绩可能没有很出众，但是我能看出来“他很强”，事实来看，确实很强，因为他总能在比赛中带来惊喜。</p><p>重组队伍之后，也把队名改成了锟斤拷之烫（Runtime Error），也不知道为啥取的这个名字，队名总是出乎意料地产生了。</p><p>我们比赛基本集中在大三上学期，因为队伍里有两个要找工作，一个要考研，所以比赛能先打完就打完。</p><p>大三上总共拿了CCPC广州站银牌，ICPC沈阳站、南京站铜牌这样的几个牌，没想到的是，CCPC成绩居然能破校史记录，感谢fjh能很快地1发过了C，这样我有更多的时间去解决第四题。可惜fjh被沈阳制裁了。</p><h2 id="我的ACM成绩"><a href="#我的ACM成绩" class="headerlink" title="我的ACM成绩"></a>我的ACM成绩</h2><p>到目前为止，总共拿下了1块CCPC区域赛银牌，3块ICPC区域赛铜牌，1块ICPC邀请赛铜牌，1块浙江省赛铜牌，还有数不清的铁，寒假的重心会放在实习方向，明年还有区域赛，省赛，CCfinal等等比赛，未来在有可能拿到offer的情况下继续参加ACM竞赛。</p><p>（感谢pku给了我们第一块铜和第一块银，所以我能进北大吗？？？）</p><h1 id="写给新人"><a href="#写给新人" class="headerlink" title="写给新人"></a>写给新人</h1><h2 id="什么是ACM"><a href="#什么是ACM" class="headerlink" title="什么是ACM"></a>什么是ACM</h2><p>来自百度百科，国际大学生程序设计竞赛（英文全称：International Collegiate Programming Contest（简称<a href="https://baike.baidu.com/item/ICPC/10243">ICPC</a>））是由国际计算机协会（<a href="https://baike.baidu.com/item/ACM/64774">ACM</a>）主办的，一项旨在展示大学生创新能力、团队精神和在压力下编写程序、分析和解决问题能力的年度竞赛。经过近40年的发展，ACM国际大学生程序设计竞赛已经发展成为全球最具影响力的大学生程序设计竞赛，赛事由<a href="https://baike.baidu.com/item/AWS/16529930">AWS</a>、<a href="https://baike.baidu.com/item/%E5%8D%8E%E4%B8%BA/298705">华为</a>和<a href="https://baike.baidu.com/item/Jetbrains/7502758">Jetbrains</a> [5] 赞助，在北京大学设有ICPC北京总部，用于组织东亚区域赛 [6] 。</p><p>简称：三个人一台电脑，需要在5小时内解决10~13题。</p><h2 id="ACM能带来什么"><a href="#ACM能带来什么" class="headerlink" title="ACM能带来什么"></a>ACM能带来什么</h2><p>物质上来说，ACM能带来无寒暑假、无周末休闲时间、面对学业上的压力还要继续坚持下去。</p><p>精神上来说，我永远喜欢过题的快感、思维的巧妙、算法的智慧。</p><h3 id="知识"><a href="#知识" class="headerlink" title="知识"></a>知识</h3><p>举个例子，不打ACM的人，没有几个人会快速幂。但是对于ACMer，下面是我们能接触，并且部分都会的算法。</p><p><img src="/images/image-1638684503449.png" alt="file"></p><p>但这些只是我们应该会的，最基本的知识。这些知识带来的财富，我写一个项目的效率远超其他人，这就是差距。ACM的知识点，只要你未来是做计算机行业的，那么它一定会在每一个角落里发挥着它的作用。</p><h3 id="代码能力"><a href="#代码能力" class="headerlink" title="代码能力"></a>代码能力</h3><p>调试是写程序必不可少的步骤，有的人可能因为编译错误而烦恼，有的人可能因为各种bug而烦恼，而我们基本不需要debug，只需要简单测试证明即可。</p><h3 id="朋友圈"><a href="#朋友圈" class="headerlink" title="朋友圈"></a>朋友圈</h3><p>我是浙江工商大学的一名学生，通过ACM，在各种群聊中，因为兴趣相投，我能认识到很多大学的好友，比如广东工业大学、青岛大学等等，而且能经常和非常nb的人交流，什么是nb的人：可能是中国顶尖的人才（当然这些人基本都是清北浙大等等）、代表中国参加全球性竞赛的“神”。并且ACM在各大知名企业都非常有名，如果你拥有一块ACM铜牌，大厂简历没问题，如果拥有一块ACM银牌，进大厂的概率大大提升，如果拥有一块ACM金牌，全国500强没问题了，如果有用进world final的门票，世界500强随便挑。而对于正常学业而言，各位也应该知道你需要读多少年的书才有胆量往这些企业中投递一份简历。</p><h3 id="和清北复交同台竞技"><a href="#和清北复交同台竞技" class="headerlink" title="和清北复交同台竞技"></a>和清北复交同台竞技</h3><p>ACM竞赛是所有队伍在相同地点使用相同设备在相同的时间内解决相同的题目。</p><p>而你的对手则是来自全国的大学，对，北大清华每年都会来，而且非常重视。</p><p>ACM从来就没有院赛、校赛、省赛等等一大堆乱七八糟的东西，虽然他们确实存在但是他们并不是被官方承认的。ACM只有区域赛，（比如Asia-East东亚地区），区域总决赛（比如EC-finial，东亚地区总决赛），和世界总决赛（WF）。无论在哪个比赛，你都可能会遇到任何一个学校的队伍。所以在这样的比赛中，你可以很清楚的知道自己的水平在全地区范围内的位置，对自己的能力有一个更好的评估，能够看到外面更加广阔的天空。而不是拘泥于那么小的一个地区，争夺那么毫无意义的第一名。</p><h2 id="ACM和其他竞赛有什么不同"><a href="#ACM和其他竞赛有什么不同" class="headerlink" title="ACM和其他竞赛有什么不同"></a>ACM和其他竞赛有什么不同</h2><p>除了ACM以外，我也打过其他竞赛，比如数学竞赛，物理竞赛，数模等等。</p><p>ACM是比赛开始，中间5小时，结束之后奖项基本确定下来（根据排名），即时性非常高，并且没有任何主观的评定奖项。</p><p>而现如今的比如说互联网+，挑战杯、包括数模（可能会好点），在我看来基本都是ppt、论文大赛，获奖完全根据评委老师打分，非常的主观。</p><p>有人说，你有没参加过，你怎么知道这里面的含金量。</p><p>那就拿我自己来举例子：</p><p>首先ACM的含金量非常高，不断训练了两年只拿到过一块银牌。</p><p>而数学建模美赛，首先我没有任何基础，也没有参加任何培训，其次疫情原因，学校不让线下集训，所以一切在线上进行，线上老师要求写几场模拟赛，我们队伍由于各有各的事情，都没有参加，但是认真分析了几份优秀论文，最终情况是什么呢？整个学校没有队伍获得O奖，只有两支队伍获得F奖，我们就是其中一只队伍。我们有参加模拟赛吗？没有。我有基础吗？没有。但是我的两个队友是有基础的。但是我们为什么能拿到这样的奖项？因为最后交上去的只有一份论文而已。面对万份论文，老师真的会每份花很多时间观看吗，那必是不可能，所以有同学想要在数模比赛获奖，我想下面几点足够了：选比较客观的题目（这样结果就不重要了），指标越多越好、公式越多越好、图要越多越好（因为图片的视觉效果非常直观），论文的基本排版、格式等等。这样的一篇论文，甚至数据都可以伪造，我想一定能获奖。</p><h2 id="什么样的人适合ACM，什么样的人不适合ACM"><a href="#什么样的人适合ACM，什么样的人不适合ACM" class="headerlink" title="什么样的人适合ACM，什么样的人不适合ACM"></a>什么样的人适合ACM，什么样的人不适合ACM</h2><p>ACM竞赛是一个需要大量的时间去投入，但是到很久之后才会有结果的产出。简称高付出低回报。这和其他竞赛不同，数学建模通常你只需要很短的时间训练就能拿出成绩，而一个ACMer，在大三之前甚至可能都没有一点点成果。但是你在大一大二的投入终将会给你在大二下至大三上的时候带来丰富的回报。</p><p>这样的回报，需要愿意投资的人耐心投资才有可能赚得盆满钵满，一旦出现懈怠都有可能颗粒无收。<strong>耐心、专注、勤奋、自觉</strong>这些是一个ACMer必须要具备的因素。</p><h1 id="写给ACMer"><a href="#写给ACMer" class="headerlink" title="写给ACMer"></a>写给ACMer</h1><h2 id="关于训练"><a href="#关于训练" class="headerlink" title="关于训练"></a>关于训练</h2><p>我们是一只稳铜队伍（毕竟在诸神之战中存活过），但是想要冲击银牌需要看场次，银牌题如果是我们熟悉的那还可以，但如果没见过的就gg。</p><p>首先是每个人负责的算法部分：</p><p>我主要负责数据结构、动态规划，会数据结构、树上问题，，了解图论、计算几何，死也不学字符串。</p><p>yl主要负责数据结构、图论，树上问题，会字符串，动态规划，死也不学字符串。</p><p>fjh主要负责图论、搜索、动态规划，模拟、会树上问题。</p><p>个人的训练计划：</p><p>大一大二上主要是学习算法，不要学习unless algorithm，大二下主要是刷题，刷各种题型，因为知识点就那么多，题目却很多，那就是套路问题了。</p><p>大三需要练的是手速、思维、补题和回忆算法，所以codeforces是必不可少的。</p><p>我很反对无效刷题，当我们刷完一道题，明白这道题的方方面面。我自己目前刷题量是1900，而我的一个队友刷题量连我的一半都没有，但是我承认他比我强太多，每次比赛都是他给思路然后carry全场，而我只是一个无情的代码机器。有的人刷题量非常高，成绩也没有特别高，面对一道见过的题目，能很快的写出来，但是遇到一道全新的题目，却没有任何办法。这也就像我们学习一样，不能死学习，要活学活用。</p><p>队伍的训练计划：</p><p>每周都会单独开一场往年区域赛训练，并且实验室周末组织一场往年区域赛，这样我们队伍会保持每周2场。</p><p>有时间都会开开cf的模拟赛等等。</p><h2 id="关于赛中"><a href="#关于赛中" class="headerlink" title="关于赛中"></a>关于赛中</h2><p>首先是看题，看到一道题目一定要先看数据范围，因为往往都能根据数据范围来算出时间复杂度，然后读完题之后大概就知道用什么算法去解决。</p><p>在前期，签到题一定要快，如果够强的话，铜牌题也应当如此，可以尝试三开，除了在最后冲刺阶段，请务必尝试多开，即使排名倒数，一道题大概40min~1h一定要解决，千万不能死在一道题上，这个错误我深有体会。</p><p>队伍里要有一个很强的代码能力的队友，要学会听懂队友说的思路，然后在短时间内完成解题。</p><h1 id="完结撒花"><a href="#完结撒花" class="headerlink" title="完结撒花"></a>完结撒花</h1><p>ACM只是大学生的一门竞赛，虽然能在其中感受它的智慧，在以后的工作中也经常会接触到，但是他毕竟是一门竞赛，仅此而已，千万不要把它当作什么毕生追求，只要努力过，奋斗过，不管得到什么样的成绩，都要不后悔，因为竞赛的含义，有的人会成功，有的人会失败，不是所有人都能拿到自己想要的成绩，最终还是要回归自己的生活。</p><p>jujimeizuo@2021&#x2F;12&#x2F;5 14:10</p>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>ACM 对拍</title>
    <link href="/2021/11/30/output/acmduipai/index/"/>
    <url>/2021/11/30/output/acmduipai/index/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h1><ul><li>rand.cpp是随机化数据cpp</li><li>bl.cpp是暴力数据cpp</li><li>*.cpp是自己写的std</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs bash">g++ rand.cpp -o rand<br>g++ bl.cpp -o bl<br>g++ *.cpp -o std<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">true</span>; <span class="hljs-keyword">do</span><br>    ./rand&gt;<span class="hljs-keyword">in</span><br>    ./std&lt;<span class="hljs-keyword">in</span>&gt;std_out<br>    ./bl&lt;<span class="hljs-keyword">in</span>&gt;bl_out<br>    <span class="hljs-keyword">if</span> diff std_out bl_out; <span class="hljs-keyword">then</span><br>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;OK\n&quot;</span><br>    <span class="hljs-keyword">else</span><br>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nWA\n\n\n\n&quot;</span><br>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;data in: \n&quot;</span><br>        <span class="hljs-built_in">cat</span> <span class="hljs-keyword">in</span><br>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nstd_output: \n&quot;</span><br>        <span class="hljs-built_in">cat</span> std_out<br>        <span class="hljs-built_in">printf</span> <span class="hljs-string">&quot;\nbl_output: \n&quot;</span><br>        <span class="hljs-built_in">cat</span> bl_out<br>        <span class="hljs-built_in">exit</span> 0<br>    <span class="hljs-keyword">fi</span><br>        <span class="hljs-keyword">done</span><br></code></pre></td></tr></table></figure><h1 id="Window"><a href="#Window" class="headerlink" title="Window"></a>Window</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs bash">@<span class="hljs-built_in">echo</span> off<br>g++ rand.cpp -o rand<br>g++ std.cpp -o std<br>g++ sol.cpp -o sol<br><br>:ac<br>    rand %random% &gt; <span class="hljs-keyword">in</span><br>    sol &lt; <span class="hljs-keyword">in</span> &gt; out<br>    std &lt; <span class="hljs-keyword">in</span> &gt; ok<br>    <span class="hljs-built_in">fc</span> out ok<br><span class="hljs-keyword">if</span> not errorlevel 0 goto wa<br><span class="hljs-built_in">echo</span> ----------------OK<br>goto ac<br><br>:wa<br><span class="hljs-built_in">echo</span> ----------------WA------------------<br><br>pause<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>springboot整合redis的一个天坑</title>
    <link href="/2021/11/30/output/redisq/index/"/>
    <url>/2021/11/30/output/redisq/index/</url>
    
    <content type="html"><![CDATA[<p>若只配置下面的依赖：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure><p>则为出现：</p><p>Unsatisfied dependency expressed through field ‘redisTemplate‘；</p><p>这个不对，还必须加上 commons-pool2，修改以后是</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.commons<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>commons-pool2<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-data-redis<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>适合ACM竞赛的vimrc和 MyVimConf</title>
    <link href="/2021/11/25/output/vimrc/index/"/>
    <url>/2021/11/25/output/vimrc/index/</url>
    
    <content type="html"><![CDATA[<h1 id="适合ACM竞赛的vimrc"><a href="#适合ACM竞赛的vimrc" class="headerlink" title="适合ACM竞赛的vimrc"></a>适合ACM竞赛的vimrc</h1><p>涵盖了自动缩进，自动补全花括号，输入文件重定向等</p><p>.vimrc 比较短，真正需要手打的只有 8 行，一般可以在 30 秒左右敲完</p><ul><li>F9 是运行程序（从控制台读取输入）</li><li>F5 是运行程序（将同目录下 in 文件的内容作为输入，效果等于 freopen(“in”, “r”, stdin))</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">set</span> nu sts=4 ts=4 sw=4 cin<br>map &lt;F5&gt; :call CR()&lt;CR&gt;<br>func CR()<br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;w&quot;</span><br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;!clear &amp;&amp; g++ % -std=c++11 -W -o a &amp;&amp; ./a &lt; in&quot;</span><br>endfunc<br>map &lt;F9&gt; :call CRr()&lt;CR&gt;<br>func CRr()<br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;w&quot;</span><br>    <span class="hljs-built_in">exec</span> <span class="hljs-string">&quot;!clear &amp;&amp; g++ % -std=c++11 -W -o a &amp;&amp; ./a&quot;</span><br>endfunc<br>imap &#123;&lt;CR&gt; &#123;&lt;CR&gt;&#125;&lt;C-O&gt;O&lt;left&gt;&lt;right&gt;<br>syn on<br></code></pre></td></tr></table></figure><p>在 Normal 模式下，输入 :20vsp in 可以快速分屏并打开 in 文件以进行编辑</p><h2 id="分屏技巧"><a href="#分屏技巧" class="headerlink" title="分屏技巧"></a>分屏技巧</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vimrc">:sp # 上下分屏<br>:res y # 设置当前分屏高度为y<br>:vsp # 左右分屏<br>:vertical res x # 设置当前分屏宽度为x<br>Ctrl + w + hjkl # 先按Ctrl + w，然后再按hjkl在分屏之间移动<br>:e # 刷新当前文件<br>:e filename # 在当前窗口打开名字为filename的文件<br></code></pre></td></tr></table></figure><h1 id="我自己的vimrc配置-MyVimConf"><a href="#我自己的vimrc配置-MyVimConf" class="headerlink" title="我自己的vimrc配置 MyVimConf"></a>我自己的vimrc配置 MyVimConf</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-string">&quot; Color</span><br><span class="hljs-string">set t_Co=256</span><br><span class="hljs-string">syntax on</span><br><span class="hljs-string">&quot;</span> <span class="hljs-built_in">set</span> background=dark<br><br><span class="hljs-string">&quot; Line Numbers</span><br><span class="hljs-string">&quot;</span> <span class="hljs-built_in">set</span> relativenumber<br><span class="hljs-built_in">set</span> number<br><br><span class="hljs-string">&quot; Clipboard</span><br><span class="hljs-string">set clipboard=unnamed</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Make backspace work<br><span class="hljs-built_in">set</span> backspace=2<br><br><span class="hljs-string">&quot; Maps space to colon, time saver</span><br><span class="hljs-string">nmap &lt;space&gt; :</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Indentation<br><span class="hljs-built_in">set</span> tabstop=2<br><span class="hljs-built_in">set</span> expandtab<br><span class="hljs-built_in">set</span> shiftwidth=2<br><span class="hljs-built_in">set</span> autoindent<br><span class="hljs-string">&quot; set ignorecase</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Allows <span class="hljs-keyword">for</span> mouse scrolling<br><span class="hljs-built_in">set</span> mouse=a<br><br><span class="hljs-string">&quot; Highlight Current Line</span><br><span class="hljs-string">set cursorline</span><br><span class="hljs-string">highlight NERDTreeFile ctermfg=14</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Highlight All Search Pattern<br><span class="hljs-built_in">set</span> hlsearch<br><br><span class="hljs-built_in">let</span> g:ycm_global_ycm_extra_conf=<span class="hljs-string">&#x27;~/.vim/.ycm_extra_conf.py&#x27;</span><br><br><span class="hljs-built_in">let</span> g:ycm_confirm_extra_conf = 0<br><br><span class="hljs-string">&quot; set the runtime path to include Vundle and initialize</span><br><span class="hljs-string">call plug#begin(&#x27;~/.vim/plugged&#x27;)</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> YouCompleteme<br>Plug <span class="hljs-string">&#x27;valloric/youcompleteme&#x27;</span><br><br><span class="hljs-string">&quot; Color Schemes</span><br><span class="hljs-string">Plug &#x27;flazz/vim-colorschemes&#x27;</span><br><span class="hljs-string">Plug &#x27;joshdick/onedark.vim&#x27;</span><br><span class="hljs-string">&quot;</span>Use 24-bit (true-color) mode <span class="hljs-keyword">in</span> Vim/Neovim when outside tmux.<br><span class="hljs-string">&quot;If you&#x27;re using tmux version 2.2 or later, you can remove the outermost <span class="hljs-variable">$TMUX</span> check and use tmux&#x27;s 24-bit color support</span><br><span class="hljs-string">&quot;</span>(see &lt; http://sunaku.github.io/tmux-24bit-color.html<span class="hljs-comment">#usage &gt; for more information.)</span><br><span class="hljs-keyword">if</span> (empty(<span class="hljs-variable">$TMUX</span>))<br>  <span class="hljs-keyword">if</span> (has(<span class="hljs-string">&quot;nvim&quot;</span>))<br>    <span class="hljs-string">&quot;For Neovim 0.1.3 and 0.1.4 &lt; https://github.com/neovim/neovim/pull/2198 &gt;</span><br><span class="hljs-string">    let <span class="hljs-variable">$NVIM_TUI_ENABLE_TRUE_COLOR</span>=1</span><br><span class="hljs-string">  endif</span><br><span class="hljs-string">  &quot;</span>For Neovim &gt; 0.1.5 and Vim &gt; patch 7.4.1799 &lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 &gt;<br>  <span class="hljs-string">&quot;Based on Vim patch 7.4.1770 (`guicolors` option) &lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd &gt;</span><br><span class="hljs-string">  &quot;</span> &lt; https://github.com/neovim/neovim/wiki/Following-HEAD<span class="hljs-comment">#20160511 &gt;</span><br>  <span class="hljs-keyword">if</span> (has(<span class="hljs-string">&quot;termguicolors&quot;</span>))<br>    <span class="hljs-built_in">set</span> termguicolors<br>  endif<br>endif<br><br><span class="hljs-string">&quot; NERDTree</span><br><span class="hljs-string">Plug &#x27;scrooloose/nerdtree&#x27;</span><br><span class="hljs-string">map &lt;silent&gt; &lt;C-e&gt; :NERDTree&lt;CR&gt;</span><br><span class="hljs-string">map &lt;silent&gt; &lt;C-w&gt; :NERDTreeFind&lt;CR&gt;</span><br><span class="hljs-string">nmap &lt;leader&gt;nt :NERDTreeFind&lt;CR&gt;</span><br><span class="hljs-string">let NERDTreeShowBookmarks=1</span><br><span class="hljs-string">let NERDTreeIgnore=[&#x27;\.py[cd]$&#x27;, &#x27;\~$&#x27;, &#x27;\.swo$&#x27;, &#x27;\.swp$&#x27;, &#x27;^\.git$&#x27;, &#x27;^\.hg$&#x27;, &#x27;^\.svn$&#x27;, &#x27;\.bzr$&#x27;]</span><br><span class="hljs-string">let NERDTreeChDirMode=0</span><br><span class="hljs-string">let NERDTreeQuitOnOpen=1</span><br><span class="hljs-string">let NERDTreeMouseMode=2</span><br><span class="hljs-string">let NERDTreeShowHidden=1</span><br><span class="hljs-string">let NERDTreeKeepTreeInNewTab=1</span><br><span class="hljs-string">let g:nerdtree_tabs_open_on_gui_startup=0</span><br><span class="hljs-string">&quot;</span> NERDTrees File highlighting<br><span class="hljs-keyword">function</span>! NERDTreeHighlightFile(extension, <span class="hljs-built_in">fg</span>, <span class="hljs-built_in">bg</span>, guifg, guibg)<br><span class="hljs-built_in">exec</span> <span class="hljs-string">&#x27;autocmd FileType nerdtree highlight &#x27;</span> . a:extension .<span class="hljs-string">&#x27; ctermbg=&#x27;</span>. a:<span class="hljs-built_in">bg</span> .<span class="hljs-string">&#x27; ctermfg=&#x27;</span>. a:<span class="hljs-built_in">fg</span> .<span class="hljs-string">&#x27; guibg=&#x27;</span>. a:guibg .<span class="hljs-string">&#x27; guifg=&#x27;</span>. a:guifg<br><span class="hljs-built_in">exec</span> <span class="hljs-string">&#x27;autocmd FileType nerdtree syn match &#x27;</span> . a:extension .<span class="hljs-string">&#x27; #^\s\+.*&#x27;</span>. a:extension .<span class="hljs-string">&#x27;$#&#x27;</span><br>endfunction<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;jade&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;ini&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;md&#x27;</span>, <span class="hljs-string">&#x27;blue&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;#3366FF&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;yml&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;config&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;conf&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;json&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;yellow&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;styl&#x27;</span>, <span class="hljs-string">&#x27;cyan&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;cyan&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;css&#x27;</span>, <span class="hljs-string">&#x27;cyan&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;cyan&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;coffee&#x27;</span>, <span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;red&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;js&#x27;</span>, <span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;#ffa500&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;rb&#x27;</span>, <span class="hljs-string">&#x27;Red&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;#ffa500&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>au VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;php&#x27;</span>, <span class="hljs-string">&#x27;Magenta&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;#ff00ff&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>autocmd VimEnter * call NERDTreeHighlightFile(<span class="hljs-string">&#x27;jade&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;none&#x27;</span>, <span class="hljs-string">&#x27;green&#x27;</span>, <span class="hljs-string">&#x27;#151515&#x27;</span>)<br>highlight! <span class="hljs-built_in">link</span> NERDTreeFlags NERDTreeDir<br><br><span class="hljs-string">&quot; Airline</span><br><span class="hljs-string">Plug &#x27;vim-airline/vim-airline&#x27;</span><br><span class="hljs-string">Plug &#x27;vim-airline/vim-airline-themes&#x27;</span><br><span class="hljs-string">set laststatus=2</span><br><span class="hljs-string">let g:airline_left_sep = &#x27;&#x27;</span><br><span class="hljs-string">let g:airline_left_alt_sep = &#x27;&#x27;</span><br><span class="hljs-string">let g:airline_right_sep = &#x27;&#x27;</span><br><span class="hljs-string">let g:airline_right_alt_sep = &#x27;&#x27;</span><br><span class="hljs-string">let g:airline_symbols = &#123;&#125;</span><br><span class="hljs-string">let g:airline_symbols.branch = &#x27;&#x27;</span><br><span class="hljs-string">let g:airline_symbols.readonly = &#x27;&#x27;</span><br><span class="hljs-string">let g:airline_symbols.linenr = &#x27;☰&#x27;</span><br><span class="hljs-string">let g:airline_symbols.maxlinenr = &#x27;&#x27;</span><br><span class="hljs-string">let g:airline_symbols.dirty=&#x27;⚡&#x27;</span><br><span class="hljs-string">let g:airline_theme = &#x27;onedark&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Code Formatter<br><span class="hljs-string">&quot; Plug &#x27;Chiel92/vim-autoformat&#x27;</span><br><span class="hljs-string">&quot;</span> nnoremap &lt;Leader&gt;&lt;Leader&gt;a :Autoformat&lt;cr&gt;<br><br><span class="hljs-string">&quot; All of your Plugins must be added before the following line</span><br><span class="hljs-string">call plug#end()</span><br><span class="hljs-string">&quot;</span> Color<br><span class="hljs-built_in">set</span> t_Co=256<br>syntax on<br><span class="hljs-string">&quot; set background=dark</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Line Numbers<br><span class="hljs-string">&quot; set relativenumber</span><br><span class="hljs-string">set number</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Clipboard<br><span class="hljs-built_in">set</span> clipboard=unnamed<br><br><span class="hljs-string">&quot; Make backspace work</span><br><span class="hljs-string">set backspace=2</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Maps space to colon, time saver<br>nmap &lt;space&gt; :<br><br><span class="hljs-string">&quot; Indentation</span><br><span class="hljs-string">set tabstop=2</span><br><span class="hljs-string">set expandtab</span><br><span class="hljs-string">set shiftwidth=2</span><br><span class="hljs-string">set autoindent</span><br><span class="hljs-string">&quot;</span> <span class="hljs-built_in">set</span> ignorecase<br><br><span class="hljs-string">&quot; Allows for mouse scrolling</span><br><span class="hljs-string">set mouse=a</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Highlight Current Line<br><span class="hljs-built_in">set</span> cursorline<br>highlight NERDTreeFile ctermfg=14<br><br><span class="hljs-string">&quot; Highlight All Search Pattern</span><br><span class="hljs-string">set hlsearch</span><br><span class="hljs-string"></span><br><span class="hljs-string">let g:ycm_global_ycm_extra_conf=&#x27;~/.vim/.ycm_extra_conf.py&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">let g:ycm_confirm_extra_conf = 0</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> <span class="hljs-built_in">set</span> the runtime path to include Vundle and initialize<br>call plug<span class="hljs-comment">#begin(&#x27;~/.vim/plugged&#x27;)</span><br><br><span class="hljs-string">&quot; YouCompleteme</span><br><span class="hljs-string">Plug &#x27;valloric/youcompleteme&#x27;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Color Schemes<br>Plug <span class="hljs-string">&#x27;flazz/vim-colorschemes&#x27;</span><br>Plug <span class="hljs-string">&#x27;joshdick/onedark.vim&#x27;</span><br><span class="hljs-string">&quot;Use 24-bit (true-color) mode in Vim/Neovim when outside tmux.</span><br><span class="hljs-string">&quot;</span>If you<span class="hljs-string">&#x27;re using tmux version 2.2 or later, you can remove the outermost $TMUX check and use tmux&#x27;</span>s 24-bit color support<br><span class="hljs-string">&quot;(see &lt; http://sunaku.github.io/tmux-24bit-color.html#usage &gt; for more information.)</span><br><span class="hljs-string">if (empty(<span class="hljs-variable">$TMUX</span>))</span><br><span class="hljs-string">  if (has(&quot;</span>nvim<span class="hljs-string">&quot;))</span><br><span class="hljs-string">    &quot;</span>For Neovim 0.1.3 and 0.1.4 &lt; https://github.com/neovim/neovim/pull/2198 &gt;<br>    <span class="hljs-built_in">let</span> <span class="hljs-variable">$NVIM_TUI_ENABLE_TRUE_COLOR</span>=1<br>  endif<br>  <span class="hljs-string">&quot;For Neovim &gt; 0.1.5 and Vim &gt; patch 7.4.1799 &lt; https://github.com/vim/vim/commit/61be73bb0f965a895bfb064ea3e55476ac175162 &gt;</span><br><span class="hljs-string">  &quot;</span>Based on Vim patch 7.4.1770 (`guicolors` option) &lt; https://github.com/vim/vim/commit/8a633e3427b47286869aa4b96f2bfc1fe65b25cd &gt;<br>  <span class="hljs-string">&quot; &lt; https://github.com/neovim/neovim/wiki/Following-HEAD#20160511 &gt;</span><br><span class="hljs-string">  if (has(&quot;</span>termguicolors<span class="hljs-string">&quot;))</span><br><span class="hljs-string">    set termguicolors</span><br><span class="hljs-string">  endif</span><br><span class="hljs-string">endif</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> NERDTree<br>Plug <span class="hljs-string">&#x27;scrooloose/nerdtree&#x27;</span><br>map &lt;silent&gt; &lt;C-e&gt; :NERDTree&lt;CR&gt;<br>map &lt;silent&gt; &lt;C-w&gt; :NERDTreeFind&lt;CR&gt;<br>nmap &lt;leader&gt;nt :NERDTreeFind&lt;CR&gt;<br><span class="hljs-built_in">let</span> NERDTreeShowBookmarks=1<br><span class="hljs-built_in">let</span> NERDTreeIgnore=[<span class="hljs-string">&#x27;\.py[cd]$&#x27;</span>, <span class="hljs-string">&#x27;\~$&#x27;</span>, <span class="hljs-string">&#x27;\.swo$&#x27;</span>, <span class="hljs-string">&#x27;\.swp$&#x27;</span>, <span class="hljs-string">&#x27;^\.git$&#x27;</span>, <span class="hljs-string">&#x27;^\.hg$&#x27;</span>, <span class="hljs-string">&#x27;^\.svn$&#x27;</span>, <span class="hljs-string">&#x27;\.bzr$&#x27;</span>]<br><span class="hljs-built_in">let</span> NERDTreeChDirMode=0<br><span class="hljs-built_in">let</span> NERDTreeQuitOnOpen=1<br><span class="hljs-built_in">let</span> NERDTreeMouseMode=2<br><span class="hljs-built_in">let</span> NERDTreeShowHidden=1<br><span class="hljs-built_in">let</span> NERDTreeKeepTreeInNewTab=1<br><span class="hljs-built_in">let</span> g:nerdtree_tabs_open_on_gui_startup=0<br><span class="hljs-string">&quot; NERDTrees File highlighting</span><br><span class="hljs-string">function! NERDTreeHighlightFile(extension, fg, bg, guifg, guibg)</span><br><span class="hljs-string">exec &#x27;autocmd FileType nerdtree highlight &#x27; . a:extension .&#x27; ctermbg=&#x27;. a:bg .&#x27; ctermfg=&#x27;. a:fg .&#x27; guibg=&#x27;. a:guibg .&#x27; guifg=&#x27;. a:guifg</span><br><span class="hljs-string">exec &#x27;autocmd FileType nerdtree syn match &#x27; . a:extension .&#x27; #^\s\+.*&#x27;. a:extension .&#x27;<span class="hljs-variable">$#</span>&#x27;</span><br><span class="hljs-string">endfunction</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;jade&#x27;, &#x27;green&#x27;, &#x27;none&#x27;, &#x27;green&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;ini&#x27;, &#x27;yellow&#x27;, &#x27;none&#x27;, &#x27;yellow&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;md&#x27;, &#x27;blue&#x27;, &#x27;none&#x27;, &#x27;#3366FF&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;yml&#x27;, &#x27;yellow&#x27;, &#x27;none&#x27;, &#x27;yellow&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;config&#x27;, &#x27;yellow&#x27;, &#x27;none&#x27;, &#x27;yellow&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;conf&#x27;, &#x27;yellow&#x27;, &#x27;none&#x27;, &#x27;yellow&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;json&#x27;, &#x27;yellow&#x27;, &#x27;none&#x27;, &#x27;yellow&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;html&#x27;, &#x27;yellow&#x27;, &#x27;none&#x27;, &#x27;yellow&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;styl&#x27;, &#x27;cyan&#x27;, &#x27;none&#x27;, &#x27;cyan&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;css&#x27;, &#x27;cyan&#x27;, &#x27;none&#x27;, &#x27;cyan&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;coffee&#x27;, &#x27;Red&#x27;, &#x27;none&#x27;, &#x27;red&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;js&#x27;, &#x27;Red&#x27;, &#x27;none&#x27;, &#x27;#ffa500&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;rb&#x27;, &#x27;Red&#x27;, &#x27;none&#x27;, &#x27;#ffa500&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">au VimEnter * call NERDTreeHighlightFile(&#x27;php&#x27;, &#x27;Magenta&#x27;, &#x27;none&#x27;, &#x27;#ff00ff&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">autocmd VimEnter * call NERDTreeHighlightFile(&#x27;jade&#x27;, &#x27;green&#x27;, &#x27;none&#x27;, &#x27;green&#x27;, &#x27;#151515&#x27;)</span><br><span class="hljs-string">highlight! link NERDTreeFlags NERDTreeDir</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> Airline<br>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline&#x27;</span><br>Plug <span class="hljs-string">&#x27;vim-airline/vim-airline-themes&#x27;</span><br><span class="hljs-built_in">set</span> laststatus=2<br><span class="hljs-built_in">let</span> g:airline_left_sep = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_left_alt_sep = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_right_sep = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_right_alt_sep = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_symbols = &#123;&#125;<br><span class="hljs-built_in">let</span> g:airline_symbols.branch = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_symbols.readonly = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_symbols.linenr = <span class="hljs-string">&#x27;☰&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_symbols.maxlinenr = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_symbols.dirty=<span class="hljs-string">&#x27;⚡&#x27;</span><br><span class="hljs-built_in">let</span> g:airline_theme = <span class="hljs-string">&#x27;onedark&#x27;</span><br><br><span class="hljs-string">&quot; Code Formatter</span><br><span class="hljs-string">&quot;</span> Plug <span class="hljs-string">&#x27;Chiel92/vim-autoformat&#x27;</span><br><span class="hljs-string">&quot; nnoremap &lt;Leader&gt;&lt;Leader&gt;a :Autoformat&lt;cr&gt;</span><br><span class="hljs-string"></span><br><span class="hljs-string">&quot;</span> All of your Plugins must be added before the following line<br>call plug<span class="hljs-comment">#end()</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>acm</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>redis-持久化机制</title>
    <link href="/2021/09/28/output/rediscjh/index/"/>
    <url>/2021/09/28/output/rediscjh/index/</url>
    
    <content type="html"><![CDATA[<h1 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h1><p>由于redis是内存数据库，所以其数据断电易失，因此需要将数据保存到磁盘中。redis有两种持久化解决方案，分别是：RDB，AOF。</p><h1 id="快照-Snapshot-RDB"><a href="#快照-Snapshot-RDB" class="headerlink" title="快照(Snapshot) &#x2F; RDB"></a>快照(Snapshot) &#x2F; RDB</h1><p>这种方式可以将某一时刻的所有数据都写入硬盘中,当然这也是redis的默认开启持久化方式,保存的文件是以.rdb形式结尾的文件因此这种方式也称之为RDB方式。</p><p>在指定时间间隔后，将内存中的数据集快照写入数据库 ；在恢复时候，直接读取快照文件，进行数据的恢复 ； 默认情况下， Redis 将数据库快照保存在名字为 <strong>dump.rdb</strong>的二进制文件中。文件名可以在配置文件中进行自定义。</p><p><img src="/images/image-1632802020120.png" alt="file"></p><h2 id="RDB持久化的大致过程"><a href="#RDB持久化的大致过程" class="headerlink" title="RDB持久化的大致过程"></a>RDB持久化的大致过程</h2><p>在进行 RDB 的时候，redis 的主线程是不会做 io 操作的，主线程会 fork 一个子线程来完成该操作；</p><ol><li>Redis 调用forks。同时拥有父进程和子进程。</li><li>子进程将数据集写入到一个临时 RDB 文件中。</li><li>当子进程完成对新 RDB 文件的写入时，Redis 用新 RDB 文件替换原来的 RDB 文件，并删除旧的 RDB 文件。</li></ol><p><strong>这种工作方式使得 Redis 可以从写时复制（copy-on-write）机制中获益(因为是使用子进程进行写操作，而父进程依然可以接收来自客户端的请求。)</strong></p><h3 id="bgsave："><a href="#bgsave：" class="headerlink" title="bgsave："></a>bgsave：</h3><p>客户端可以使用BGSAVE命令来创建一个快照,当接收到客户端的BGSAVE命令时,redis会调用fork来创建一个子进程,然后子进程负责将快照写入磁盘中,而父进程则继续处理命令请求。 <strong>bgsave 是异步进行，进行持久化的时候，redis 还可以将继续响应客户端请求 ；</strong> <img src="/images/image-1632802962900.png" alt="file"></p><h3 id="save："><a href="#save：" class="headerlink" title="save："></a>save：</h3><p>使用 save 命令，会立刻对当前内存中的数据进行持久化 ,但是会阻塞，也就是不接受其他操作了； <strong>由于 save 命令是同步命令，会占用Redis的主进程。若Redis数据非常多时，save命令执行速度会非常慢，阻塞所有客户端的请求。</strong> <img src="/images/image-1632802954996.png" alt="file"></p><h3 id="shutdown："><a href="#shutdown：" class="headerlink" title="shutdown："></a>shutdown：</h3><p>当redis通过shutdown指令接收到关闭服务器的请求时,会执行一个save命令,阻塞所有的客户端,不再执行客户端执行发送的任何命令,并且在save命令执行完毕之后关闭服务器</p><h3 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h3><p><strong>SAVE命令并不常用,使用SAVE命令在快照创建完毕之前,redis处于阻塞状态,无法对外服务</strong></p><p>如果用户在redis.conf中设置了save配置选项,redis会在save选项条件满足之后自动触发一次BGSAVE命令,如果设置多个save配置选项,当任意一个save配置选项条件满足,redis也会触发一次BGSAVE命令</p><p><img src="/images/image-1632802337308.png" alt="file"></p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><ol><li>RDB文件紧凑，全量备份，非常适合用于进行备份和灾难恢复。</li><li>生成RDB文件的时候，redis主进程会fork()一个子进程来处理所有保存工作，主进程不需要进行任何磁盘IO操作。</li><li>RDB 在恢复大数据集时的速度比 AOF 的恢复速度要快。</li></ol><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ol><li>需要一定的时间间隔进程操作！如果redis意外宕机了，这个最后一次修改数据就没有的了！</li><li>fork进程的时候，会占用一定的内容空间！！</li></ol><h2 id="RDB触发机制"><a href="#RDB触发机制" class="headerlink" title="RDB触发机制"></a>RDB触发机制</h2><ol><li>save的规则满足的情况下，会自动触发rdb规则</li><li>执行 flushall 命令，也会触发我们的rdb规则！</li><li>退出redis，也会产生 rdb 文件！</li></ol><h2 id="配置生成快照名称和位置"><a href="#配置生成快照名称和位置" class="headerlink" title="配置生成快照名称和位置"></a>配置生成快照名称和位置</h2><ol><li>修改生成快照名称 dbfilename dump.rdb</li><li>修改生成位置 dir .&#x2F;</li></ol><p><img src="/images/image-1632802467233.png" alt="file"></p><h2 id="恢复rdb文件"><a href="#恢复rdb文件" class="headerlink" title="恢复rdb文件"></a>恢复rdb文件</h2><ol><li>只需要将rdb文件放在redis启动目录中，redis启动时自动检查dump.rdb恢复其中的数据。</li><li>查看其存在的位置</li></ol><p><img src="/images/image-1632802829210.png" alt="file"> 如果&#x2F;var&#x2F;lib&#x2F;redis这个目录存在dump.rdb文件，则启动时自动恢复数据。</p><h1 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h1><p>Append Only File</p><p>将我们所有的命令都记录下来，history，恢复的时候就把这个文件全部再执行一遍</p><h2 id="什么是AOF"><a href="#什么是AOF" class="headerlink" title="什么是AOF"></a>什么是AOF</h2><p>快照功能（RDB）并不是非常耐久（durable）： 如果 Redis 因为某些原因而造成故障停机， 那么服务器将丢失最近写入、以及未保存到快照中的那些数据。 从 1.1 版本开始， Redis 增加了一种完全耐久的持久化方式： AOF 持久化。</p><p><img src="/images/image-1632815754859.png" alt="file"></p><h2 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h2><p>这种方式可以将所有客户端执行的写命令记录到日志文件中,AOF持久化会将被执行的写命令写到AOF的文件末尾,以此来记录数据发生的变化,因此只要redis从头到尾执行一次AOF文件所包含的所有写命令,就可以恢复AOF文件的记录的数据集.</p><h2 id="开启AOF持久化"><a href="#开启AOF持久化" class="headerlink" title="开启AOF持久化"></a>开启AOF持久化</h2><p>在redis的默认配置中AOF持久化机制是没有开启的，需要在配置中开启</p><p><img src="/images/image-1632815844362.png" alt="file"></p><p>appendonly no yes则表示启用AOF</p><p>默认是不开启的，我们需要手动配置，然后重启redis，就可以生效了！</p><p>如果这个aof文件有错位，这时候redis是启动不起来的，我需要修改这个aof文件</p><p>redis给我们提供了一个工具redis-check-aof –fix</p><h2 id="日志追加频率"><a href="#日志追加频率" class="headerlink" title="日志追加频率"></a>日志追加频率</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">修改日志同步频率<br>- 修改appendfsync everysec|always|no 指定<br></code></pre></td></tr></table></figure><p><img src="/images/image-1632815884193.png" alt="file"></p><h2 id="AOF文件的重写"><a href="#AOF文件的重写" class="headerlink" title="AOF文件的重写"></a>AOF文件的重写</h2><h3 id="AOF带来的问题"><a href="#AOF带来的问题" class="headerlink" title="AOF带来的问题"></a>AOF带来的问题</h3><p>AOF的方式也同时带来了另一个问题。持久化文件会变的越来越大。例如我们调用incr test命令100次，文件中必须保存全部的100条命令，其实有99条都是多余的。因为要恢复数据库的状态其实文件中保存一条set test 100就够了。为了压缩aof的持久化文件Redis提供了AOF重写(ReWriter)机制。</p><h3 id="AOF重写"><a href="#AOF重写" class="headerlink" title="AOF重写"></a>AOF重写</h3><p>用来在一定程度上减小AOF文件的体积</p><h3 id="触发机制"><a href="#触发机制" class="headerlink" title="触发机制"></a>触发机制</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.客户端方式触发重写</span><br>- 执行BGREWRITEAOF命令  不会阻塞redis的服务<br><span class="hljs-comment"># 2.服务器配置方式自动触发</span><br>- 配置redis.conf中的auto-aof-rewrite-percentage选项 参加下图↓↓↓<br>- 如果设置auto-aof-rewrite-percentage值为100和auto-aof-rewrite-min-size 64mb,并且启用的AOF持久化时,那么当AOF文件体积大于64M,并且AOF文件的体积比上一次重写之后体积大了至少一倍(100%)时,会自动触发,如果重写过于频繁,用户可以考虑将auto-aof-rewrite-percentage设置为更大<br></code></pre></td></tr></table></figure><p><img src="/images/image-1632816040606.png" alt="file"></p><h3 id="重写原理"><a href="#重写原理" class="headerlink" title="重写原理"></a>重写原理</h3><p><strong>注意：重写aof文件的操作，并没有读取旧的aof文件，而是将整个内存中的数据库内容用命令的方式重写了一个新的aof文件,替换原有的文件这点和快照有点类似。</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 重写流程</span><br>- 1. redis调用fork ，现在有父子两个进程 子进程根据内存中的数据库快照，往临时文件中写入重建数据库状态的命令<br>- 2. 父进程继续处理client请求，除了把写命令写入到原来的aof文件中。同时把收到的写命令缓存起来。这样就能保证如果子进程重写失败的话并不会出问题。<br>- 3. 当子进程把快照内容写入已命令方式写到临时文件中后，子进程发信号通知父进程。然后父进程把缓存的写命令也写入到临时文件。<br>- 4. 现在父进程可以使用临时文件替换老的aof文件，并重命名，后面收到的写命令也开始往新的aof文件中追加。<br></code></pre></td></tr></table></figure><p><img src="/images/image-1632816192423.png" alt="file"></p><h2 id="优点-1"><a href="#优点-1" class="headerlink" title="优点"></a>优点</h2><ol><li>每一次修改都会同步，文件的完整性会更加好</li><li>没秒同步一次，可能会丢失一秒的数据</li><li>从不同步，效率最高</li></ol><h2 id="缺点-1"><a href="#缺点-1" class="headerlink" title="缺点"></a>缺点</h2><ol><li>相对于数据文件来说，aof远远大于rdb，修复速度比rdb慢！</li><li>Aof运行效率也要比rdb慢，所以我们redis默认的配置就是rdb持久化</li></ol><h1 id="如何选择哪种持久化方式"><a href="#如何选择哪种持久化方式" class="headerlink" title="如何选择哪种持久化方式"></a>如何选择哪种持久化方式</h1><p>一般来说， 如果想达到足以媲美 PostgreSQL 的数据安全性， 你应该同时使用两种持久化功能。</p><p>如果你非常关心你的数据， 但仍然可以承受数分钟以内的数据丢失， 那么你可以只使用 RDB 持久化。</p><p>有很多用户都只使用 AOF 持久化， 但并不推荐这种方式： 因为定时生成 RDB 快照（snapshot）非常便于进行数据库备份， 并且 RDB 恢复数据集的速度也要比 AOF 恢复的速度要快。</p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>redis-事务</title>
    <link href="/2021/09/26/output/redisshiwu/index/"/>
    <url>/2021/09/26/output/redisshiwu/index/</url>
    
    <content type="html"><![CDATA[<h1 id="redis的事务操作"><a href="#redis的事务操作" class="headerlink" title="redis的事务操作"></a>redis的事务操作</h1><p><strong>redis的单条命令保证原子性，但是redis的事务不保证原子性</strong></p><p>redis的事务没有隔离级别。redis事务实际上就是一组命令的集合，这些命令在事务中会被序列化，然后按照命令的先后顺序一次性全部执行，在执行的过程中不能被打断。 即：redis的事务在执行时是一次性，顺序性和排他性的</p><h3 id="开启事务：multi"><a href="#开启事务：multi" class="headerlink" title="开启事务：multi"></a>开启事务：multi</h3><h3 id="命令入队"><a href="#命令入队" class="headerlink" title="命令入队:"></a>命令入队:</h3><h3 id="执行事务-exec"><a href="#执行事务-exec" class="headerlink" title="执行事务:exec"></a>执行事务:exec</h3><p><img src="/images/image-1632644879581.png" alt="file"></p><h3 id="放弃事务：discard"><a href="#放弃事务：discard" class="headerlink" title="放弃事务：discard"></a>放弃事务：discard</h3><p><img src="/images/image-1632644930162.png" alt="file"></p><h2 id="事务异常"><a href="#事务异常" class="headerlink" title="事务异常"></a>事务异常</h2><p><strong>在开启事务后，如果编写的命令有语法错误，则会立即报错，且整个事务队列中的所有命令都不会执行.</strong></p><p><img src="/images/image-1632645058718.png" alt="file"></p><p><strong>如果在开启事务后，命令中没有语法错误，但是却有运行错误，即命令能够成功入队，但是不能够执行，则在事务提交后只有该命令抛错，其他命令可以正常执行。</strong></p><p><img src="/images/image-1632645139695.png" alt="file"></p><h2 id="redis的乐观锁"><a href="#redis的乐观锁" class="headerlink" title="redis的乐观锁"></a>redis的乐观锁</h2><ul><li>乐观锁：就是它会认为所有的事务都不会失败，因此它不会给事务上锁。它只会在更新的时候判断在此期间是否有人修改过数据</li><li>悲观锁：它认为所有的事务都会执行失败，因此做任何事情它都会加锁，这样是及其影响效率的。</li></ul><h3 id="redis的乐观锁实现命令：watch"><a href="#redis的乐观锁实现命令：watch" class="headerlink" title="redis的乐观锁实现命令：watch"></a>redis的乐观锁实现命令：watch</h3><h4 id="单线程下运行："><a href="#单线程下运行：" class="headerlink" title="单线程下运行："></a>单线程下运行：</h4><p><img src="/images/image-1632645356164.png" alt="file"></p><h4 id="多线程修改值"><a href="#多线程修改值" class="headerlink" title="多线程修改值:"></a>多线程修改值:</h4><p><img src="/images/image-1632645487019.png" alt="file"></p><p><img src="/images/image-1632645565809.png" alt="file"></p><p><img src="/images/image-1632645644690.png" alt="file"></p><h4 id="如果事务执行失败，需要先解锁，再加锁，解锁命令为：unwatch"><a href="#如果事务执行失败，需要先解锁，再加锁，解锁命令为：unwatch" class="headerlink" title="如果事务执行失败，需要先解锁，再加锁，解锁命令为：unwatch"></a>如果事务执行失败，需要先解锁，再加锁，解锁命令为：unwatch</h4>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>rediss-数据类型</title>
    <link href="/2021/09/24/output/redisleixing/index/"/>
    <url>/2021/09/24/output/redisleixing/index/</url>
    
    <content type="html"><![CDATA[<h1 id="1-NoSQL"><a href="#1-NoSQL" class="headerlink" title="1. NoSQL"></a>1. NoSQL</h1><p>NoSQL(Not Only SQL )，意即不仅仅是SQL, 泛指非关系型的数据库。Nosql这个技术门类,早期就有人提出,发展至2009年趋势越发高涨。</p><h2 id="1-1-单机Mysql时代"><a href="#1-1-单机Mysql时代" class="headerlink" title="1.1 单机Mysql时代"></a>1.1 单机Mysql时代</h2><p><img src="/images/image-1632646360378.png" alt="file"></p><h2 id="1-2-Memcached-缓存-Mysql-垂直拆分（读写分离）"><a href="#1-2-Memcached-缓存-Mysql-垂直拆分（读写分离）" class="headerlink" title="1.2 Memcached(缓存) + Mysql + 垂直拆分（读写分离）"></a>1.2 Memcached(缓存) + Mysql + 垂直拆分（读写分离）</h2><p>网站80%的情况都是在读，每次都要去查询数据库的话就十分的麻烦！所以说我们希望减轻数据库的压力，我们可以使用缓存来保证效率！ <img src="/images/image-1632646410269.png" alt="file"></p><h2 id="1-3-分库分表-水平拆分-Mysql集群"><a href="#1-3-分库分表-水平拆分-Mysql集群" class="headerlink" title="1.3 分库分表 + 水平拆分 + Mysql集群"></a>1.3 分库分表 + 水平拆分 + Mysql集群</h2><p><img src="/images/image-1632646422141.png" alt="file"></p><h2 id="1-4-如今最近的年代"><a href="#1-4-如今最近的年代" class="headerlink" title="1.4 如今最近的年代"></a>1.4 如今最近的年代</h2><p><img src="/images/image-1632646442039.png" alt="file"></p><h1 id="2-为什么是NoSQL"><a href="#2-为什么是NoSQL" class="headerlink" title="2. 为什么是NoSQL"></a>2. 为什么是NoSQL</h1><p><strong>NoSQL &#x3D; Not Only SQL（不仅仅是SQL）</strong></p><p>Not Only Structured Query Language</p><p>关系型数据库：列+行，同一个表下数据的结构是一样的。</p><p>非关系型数据库：数据存储没有固定的格式，并且可以进行横向扩展。</p><p>NoSQL泛指非关系型数据库，随着web2.0互联网的诞生，传统的关系型数据库很难对付web2.0时代！尤其是超大规模的高并发的社区，暴露出来很多难以克服的问题，NoSQL在当今大数据环境下发展的十分迅速，Redis是发展最快的。</p><p>随着互联网网站的兴起，传统的关系数据库在应付动态网站，特别是超大规模和高并发的纯动态网站已经显得力不从心，暴露了很多难以克服的问题。如商城网站中对<strong>商品数据频繁查询</strong>、<strong>对热搜商品的排行统计</strong>、<strong>订单超时问题</strong>、以及<strong>微信朋友圈（音频，视频）存储</strong>等相关使用传统的关系型数据库实现就显得非常复杂，虽然能实现相应功能但是在性能上却不是那么乐观。nosql这个技术门类的出现，更好的解决了这些问题，它告诉了世界不仅仅是sql。</p><p><strong>了解：3V + 3高</strong></p><p>大数据时代的3V ：主要是描述问题的</p><ol><li>海量Velume</li><li>多样Variety</li><li>实时Velocity</li></ol><p>大数据时代的3高 ： 主要是对程序的要求</p><ol><li>高并发</li><li>高可扩</li><li>高性能</li></ol><h1 id="3-NoSQL的四大分类"><a href="#3-NoSQL的四大分类" class="headerlink" title="3. NoSQL的四大分类"></a>3. NoSQL的四大分类</h1><h2 id="3-1-键值-Key-Value-存储数据库"><a href="#3-1-键值-Key-Value-存储数据库" class="headerlink" title="3.1 键值(Key-Value)存储数据库"></a>3.1 键值(Key-Value)存储数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.说明: </span><br>- 这一类数据库主要会使用到一个哈希表，这个表中有一个特定的键和一个指针指向特定的数据。<br><span class="hljs-comment"># 2.特点</span><br>- Key/value模型对于IT系统来说的优势在于简单、易部署。  <br>- 但是如果DBA只对部分值进行查询或更新的时候，Key/value就显得效率低下了。<br><span class="hljs-comment"># 3.相关产品</span><br>- Tokyo Cabinet/Tyrant,<br>- Redis<br>- SSDB<br>- Voldemort <br>- Oracle BDB<br></code></pre></td></tr></table></figure><h2 id="3-2-列存储数据库"><a href="#3-2-列存储数据库" class="headerlink" title="3.2 列存储数据库"></a>3.2 列存储数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.说明</span><br>- 这部分数据库通常是用来应对分布式存储的海量数据。<br><span class="hljs-comment"># 2.特点</span><br>- 键仍然存在，但是它们的特点是指向了多个列。这些列是由列家族来安排的。<br><span class="hljs-comment"># 3.相关产品</span><br>- Cassandra、HBase、Riak.<br></code></pre></td></tr></table></figure><h2 id="3-3-文档型数据库"><a href="#3-3-文档型数据库" class="headerlink" title="3.3 文档型数据库"></a>3.3 文档型数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.说明</span><br>- 文档型数据库的灵感是来自于Lotus Notes办公软件的，而且它同第一种键值存储相类似该类型的数据模型是版本化的文档，半结构化的文档以特定的格式存储，比如JSON。文档型数据库可 以看作是键值数据库的升级版，允许之间嵌套键值。而且文档型数据库比键值数据库的查询效率更高<br><span class="hljs-comment"># 2.特点</span><br>- 以文档形式存储<br><span class="hljs-comment"># 3.相关产品</span><br>- MongoDB、CouchDB、 MongoDb(4.x). 国内也有文档型数据库SequoiaDB，已经开源。  <br></code></pre></td></tr></table></figure><h2 id="3-4-图形-Graph-数据库"><a href="#3-4-图形-Graph-数据库" class="headerlink" title="3.4 图形(Graph)数据库"></a>3.4 图形(Graph)数据库</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># 1.说明</span><br>- 图形结构的数据库同其他行列以及刚性结构的SQL数据库不同，它是使用灵活的图形模型，并且能够扩展到多个服务器上。<br>- NoSQL数据库没有标准的查询语言(SQL)，因此进行数据库查询需要制定数据模型。许多NoSQL数据库都有REST式的数据接口或者查询API。<br><span class="hljs-comment"># 2.特点</span><br><span class="hljs-comment"># 3.相关产品</span><br>- Neo4J、InfoGrid、 Infinite Graph、<br></code></pre></td></tr></table></figure><h1 id="4-NoSQL应用场景"><a href="#4-NoSQL应用场景" class="headerlink" title="4. NoSQL应用场景"></a>4. NoSQL应用场景</h1><ul><li>数据模型比较简单</li><li>需要灵活性更强的IT系统</li><li>对数据库性能要求较高</li><li>不需要高度的数据一致性</li></ul><h1 id="5-什么是Redis"><a href="#5-什么是Redis" class="headerlink" title="5. 什么是Redis"></a>5. 什么是Redis</h1><p><img src="/images/image-1632473946054.png" alt="file"></p><p>Redis 开源 遵循BSD 基于内存数据存储 被用于作为 数据库 缓存 消息中间件 <strong>redis是一个内存型的数据库</strong></p><h1 id="6-Redis特点"><a href="#6-Redis特点" class="headerlink" title="6. Redis特点"></a>6. Redis特点</h1><ul><li>Redis是一个高性能key&#x2F;value内存型数据库</li><li>Redis支持丰富的数据类型</li><li>Redis支持持久化</li><li>Redis单线程,单进程</li></ul><p><strong>单线程不一定比多线程慢，在CPU中，多线程需要跳转，而单线程不需要，减少了跳转的消耗，所以在某些场景里单线程可能比多线程快。</strong></p><h1 id="7-Ridis安装"><a href="#7-Ridis安装" class="headerlink" title="7. Ridis安装"></a>7. Ridis安装</h1><p>略</p><h1 id="8-redis常用命令"><a href="#8-redis常用命令" class="headerlink" title="8. redis常用命令"></a>8. redis常用命令</h1><h2 id="8-1-set-get命令，存值，取值"><a href="#8-1-set-get命令，存值，取值" class="headerlink" title="8.1 set get命令，存值，取值"></a>8.1 set get命令，存值，取值</h2><p><img src="/images/image-1632474345917.png" alt="file"></p><h2 id="8-2-切换数据库，redis默认有16个数据库，默认使用0号数据库，可以通过select切换"><a href="#8-2-切换数据库，redis默认有16个数据库，默认使用0号数据库，可以通过select切换" class="headerlink" title="8.2 切换数据库，redis默认有16个数据库，默认使用0号数据库，可以通过select切换"></a>8.2 切换数据库，redis默认有16个数据库，默认使用0号数据库，可以通过select切换</h2><p><img src="/images/image-1632474418121.png" alt="file"></p><p><img src="/images/image-1632474452155.png" alt="file"></p><h2 id="8-3-清空当前数据库：flushdb-清空所有数据库：flushall"><a href="#8-3-清空当前数据库：flushdb-清空所有数据库：flushall" class="headerlink" title="8.3 清空当前数据库：flushdb,清空所有数据库：flushall"></a>8.3 清空当前数据库：flushdb,清空所有数据库：flushall</h2><p><img src="/images/image-1632474513302.png" alt="file"></p><h2 id="8-4-查询所有key-keys"><a href="#8-4-查询所有key-keys" class="headerlink" title="8.4 查询所有key: keys*"></a>8.4 查询所有key: keys*</h2><p><img src="/images/image-1632474553482.png" alt="file"></p><h2 id="8-5-查询数据库的大小：dbsize"><a href="#8-5-查询数据库的大小：dbsize" class="headerlink" title="8.5 查询数据库的大小：dbsize"></a>8.5 查询数据库的大小：dbsize</h2><p><img src="/images/image-1632474583601.png" alt="file"></p><h2 id="8-6-查看key是否存在：exists-keyName-存在返回1，否则返回0"><a href="#8-6-查看key是否存在：exists-keyName-存在返回1，否则返回0" class="headerlink" title="8.6 查看key是否存在：exists keyName,存在返回1，否则返回0"></a>8.6 查看key是否存在：exists keyName,存在返回1，否则返回0</h2><p><img src="/images/image-1632474622298.png" alt="file"></p><h2 id="8-7-移除Key-move-keyName-1"><a href="#8-7-移除Key-move-keyName-1" class="headerlink" title="8.7 移除Key: move keyName 1"></a>8.7 移除Key: move keyName 1</h2><p><img src="/images/image-1632474665561.png" alt="file"></p><h2 id="8-8-为key设置过期时间-expire-keyName-timeout"><a href="#8-8-为key设置过期时间-expire-keyName-timeout" class="headerlink" title="8.8 为key设置过期时间: expire keyName timeout"></a>8.8 为key设置过期时间: expire keyName timeout</h2><p><img src="/images/image-1632474717857.png" alt="file"></p><h2 id="8-9-查看key的剩余存活时间：ttl-keyName"><a href="#8-9-查看key的剩余存活时间：ttl-keyName" class="headerlink" title="8.9 查看key的剩余存活时间：ttl keyName"></a>8.9 查看key的剩余存活时间：ttl keyName</h2><p><img src="/images/image-1632474728589.png" alt="file"></p><h2 id="8-10-查看key的类型：type-keyName"><a href="#8-10-查看key的类型：type-keyName" class="headerlink" title="8.10 查看key的类型：type keyName"></a>8.10 查看key的类型：type keyName</h2><p><img src="/images/image-1632474775307.png" alt="file"></p><h1 id="9-String详解"><a href="#9-String详解" class="headerlink" title="9. String详解"></a>9. String详解</h1><p><img src="/images/image-1632643699298.png" alt="file"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs bash"><br>| 命令                        | 说明                      |<br>| ------------------------- | ----------------------- |<br>| <span class="hljs-built_in">set</span>                       | 设置一个key/value           |<br>| get                       | 根据key获得对应的value         |<br>| mset                      | 一次设置多个key value         |<br>| mget                      | 一次获得多个key的value         |<br>| getset                    | 获得原始key的值，同时设置新值        |<br>| strlen                    | 获得对应key存储value的长度       |<br>| append                    | 为对应key的value追加内容        |<br>| getrange 索引0开始            | 截取value的内容              |<br>| setex                     | 设置一个key存活的有效期（秒）        |<br>| psetex                    | 设置一个key存活的有效期（毫秒）       |<br>| setnx                     | 存在不做任何操作,不存在添加          |<br>| msetnx原子操作(只要有一个存在不做任何操作) | 可以同时设置多个key,只有有一个存在都不保存 |<br>| decr                      | 进行数值类型的-1操作             |<br>| decrby                    | 根据提供的数据进行减法操作           |<br>| Incr                      | 进行数值类型的+1操作             |<br>| incrby                    | 根据提供的数据进行加法操作           |<br>| Incrbyfloat               | 根据提供的数据加入浮点数            |<br></code></pre></td></tr></table></figure><h2 id="9-1-strlen-求value的长度，append：追加"><a href="#9-1-strlen-求value的长度，append：追加" class="headerlink" title="9.1 strlen:求value的长度，append：追加"></a>9.1 strlen:求value的长度，append：追加</h2><p><img src="/images/image-1632475047844.png" alt="file"></p><h2 id="9-2-自增-自减操作：incr-incrby-decr-decrby"><a href="#9-2-自增-自减操作：incr-incrby-decr-decrby" class="headerlink" title="9.2 自增,自减操作：incr incrby decr decrby"></a>9.2 自增,自减操作：incr incrby decr decrby</h2><p><img src="/images/image-1632475096207.png" alt="file"></p><h2 id="9-3-字符串的范围操作：getrange-setrange"><a href="#9-3-字符串的范围操作：getrange-setrange" class="headerlink" title="9.3 字符串的范围操作：getrange,setrange"></a>9.3 字符串的范围操作：getrange,setrange</h2><p><img src="/images/image-1632475184254.png" alt="file"></p><h2 id="9-4-设置过期时间：setex（如果存在Key则覆盖，不存在则创建），setnx-如果不存在就设置"><a href="#9-4-设置过期时间：setex（如果存在Key则覆盖，不存在则创建），setnx-如果不存在就设置" class="headerlink" title="9.4 设置过期时间：setex（如果存在Key则覆盖，不存在则创建），setnx(如果不存在就设置)"></a>9.4 设置过期时间：setex（如果存在Key则覆盖，不存在则创建），setnx(如果不存在就设置)</h2><p><img src="/images/image-1632475254467.png" alt="file"></p><h2 id="9-5-批量设置和获取值：mset-mget-msetnx-操作为原子性，要么都成功，要么都失败"><a href="#9-5-批量设置和获取值：mset-mget-msetnx-操作为原子性，要么都成功，要么都失败" class="headerlink" title="9.5 批量设置和获取值：mset,mget, msetnx(操作为原子性，要么都成功，要么都失败)"></a>9.5 批量设置和获取值：mset,mget, msetnx(操作为原子性，要么都成功，要么都失败)</h2><p><img src="/images/image-1632475380084.png" alt="file"></p><h2 id="9-6-存取对象"><a href="#9-6-存取对象" class="headerlink" title="9.6 存取对象"></a>9.6 存取对象</h2><p><img src="/images/image-1632475484205.png" alt="file"></p><h2 id="9-7-组合操作：getset先获取再设置-如果不存在就返回nil"><a href="#9-7-组合操作：getset先获取再设置-如果不存在就返回nil" class="headerlink" title="9.7 组合操作：getset先获取再设置,如果不存在就返回nil"></a>9.7 组合操作：getset先获取再设置,如果不存在就返回nil</h2><p><img src="/images/image-1632475553716.png" alt="file"></p><blockquote><p>String类似的使用场景：value除了是我们的字符串还可以是我们的数字！</p><ul><li>计数器</li><li>统计多单位的数量</li><li>粉丝数</li><li>对象缓存存储</li></ul></blockquote><h1 id="10-list详解"><a href="#10-list详解" class="headerlink" title="10. list详解"></a>10. list详解</h1><p>list的命令都是l开头,list 列表 相当于java中list 集合 特点 元素有序 且 可以重复</p><p><img src="/images/image-1632643911652.png" alt="file"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs bash">| 命令      | 说明                    |<br>| ------- | --------------------- |<br>| lpush   | 将某个值加入到一个key列表头部      |<br>| lpushx  | 同lpush,但是必须要保证这个key存在 |<br>| rpush   | 将某个值加入到一个key列表末尾      |<br>| rpushx  | 同rpush,但是必须要保证这个key存在 |<br>| lpop    | 返回和移除列表左边的第一个元素       |<br>| rpop    | 返回和移除列表右边的第一个元素       |<br>| lrange  | 获取某一个下标区间内的元素         |<br>| llen    | 获取列表元素个数              |<br>| lset    | 设置某一个指定索引的值(索引必须存在)   |<br>| lindex  | 获取某一个指定索引位置的元素        |<br>| lrem    | 删除重复元素                |<br>| ltrim   | 保留列表中特定区间内的元素         |<br>| linsert | 在某一个元素之前，之后插入新元素      |<br></code></pre></td></tr></table></figure><h2 id="10-1-左插：lpush-左删：lpop"><a href="#10-1-左插：lpush-左删：lpop" class="headerlink" title="10.1 左插：lpush,左删：lpop"></a>10.1 左插：lpush,左删：lpop</h2><p><img src="/images/image-1632475948773.png" alt="file"></p><h2 id="10-2-右插：rpush-右删：rpop"><a href="#10-2-右插：rpush-右删：rpop" class="headerlink" title="10.2 右插：rpush,右删：rpop"></a>10.2 右插：rpush,右删：rpop</h2><p><img src="/images/image-1632476072915.png" alt="file"></p><h2 id="10-3-获取列表元素：lrange"><a href="#10-3-获取列表元素：lrange" class="headerlink" title="10.3 获取列表元素：lrange"></a>10.3 获取列表元素：lrange</h2><p><img src="/images/image-1632476697115.png" alt="file"></p><h2 id="10-4-通过下标获取元素：lindex"><a href="#10-4-通过下标获取元素：lindex" class="headerlink" title="10.4 通过下标获取元素：lindex"></a>10.4 通过下标获取元素：lindex</h2><p><img src="/images/image-1632476474867.png" alt="file"></p><h2 id="10-5-获取列表长度：llen"><a href="#10-5-获取列表长度：llen" class="headerlink" title="10.5 获取列表长度：llen"></a>10.5 获取列表长度：llen</h2><p><img src="/images/image-1632476522194.png" alt="file"></p><h2 id="10-6-移除具体的值所在的键值对-lrem-列表-移除几个-移除的具体value"><a href="#10-6-移除具体的值所在的键值对-lrem-列表-移除几个-移除的具体value" class="headerlink" title="10.6 移除具体的值所在的键值对:lrem 列表 移除几个 移除的具体value"></a>10.6 移除具体的值所在的键值对:lrem 列表 移除几个 移除的具体value</h2><p><img src="/images/image-1632476605108.png" alt="file"></p><h2 id="10-7-截取操作：ltrim-列表-截取的开始下标-截取的结束下标"><a href="#10-7-截取操作：ltrim-列表-截取的开始下标-截取的结束下标" class="headerlink" title="10.7 截取操作：ltrim 列表 截取的开始下标 截取的结束下标"></a>10.7 截取操作：ltrim 列表 截取的开始下标 截取的结束下标</h2><p><img src="/images/image-1632476724171.png" alt="file"></p><h2 id="10-8-rpoplpush-移除列表中的最后一个元素并将这个元素放到一个新的列表中"><a href="#10-8-rpoplpush-移除列表中的最后一个元素并将这个元素放到一个新的列表中" class="headerlink" title="10.8 rpoplpush:移除列表中的最后一个元素并将这个元素放到一个新的列表中"></a>10.8 rpoplpush:移除列表中的最后一个元素并将这个元素放到一个新的列表中</h2><p><img src="/images/image-1632476771483.png" alt="file"></p><h2 id="10-9-判断列表是否存在：EXISTS-list"><a href="#10-9-判断列表是否存在：EXISTS-list" class="headerlink" title="10.9 判断列表是否存在：EXISTS list"></a>10.9 判断列表是否存在：EXISTS list</h2><p><img src="/images/image-1632476803379.png" alt="file"></p><h2 id="10-10-lset-更新列表中指定下标的元素的value-前提是该下标必须有值，否则报错"><a href="#10-10-lset-更新列表中指定下标的元素的value-前提是该下标必须有值，否则报错" class="headerlink" title="10.10 lset:更新列表中指定下标的元素的value,前提是该下标必须有值，否则报错"></a>10.10 lset:更新列表中指定下标的元素的value,前提是该下标必须有值，否则报错</h2><p><img src="/images/image-1632476840575.png" alt="file"></p><h2 id="10-11-在列表中插入值：前插和后插：linsert"><a href="#10-11-在列表中插入值：前插和后插：linsert" class="headerlink" title="10.11 在列表中插入值：前插和后插：linsert"></a>10.11 在列表中插入值：前插和后插：linsert</h2><p><img src="/images/image-1632476896464.png" alt="file"></p><h1 id="11-set详解"><a href="#11-set详解" class="headerlink" title="11. set详解"></a>11. set详解</h1><p>set是无序不重复集合，set命令都是s开头 <img src="/images/image-1632643954408.png" alt="file"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs bash">| 命令          | 说明                        |<br>| ----------- | ------------------------- |<br>| sadd        | 为集合添加元素                   |<br>| smembers    | 显示集合中所有元素 无序              |<br>| scard       | 返回集合中元素的个数                |<br>| spop        | 随机返回一个元素 并将元素在集合中删除       |<br>| smove       | 从一个集合中向另一个集合移动元素 必须是同一种类型 |<br>| srem        | 从集合中删除一个元素                |<br>| sismember   | 判断一个集合中是否含有这个元素           |<br>| srandmember | 随机返回元素                    |<br>| sdiff       | 去掉第一个集合中其它集合含有的相同元素       |<br>| sinter      | 求交集                       |<br>| sunion      | 求和集                       |<br></code></pre></td></tr></table></figure><h2 id="11-1-添加：sadd"><a href="#11-1-添加：sadd" class="headerlink" title="11.1 添加：sadd"></a>11.1 添加：sadd</h2><p><img src="/images/image-1632477064797.png" alt="file"></p><h2 id="11-2-查看所有-smembers"><a href="#11-2-查看所有-smembers" class="headerlink" title="11.2 查看所有: smembers"></a>11.2 查看所有: smembers</h2><p><img src="/images/image-1632477127825.png" alt="file"></p><h2 id="11-3-查询set的元素个数：scard"><a href="#11-3-查询set的元素个数：scard" class="headerlink" title="11.3 查询set的元素个数：scard"></a>11.3 查询set的元素个数：scard</h2><p><img src="/images/image-1632477143763.png" alt="file"></p><h2 id="11-4-判断set中是否存在某元素：sismember"><a href="#11-4-判断set中是否存在某元素：sismember" class="headerlink" title="11.4 判断set中是否存在某元素：sismember"></a>11.4 判断set中是否存在某元素：sismember</h2><p><img src="/images/image-1632477172245.png" alt="file"></p><h2 id="11-5-移除某个元素：srem"><a href="#11-5-移除某个元素：srem" class="headerlink" title="11.5 移除某个元素：srem"></a>11.5 移除某个元素：srem</h2><p><img src="/images/image-1632477185068.png" alt="file"></p><h2 id="11-6-随机抽取一个元素：SRANDMEMBER"><a href="#11-6-随机抽取一个元素：SRANDMEMBER" class="headerlink" title="11.6 随机抽取一个元素：SRANDMEMBER"></a>11.6 随机抽取一个元素：SRANDMEMBER</h2><p><img src="/images/image-1632477211405.png" alt="file"></p><h2 id="11-7-随机移除一个元素：spop"><a href="#11-7-随机移除一个元素：spop" class="headerlink" title="11.7 随机移除一个元素：spop"></a>11.7 随机移除一个元素：spop</h2><p><img src="/images/image-1632477222068.png" alt="file"></p><h2 id="11-8-将一个集合中的元素移动到另一个集合中：smove"><a href="#11-8-将一个集合中的元素移动到另一个集合中：smove" class="headerlink" title="11.8 将一个集合中的元素移动到另一个集合中：smove"></a>11.8 将一个集合中的元素移动到另一个集合中：smove</h2><p><img src="/images/image-1632477296157.png" alt="file"></p><h2 id="11-9-集合之间求交并补集：sinter-sunite-sdiff"><a href="#11-9-集合之间求交并补集：sinter-sunite-sdiff" class="headerlink" title="11.9 集合之间求交并补集：sinter sunite sdiff"></a>11.9 集合之间求交并补集：sinter sunite sdiff</h2><p><img src="/images/image-1632477331468.png" alt="file"></p><h3 id="差集sdiff"><a href="#差集sdiff" class="headerlink" title="差集sdiff"></a>差集sdiff</h3><p><img src="/images/image-1632477435541.png" alt="file"></p><h3 id="交集sinter"><a href="#交集sinter" class="headerlink" title="交集sinter"></a>交集sinter</h3><p><img src="/images/image-1632477391019.png" alt="file"></p><h3 id="并集sunion"><a href="#并集sunion" class="headerlink" title="并集sunion"></a>并集sunion</h3><p><img src="/images/image-1632477447668.png" alt="file"></p><h1 id="12-hash详解"><a href="#12-hash详解" class="headerlink" title="12. hash详解"></a>12. hash详解</h1><p>hash的形式：key filed vlaue,相当于java中的map集合 hash命令都是h开头</p><p><img src="/images/image-1632643989267.png" alt="file"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">| 命令           | 说明              |<br>| ------------ | --------------- |<br>| hset         | 设置一个key/value对  |<br>| hget         | 获得一个key对应的value |<br>| hgetall      | 获得所有的key/value对 |<br>| hdel         | 删除某一个key/value对 |<br>| hexists      | 判断一个key是否存在     |<br>| hkeys        | 获得所有的key        |<br>| hvals        | 获得所有的value      |<br>| hmset        | 设置多个key/value   |<br>| hmget        | 获得多个key的value   |<br>| hsetnx       | 设置一个不存在的key的值   |<br>| hincrby      | 为value进行加法运算    |<br>| hincrbyfloat | 为value加入浮点值     |<br></code></pre></td></tr></table></figure><h2 id="12-1-向hash中添加值：hset"><a href="#12-1-向hash中添加值：hset" class="headerlink" title="12.1 向hash中添加值：hset"></a>12.1 向hash中添加值：hset</h2><p><img src="/images/image-1632477692339.png" alt="file"></p><h2 id="12-2-得到hash中的指定filed的值：hget"><a href="#12-2-得到hash中的指定filed的值：hget" class="headerlink" title="12.2 得到hash中的指定filed的值：hget"></a>12.2 得到hash中的指定filed的值：hget</h2><p><img src="/images/image-1632477703371.png" alt="file"></p><h2 id="12-3-得到hash中的所有值-hgetall"><a href="#12-3-得到hash中的所有值-hgetall" class="headerlink" title="12.3 得到hash中的所有值:hgetall"></a>12.3 得到hash中的所有值:hgetall</h2><p><img src="/images/image-1632477745829.png" alt="file"></p><h2 id="12-4-批量添加和获取：hmset-hmget"><a href="#12-4-批量添加和获取：hmset-hmget" class="headerlink" title="12.4 批量添加和获取：hmset hmget"></a>12.4 批量添加和获取：hmset hmget</h2><p><img src="/images/image-1632477816044.png" alt="file"></p><h2 id="12-5-删除指定的字段：hdel"><a href="#12-5-删除指定的字段：hdel" class="headerlink" title="12.5 删除指定的字段：hdel"></a>12.5 删除指定的字段：hdel</h2><p><img src="/images/image-1632477844890.png" alt="file"></p><h2 id="12-6-获取hash的字段长度：hlen"><a href="#12-6-获取hash的字段长度：hlen" class="headerlink" title="12.6 获取hash的字段长度：hlen"></a>12.6 获取hash的字段长度：hlen</h2><p><img src="/images/image-1632477866011.png" alt="file"></p><h2 id="12-7-判断hash中的字段是否存在：hexist"><a href="#12-7-判断hash中的字段是否存在：hexist" class="headerlink" title="12.7 判断hash中的字段是否存在：hexist"></a>12.7 判断hash中的字段是否存在：hexist</h2><p><img src="/images/image-1632477881187.png" alt="file"></p><h2 id="12-8-获取所有的key-字段-hkeys-获取所有的value：hvals"><a href="#12-8-获取所有的key-字段-hkeys-获取所有的value：hvals" class="headerlink" title="12.8 获取所有的key(字段)hkeys,获取所有的value：hvals"></a>12.8 获取所有的key(字段)hkeys,获取所有的value：hvals</h2><p><img src="/images/image-1632477896459.png" alt="file"></p><h2 id="12-9-指定增量：hincrby"><a href="#12-9-指定增量：hincrby" class="headerlink" title="12.9 指定增量：hincrby"></a>12.9 指定增量：hincrby</h2><p><img src="/images/image-1632477919981.png" alt="file"></p><p><strong>hash变更的数据 user name age,尤其是是用户信息之类的，经常变动的信息！ hash 更适合于对象的存储，String更加适合字符串存储！</strong></p><h1 id="13-Zset详解"><a href="#13-Zset详解" class="headerlink" title="13. Zset详解"></a>13. Zset详解</h1><p>zset是有序不可重复的集合,zset命令都是z开头 <img src="/images/image-1632644102803.png" alt="file"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs bash">| 命令                     | 说明             |<br>| ---------------------- | -------------- |<br>| zadd                   | 添加一个有序集合元素     |<br>| zcard                  | 返回集合的元素个数      |<br>| zrange 升序 zrevrange 降序 | 返回一个范围内的元素     |<br>| zrangebyscore          | 按照分数查找一个范围内的元素 |<br>| zrank                  | 返回排名           |<br>| zrevrank               | 倒序排名           |<br>| zscore                 | 显示某一个元素的分数     |<br>| zrem                   | 移除某一个元素        |<br>| zincrby                | 给某个特定元素加分      |<br></code></pre></td></tr></table></figure><h2 id="13-1-添加数据：zadd"><a href="#13-1-添加数据：zadd" class="headerlink" title="13.1 添加数据：zadd"></a>13.1 添加数据：zadd</h2><p><img src="/images/image-1632478034715.png" alt="file"></p><h2 id="13-2-获取所有值-按照索引获取：zrange"><a href="#13-2-获取所有值-按照索引获取：zrange" class="headerlink" title="13.2 获取所有值,按照索引获取：zrange"></a>13.2 获取所有值,按照索引获取：zrange</h2><p><img src="/images/image-1632478071159.png" alt="file"></p><h2 id="13-3-获取所有值，按照score获取：zrangebyscore"><a href="#13-3-获取所有值，按照score获取：zrangebyscore" class="headerlink" title="13.3 获取所有值，按照score获取：zrangebyscore"></a>13.3 获取所有值，按照score获取：zrangebyscore</h2><p><img src="/images/image-1632478107108.png" alt="file"></p><h2 id="13-4-移除元素：zrem"><a href="#13-4-移除元素：zrem" class="headerlink" title="13.4 移除元素：zrem"></a>13.4 移除元素：zrem</h2><p><img src="/images/image-1632478230841.png" alt="file"></p><h2 id="13-5-得到元素的个数-zcard"><a href="#13-5-得到元素的个数-zcard" class="headerlink" title="13.5 得到元素的个数:zcard"></a>13.5 得到元素的个数:zcard</h2><p><img src="/images/image-1632478172600.png" alt="file"></p><h2 id="13-6-获取指定区间的成员数量：zcount"><a href="#13-6-获取指定区间的成员数量：zcount" class="headerlink" title="13.6 获取指定区间的成员数量：zcount"></a>13.6 获取指定区间的成员数量：zcount</h2><p><img src="/images/image-1632478326343.png" alt="file"></p><p><strong>ZSET 官方 可排序SET sortSet</strong></p><h1 id="14-geospatial"><a href="#14-geospatial" class="headerlink" title="14. geospatial"></a>14. geospatial</h1><h1 id="15-bitmaps"><a href="#15-bitmaps" class="headerlink" title="15. bitmaps"></a>15. bitmaps</h1><p><strong>bitmap即位存储，适用于只有两面性的内容。如：可以用bitmap存储用户是否登录，是否注册，是否打卡等等。bitmap的值只有0和1两个值。</strong></p><h2 id="15-1-存储数据：setbit"><a href="#15-1-存储数据：setbit" class="headerlink" title="15.1 存储数据：setbit"></a>15.1 存储数据：setbit</h2><p><img src="/images/image-1632644429996.png" alt="file"></p><h2 id="15-2-获取指定下标的值：getbit"><a href="#15-2-获取指定下标的值：getbit" class="headerlink" title="15.2 获取指定下标的值：getbit"></a>15.2 获取指定下标的值：getbit</h2><p><img src="/images/image-1632644452415.png" alt="file"></p><h2 id="15-3-统计bitmap中1的位数：bitcount"><a href="#15-3-统计bitmap中1的位数：bitcount" class="headerlink" title="15.3 统计bitmap中1的位数：bitcount"></a>15.3 统计bitmap中1的位数：bitcount</h2><p><img src="/images/image-1632644484448.png" alt="file"></p><h1 id="16-hyperloglogs"><a href="#16-hyperloglogs" class="headerlink" title="16. hyperloglogs"></a>16. hyperloglogs</h1><p><strong>用于统计基数（即不重复的数据）,可以用于统计网页访问量</strong></p><h2 id="16-1-添加：pfadd"><a href="#16-1-添加：pfadd" class="headerlink" title="16.1 添加：pfadd"></a>16.1 添加：pfadd</h2><p><img src="/images/image-1632644672064.png" alt="file"></p><h2 id="16-2-计数：pfcount"><a href="#16-2-计数：pfcount" class="headerlink" title="16.2 计数：pfcount"></a>16.2 计数：pfcount</h2><p><img src="/images/image-1632644689711.png" alt="file"></p><h2 id="16-3-合并：pfmerge"><a href="#16-3-合并：pfmerge" class="headerlink" title="16.3 合并：pfmerge"></a>16.3 合并：pfmerge</h2><p><img src="/images/image-1632644719576.png" alt="file"></p>]]></content>
    
    
    <categories>
      
      <category>redis</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker精髓（容器数据卷、Dockerfile、Docker网络）</title>
    <link href="/2021/09/15/output/dockerimp/index/"/>
    <url>/2021/09/15/output/dockerimp/index/</url>
    
    <content type="html"><![CDATA[<h1 id="容器数据卷"><a href="#容器数据卷" class="headerlink" title="容器数据卷"></a>容器数据卷</h1><h2 id="什么是容器数据卷"><a href="#什么是容器数据卷" class="headerlink" title="什么是容器数据卷"></a>什么是容器数据卷</h2><h3 id="docker理念"><a href="#docker理念" class="headerlink" title="docker理念"></a>docker理念</h3><ul><li>将应用和运行的环境打包形成容器运行，运行可以伴随着容器，但是我们对于数据的要求，是希望能够持久化的！</li><li>就好比，你安装一个MySQL，结果你把容器删了，就相当于删库跑路了，这TM也太扯了吧！</li><li>所以我们希望容器之间有可能可以共享数据，Docker容器产生的数据，如果不通过docker commit 生成新的镜像，使得数据作为镜像的一部分保存下来，那么当容器删除后，数据自然也就没有了！这样是行不通的！</li><li>为了能保存数据在Docker中我们就可以使用卷！让数据挂载到我们本地！这样数据就不会因为容器删除 而丢失了！</li></ul><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>卷就是目录或者文件，存在一个或者多个容器中，由docker挂载到容器，但不属于联合文件系统，因此能够绕过 Union File System ， 提供一些用于持续存储或共享数据的特性：卷的设计目的就是数据的持久化，完全独立于容器的生存周期，因此Docker不会在容器删除时删除其挂载的数据卷。 特点：</p><ol><li>数据卷可在容器之间共享或重用数据</li><li>卷中的更改可以直接生效</li><li>数据卷中的更改不会包含在镜像的更新中</li><li>数据卷的生命周期一直持续到没有容器使用它为止 总结： 就是容器的持久化，以及容器间的继承和数据共享！</li></ol><h2 id="使用数据卷方式：容器中直接使用命令来添加"><a href="#使用数据卷方式：容器中直接使用命令来添加" class="headerlink" title="使用数据卷方式：容器中直接使用命令来添加"></a>使用数据卷方式：容器中直接使用命令来添加</h2><h3 id="挂载"><a href="#挂载" class="headerlink" title="挂载"></a>挂载</h3><ol><li>命令</li><li>docker run -it -v 宿主机绝对路径目录:容器内目录 镜像名</li><li>测试</li><li>docker run -it -v &#x2F;home&#x2F;ceshi:&#x2F;home centos &#x2F;bin&#x2F;bash #ceshi文件夹会自己生成不需要特意去创建</li></ol><p>此时：容器内部的文件&#x2F;home，和虚拟机上&#x2F;home&#x2F;ceshi就已经相关联了，我们可以测试一下。 在虚拟机的&#x2F;home&#x2F;ceshi创建一个LH.txt，看容器内部的&#x2F;home中是否会生成这个文件</p><h3 id="测试一：查看对应路径下的文件"><a href="#测试一：查看对应路径下的文件" class="headerlink" title="测试一：查看对应路径下的文件"></a>测试一：查看对应路径下的文件</h3><ol><li>在虚拟机上</li><li>[root@slaves2 ~]# cd &#x2F;home&#x2F;ceshi&#x2F;</li><li>[root@slaves2 ceshi]# ll</li><li>总用量 0</li><li>[root@slaves2 ceshi]# touch LH.txt</li><li>查看容器内部</li><li>[root@64760dd67074 &#x2F;]# cd &#x2F;home&#x2F;</li><li>[root@64760dd67074 home]# ls</li><li>LH.txt</li></ol><h3 id="测试二：查看数据卷是否挂载成功-docker-inspect-容器id"><a href="#测试二：查看数据卷是否挂载成功-docker-inspect-容器id" class="headerlink" title="测试二：查看数据卷是否挂载成功 docker inspect 容器id"></a>测试二：查看数据卷是否挂载成功 docker inspect 容器id</h3><ol><li>查看运行的容器</li><li>docker ps</li><li>CONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES</li><li>15132a4bcd1f centos “&#x2F;bin&#x2F;bash” About an hour ago Up About an hour brave_wilson</li><li>查看容器的详细信息</li><li>docker inspect 151</li></ol><p><img src="/images/image-1631709001004.png" alt="file"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>容器停止运行后，数据也是一样能够同步过去的。</p><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><ol><li>你可以先将容器停止</li><li>修改虚拟机上的挂载目录</li><li>使用docker ps -a查看刚停止的容器</li><li>启动容器docker start 容器id</li><li>进入容器docker exec -it 容器id &#x2F;bin&#x2F;bash（或者docker attach 容器ID）</li></ol><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>使用容器数据卷的好处，以后我们修改文件就直接可以在虚拟机上操作了，不需要进入容器内部了。</p>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>Docker常用命令</title>
    <link href="/2021/09/14/output/dockerml/index/"/>
    <url>/2021/09/14/output/dockerml/index/</url>
    
    <content type="html"><![CDATA[<h1 id="Docker常用命令"><a href="#Docker常用命令" class="headerlink" title="Docker常用命令"></a>Docker常用命令</h1><h2 id="帮助命令"><a href="#帮助命令" class="headerlink" title="帮助命令"></a>帮助命令</h2><ol><li>docker version # 显示Docker版本信息</li><li>docker info # 显示Docker系统信息，包括镜像数、容器数、正在运行的镜像数、暂停的镜像数、停止的镜像数等</li><li>docker –help # 显示docker指令的信息</li><li>docker 指令 –help # 显示具体某一个docker指令的可选项docker 指令 –help # 显示具体某一个docker指令的可选项</li></ol><p><img src="/images/image-1631619962208.png" alt="file"></p><h2 id="镜像命令"><a href="#镜像命令" class="headerlink" title="镜像命令"></a>镜像命令</h2><h3 id="docker-images"><a href="#docker-images" class="headerlink" title="docker images"></a>docker images</h3><ol><li>docker images # 显示你本地主机上（买的服务器或安装的Linux虚拟机）所有下载的镜像信息</li></ol><p><img src="/images/image-1631620096012.png" alt="file"></p><p>执行该指令之后，信息显示如上图所示，对每个标签的解释如下：</p><ol><li>REPOSITORY # 镜像的仓库源（也就是镜像名）</li><li>TAG # 镜像的标签（也就是镜像的版本，如果不指定，则默认为lastest，也就是最新版）</li><li>IMAGE ID # 镜像的ID（同一个镜像的不同版本，拥有不同的镜像ID）</li><li>CREATED # 镜像的创建时间</li><li>SIZE # 镜像的大小</li></ol><p>通过<strong>docker images –help</strong>可以看到该指令的一些可选项，现对几个常用的可选项做一解释：</p><p><img src="/images/image-1631620195894.png" alt="file"></p><ol><li>-a # 列出本地所有镜像</li><li>-q # 只列出镜像的ID</li><li>--digests # 显示镜像的摘要信息</li></ol><h3 id="docker-search"><a href="#docker-search" class="headerlink" title="docker search"></a>docker search</h3><ol><li>docker search 某个镜像的名称 # 搜索镜像，例如：docker search mysql</li></ol><p><img src="/images/image-1631620344810.png" alt="file"></p><ol><li>NAME # 镜像名</li><li>DESCRIPTION # 镜像描述</li><li>STARS # 收藏数（类似于GitHub上的STARS，STARS越多，表示越受欢迎，下载次数越多）</li></ol><p>如果我们只想搜索STARS不小于5000的镜像呢？我们可以采用一些过滤条件。</p><p>通过<strong>docker search –help</strong>指令来查看一些可选参数。从图中可以看出，我们可以采用<strong>-f或–filter filter</strong>指令来进行过滤。</p><p><img src="/images/image-1631620452939.png" alt="file"></p><ol><li>以下四种方式均可</li><li>docker search –filter&#x3D;stars&#x3D;5000 mysql</li><li>docker search –filter stars&#x3D;5000 mysql</li><li>docker search -f&#x3D;stars&#x3D;5000 mysql</li><li>docker search -f stars&#x3D;5000 mysql</li></ol><p><img src="/images/image-1631620406980.png" alt="file"></p><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><ol><li>docker pull mysql # 下载镜像（这里如果不指定TAG，默认就是lastest最新版）</li></ol><p><img src="/images/image-1631620581235.png" alt="file"></p><ol><li>docker pull mysql:5.7 需要注意的是，这个镜像的版本一定得是DockerHub上有的版本。不然会下载</li></ol><h3 id="docker-rmi"><a href="#docker-rmi" class="headerlink" title="docker rmi"></a>docker rmi</h3><p>首先使用<strong>docker rmi –help</strong>来看一下这个命令都有哪些可选项。如下图所示：</p><p><img src="/images/image-1631620595815.png" alt="file"></p><p>可以看到有<strong>-f</strong>参数</p><ol><li>删除镜像</li><li>docker rmi -f 镜像id # 删除单个镜像</li><li>docker rmi -f 镜像名:tag 镜像名:tag # 删除多个</li><li>docker rmi -f $(docker images -qa) # 删除全部</li></ol><h2 id="容器命令"><a href="#容器命令" class="headerlink" title="容器命令"></a>容器命令</h2><p>有镜像才能创建容器，我们这里使用centos的镜像来测试，就是虚拟一个centos</p><h3 id="新建容器并启动（docker-run）"><a href="#新建容器并启动（docker-run）" class="headerlink" title="新建容器并启动（docker run）"></a>新建容器并启动（docker run）</h3><p><strong>docker run</strong>命令就是<strong>docker create</strong>和<strong>docker start</strong>命令的组合</p><ol><li><p>docker run [OPTIONS] 镜像名 [COMMAND][ARGS…]</p></li><li><h1 id="常用可选参数以及解释"><a href="#常用可选参数以及解释" class="headerlink" title="常用可选参数以及解释"></a>常用可选参数以及解释</h1></li><li><p>--name # 给容器取一个名字</p></li><li><p>--rm # 容器退出后，自动删除容器</p></li><li><p>-i # 以交互模式运行容器，通常与-t同时使用，即-it</p></li><li><p>-t # 分配一个虚拟的终端，在docker中启动bash就会有提示符，通常与-i通知使用，即-it</p></li><li><p>-d # 在后台运行容器。等同于进入容器后按Ctrl+P+Q。所以可以docker attach回去。在后台运行的容器，只能通过网络和它交互。</p></li><li><p>-p # 设置端口转发。-p:hostport:containerport</p></li></ol><p>测试如下：</p><p>使用centos进行交互模式启动容器，在容器内执行&#x2F;bin&#x2F;bash命令 <img src="/images/image-1631620876616.png" alt="file"></p><p>由上图可以看出，地址已经变成容器内部了。</p><h3 id="列出所有运行的容器（docker-ps）"><a href="#列出所有运行的容器（docker-ps）" class="headerlink" title="列出所有运行的容器（docker ps）"></a>列出所有运行的容器（docker ps）</h3><ol><li>docker ps [OPTIONS]</li></ol><p>我们首先使用<strong>docker ps –help</strong>指令来看一下都有哪些可选参数：</p><p><img src="/images/image-1631620901664.png" alt="file"></p><ol><li>-a # 列出所有正在运行的容器 + 历史运行过的容器</li><li>-l # 列出最近创建的一个容器以及该容器的信息</li><li>-n int # 列出最近n个创建的容器以及容器的信息</li><li>-q # 列出容器的编号</li><li>-s # 列出容器的大小</li></ol><h3 id="容器退出（exit、Ctrl-P-Q）"><a href="#容器退出（exit、Ctrl-P-Q）" class="headerlink" title="容器退出（exit、Ctrl+P+Q）"></a>容器退出（exit、Ctrl+P+Q）</h3><ol><li>exit # 容器停止并退出</li><li>Ctrl + P + Q # 容器不停止退出，也就是进入后台模式，等同于docker run的参数 -d</li></ol><h3 id="删除容器（docker-rm）"><a href="#删除容器（docker-rm）" class="headerlink" title="删除容器（docker rm）"></a>删除容器（docker rm）</h3><ol><li>docker rm 容器id # 删除指定容器</li><li>docker rm -f $(docker ps -aq) # 删除所有容器（常用）</li><li>docker ps -aq | xargs docker -rm # 删除所有容器（不常用）</li></ol><h2 id="常用其他命令"><a href="#常用其他命令" class="headerlink" title="常用其他命令"></a>常用其他命令</h2><h3 id="后台启动容器-d"><a href="#后台启动容器-d" class="headerlink" title="后台启动容器 (-d)"></a>后台启动容器 (-d)</h3><ol><li>docker run -d 容器名 # 后台启动容器</li><li>问题: 使用docker ps 查看，发现容器已经退出了！</li><li>解释：Docker容器后台运行，就必须有一个前台进程，容器运行的命令如果不是那些一直挂起的命令，就会自动退出。</li><li>比如，你运行了nginx服务，但是docker前台没有运行应用，这种情况下，容器启动后，会立即自杀，因为他觉得没有程序了，所以最好的情况是，将你的应用使用前台进程的方式运行启动。</li></ol><h3 id="查看日志（docker-logs）"><a href="#查看日志（docker-logs）" class="headerlink" title="查看日志（docker logs）"></a>查看日志（docker logs）</h3><ol><li>docker logs 容器id</li></ol><p><strong>docker logs</strong>有以下可选参数：</p><p><img src="/images/image-1631621011902.png" alt="file"></p><ol><li>-t # 显示时间戳</li><li>-f # 打印最新的日志</li><li>--tail 数字 # 数字—显示多少条</li></ol><h3 id="查看容器中运行的进程信息（docker-top）"><a href="#查看容器中运行的进程信息（docker-top）" class="headerlink" title="查看容器中运行的进程信息（docker top）"></a>查看容器中运行的进程信息（docker top）</h3><ol><li>docker top 容器id</li></ol><p><img src="/images/image-1631621090534.png" alt="file"></p><h3 id="查看容器-镜像的元数据（docker-inspect）"><a href="#查看容器-镜像的元数据（docker-inspect）" class="headerlink" title="查看容器 &#x2F; 镜像的元数据（docker inspect）"></a>查看容器 &#x2F; 镜像的元数据（docker inspect）</h3><ol><li>docker inspect 容器id</li></ol><p><img src="/images/image-1631621146517.png" alt="file"></p><h3 id="进入正在运行的容器"><a href="#进入正在运行的容器" class="headerlink" title="进入正在运行的容器"></a>进入正在运行的容器</h3><h4 id="docker-exec"><a href="#docker-exec" class="headerlink" title="docker exec"></a>docker exec</h4><p>这个命令是用已经运行的容器执行命令。需要注意的是，如果容器关闭后再次运行，那么用exec命令执行的命令是不会自己再次执行的</p><ol><li>docker exec 容器id</li></ol><p><img src="/images/image-1631621187935.png" alt="file"></p><ol><li>-d # 让命令在后台执行</li><li>-e # 设置环境变量</li><li>-it # 使用交互模式进入</li><li>-u -w # 分别设置命令运行的用户和work directory。也就是如果要改变用户或者工作目录，就是用-u或-w</li></ol><h4 id="docker-attach"><a href="#docker-attach" class="headerlink" title="docker attach"></a>docker attach</h4><p>attach命令把一个后台运行的容器搞到前台来，这样就可以看到他们的输出，并且使用输入了。</p><ol><li>docker attach 容器id</li></ol><p>attach命令的可选参数如下： <img src="/images/image-1631621235356.png" alt="file"></p><ol><li>--no-stdin # 关闭输入</li><li>--sig-proxy # 信号转发，默认开启，这样DMD进程就可以收到你的信号了</li></ol><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p><strong>exec</strong>是在容器中打开新的终端，并且可以启动新的进程</p><p><strong>attach</strong>是直接进入容器启动命令的终端，不会启动新的进程</p><h3 id="从容器内拷贝文件到主机上（docker-cp）"><a href="#从容器内拷贝文件到主机上（docker-cp）" class="headerlink" title="从容器内拷贝文件到主机上（docker cp）"></a>从容器内拷贝文件到主机上（docker cp）</h3><ol><li><p>docker cp 容器id:容器内路径 目的主机路径</p></li><li><p>例如：</p></li><li><p>docker cp f261f17bb39d:&#x2F;home&#x2F;f1 &#x2F;home</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>docker</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>maven常用依赖</title>
    <link href="/2021/09/13/output/maven/index/"/>
    <url>/2021/09/13/output/maven/index/</url>
    
    <content type="html"><![CDATA[<h2 id="maven-下载包和依赖的网站：https-mvnrepository-com-测试："><a href="#maven-下载包和依赖的网站：https-mvnrepository-com-测试：" class="headerlink" title="maven 下载包和依赖的网站：https://mvnrepository.com/测试："></a>maven 下载包和依赖的网站：<a href="https://mvnrepository.com/%E6%B5%8B%E8%AF%95">https://mvnrepository.com/测试</a>：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;junit&lt;/groupId&gt;<br>  &lt;artifactId&gt;junit&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.11</span>&lt;/version&gt;<br>  &lt;scope&gt;test&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="日志："><a href="#日志：" class="headerlink" title="日志："></a>日志：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.slf4j&lt;/groupId&gt;<br>  &lt;artifactId&gt;slf4j-api&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">1.7</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;<br>  &lt;artifactId&gt;logback-core&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;ch.qos.logback&lt;/groupId&gt;<br>  &lt;artifactId&gt;logback-classic&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="数据库相关："><a href="#数据库相关：" class="headerlink" title="数据库相关："></a>数据库相关：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;mysql&lt;/groupId&gt;<br>  &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">5.1</span><span class="hljs-number">.35</span>&lt;/version&gt;<br>  &lt;scope&gt;runtime&lt;/scope&gt;&lt;!--生命周期--&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;c3p0&lt;/groupId&gt;<br>  &lt;artifactId&gt;c3p0&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">0.9</span><span class="hljs-number">.1</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="dao框架依赖，mybatis依赖-："><a href="#dao框架依赖，mybatis依赖-：" class="headerlink" title="dao框架依赖，mybatis依赖 ："></a>dao框架依赖，mybatis依赖 ：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>  &lt;artifactId&gt;mybatis&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">3.3</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="mybatis与spring整合："><a href="#mybatis与spring整合：" class="headerlink" title="mybatis与spring整合："></a>mybatis与spring整合：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.mybatis&lt;/groupId&gt;<br>  &lt;artifactId&gt;mybatis-spring&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">1.2</span><span class="hljs-number">.3</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="标签库依赖："><a href="#标签库依赖：" class="headerlink" title="标签库依赖："></a>标签库依赖：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;taglibs&lt;/groupId&gt;<br>  &lt;artifactId&gt;standard&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;jstl&lt;/groupId&gt;<br>  &lt;artifactId&gt;jstl&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">1.2</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;com.fasterxml.jackson.core&lt;/groupId&gt;<br>  &lt;artifactId&gt;jackson-databind&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">2.5</span><span class="hljs-number">.4</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;javax.servlet&lt;/groupId&gt;<br>  &lt;artifactId&gt;javax.servlet-api&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">3.1</span><span class="hljs-number">.0</span>&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="spring相关依赖："><a href="#spring相关依赖：" class="headerlink" title="spring相关依赖："></a>spring相关依赖：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 核心依赖--&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-core&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-beans&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-context&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--Spring Dao依赖--&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-jdbc&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-tx&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;!--Spring Web依赖--&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-web&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br>&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-webmvc&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="Spring-test依赖"><a href="#Spring-test依赖" class="headerlink" title="Spring test依赖"></a>Spring test依赖</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>  &lt;groupId&gt;org.springframework&lt;/groupId&gt;<br>  &lt;artifactId&gt;spring-test&lt;/artifactId&gt;<br>  &lt;version&gt;<span class="hljs-number">4.1</span><span class="hljs-number">.7</span>.RELEASE&lt;/version&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="maven-打jar包插件："><a href="#maven-打jar包插件：" class="headerlink" title="maven 打jar包插件："></a>maven 打jar包插件：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;plugin&gt;<br>    &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt;<br>    &lt;artifactId&gt;maven-compiler-plugin&lt;/artifactId&gt;<br>    &lt;configuration&gt;<br>        &lt;source&gt;<span class="hljs-number">1.7</span>&lt;/source&gt;<br>        &lt;target&gt;<span class="hljs-number">1.7</span>&lt;/target&gt;<br>    &lt;/configuration&gt;<br>&lt;/plugin&gt;<br>&lt;plugin&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;<br>    &lt;executions&gt;<br>        &lt;execution&gt;<br>            &lt;goals&gt;<br>                &lt;goal&gt;repackage&lt;/goal&gt;<br>            &lt;/goals&gt;<br>        &lt;/execution&gt;<br>    &lt;/executions&gt;<br>&lt;/plugin&gt;<br></code></pre></td></tr></table></figure><h2 id="springboot依赖："><a href="#springboot依赖：" class="headerlink" title="springboot依赖："></a>springboot依赖：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;!-- 必须要引入继承springboot-parent   帮我们实现了很多jar的管理，不需要写jar版本--&gt;<br>  &lt;parent&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;<br>    &lt;version&gt;<span class="hljs-number">1.5</span><span class="hljs-number">.2</span>.RELEASE&lt;/version&gt;<br>&lt;/parent&gt;<br>&lt;!-- SpringBoot 核心组件 --&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>        &lt;artifactId&gt;spring-boot-starter-tomcat&lt;/artifactId&gt;<br>    &lt;/dependency&gt;<br>    &lt;dependency&gt;<br>        &lt;groupId&gt;org.apache.tomcat.embed&lt;/groupId&gt;<br>        &lt;artifactId&gt;tomcat-embed-jasper&lt;/artifactId&gt;<br>    &lt;/dependency&gt; <br>&lt;!-- SpringBoot mybatis整合  --&gt;<br>    &lt;dependency&gt;<br>            &lt;groupId&gt;org.mybatis.spring.boot&lt;/groupId&gt;<br>            &lt;artifactId&gt;mybatis-spring-boot-starter&lt;/artifactId&gt;<br>            &lt;version&gt;<span class="hljs-number">1.1</span><span class="hljs-number">.1</span>&lt;/version&gt;<br>    &lt;/dependency&gt;<br></code></pre></td></tr></table></figure><h2 id="热部署："><a href="#热部署：" class="headerlink" title="热部署："></a>热部署：</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">&lt;dependency&gt;<br>    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;<br>    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;<br>    &lt;scope&gt;runtime&lt;/scope&gt;<br>&lt;/dependency&gt;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>springboot</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>桌面应用开发期末复习——VC++</title>
    <link href="/2021/06/25/output/vc/index/"/>
    <url>/2021/06/25/output/vc/index/</url>
    
    <content type="html"><![CDATA[<h3 id="常用句柄类型及其说明"><a href="#常用句柄类型及其说明" class="headerlink" title="常用句柄类型及其说明"></a>常用句柄类型及其说明</h3><table><thead><tr><th>句柄类型</th><th>说明</th></tr></thead><tbody><tr><td>HWND</td><td>标识窗口句柄</td></tr><tr><td>HINSTANCE</td><td>标识当前实例句柄</td></tr><tr><td>HCURSOR</td><td>标识光标句柄</td></tr><tr><td>HFONT</td><td>标识字体句柄</td></tr><tr><td>HPEN</td><td>标识画笔句柄</td></tr><tr><td>HBRUSH</td><td>标识画刷句柄</td></tr><tr><td>HDC</td><td>标识设备环境句柄</td></tr><tr><td>HBITMAP</td><td>标识位图句柄</td></tr><tr><td>HICON</td><td>标识图标句柄</td></tr><tr><td>HMENU</td><td>标识菜单句柄</td></tr><tr><td>HFILE</td><td>标识文件句柄</td></tr></tbody></table><h3 id="窗口"><a href="#窗口" class="headerlink" title="窗口"></a>窗口</h3><p>窗口是Windows应用程序基本的操作单元，是应用程序与用户之间交互的接口环境，也是系统管理应用程序的基本单位。 应用程序的运行过程即窗口内部、窗口与窗口之间、窗口与系统之间进行数据处理与数据交换的过程。</p><h3 id="Windows应用程序常用消息"><a href="#Windows应用程序常用消息" class="headerlink" title="Windows应用程序常用消息"></a>Windows应用程序常用消息</h3><p>WM_KEYDOWN：按下一个非系统键时产生的消息。 WM_CHAR：按下一个非系统键时产生的消息。 WM_CREATE：由CreateWindow函数发出的消息。 WM_CLOSE：关闭窗口时产生此消息。 WM_DESTROY：消除窗口时由DestroyWindow函数发出此消息。 WM_QUIT：推出应用程序时由PostQuitMessage函数发出的消息。 WM_PAINT：当发生用户区移动或显示事件、用户窗口改变大小的事件、程序通过滚动条滚动窗口时，均产生一条次消息。</p><h3 id="Windows中的事件驱动程序设计"><a href="#Windows中的事件驱动程序设计" class="headerlink" title="Windows中的事件驱动程序设计"></a>Windows中的事件驱动程序设计</h3><p>Windows的应用程序是事件驱动的。事件驱动的程序不是由过程的顺序来控制，而是由事件的发生来控制。 事件驱动程序设计是围绕着信息的产生与处理而展开的。 事件驱动程序方法提供了许多便利，对于那些需要大范围用户干预的应用程序来说，更显其优越性。</p><h3 id="p44-3-3-说明其优点"><a href="#p44-3-3-说明其优点" class="headerlink" title="p44 3.3 说明其优点"></a>p44 3.3 说明其优点</h3><h3 id="Windows应用程序的组成"><a href="#Windows应用程序的组成" class="headerlink" title="Windows应用程序的组成"></a>Windows应用程序的组成</h3><table><thead><tr><th>扩展名</th><th>文件类型</th><th>备注</th></tr></thead><tbody><tr><td>c或cpp</td><td>C语言源程序文件</td><td></td></tr><tr><td>h</td><td>头文件</td><td>头文件包含源程序文件需要的外部常量、变量、数据结构和函数定义和说明</td></tr><tr><td>def</td><td>模块定义文件</td><td>模块定义文件定义程序模块的属性</td></tr><tr><td>rc</td><td>资源描述文件</td><td>资源描述文件定义源程序使用的资源</td></tr><tr><td>vcproj</td><td>项目文件</td><td>各种源程序文件编译后生成项目文件，经进一步编译成为可执行文件</td></tr></tbody></table><h3 id="源程序组成结构"><a href="#源程序组成结构" class="headerlink" title="源程序组成结构"></a>源程序组成结构</h3><ol><li>WinMain函数（函数说明、初始化(窗口类定义、注册窗口类、创建窗口、显示窗口)、消息循环）</li><li>窗口函数（WndProc）</li><li>数据类型（LONG、DWORD、UINT、BOOL、LOTSTR、LPCTSTR、LPSTR、LPCSTR）</li><li>数据结构（MSG、WNDCLASSEX、POINT、RECT）</li></ol><h3 id="常用显示标识及其说明"><a href="#常用显示标识及其说明" class="headerlink" title="常用显示标识及其说明"></a>常用显示标识及其说明</h3><table><thead><tr><th>标识</th><th>说明</th></tr></thead><tbody><tr><td>SW_HIDE</td><td>隐藏窗口</td></tr><tr><td>SW_SHOW</td><td>按当前的位置和大小激活窗口</td></tr><tr><td>SW——SHOWNA</td><td>按当前的状态显示窗口</td></tr><tr><td>SW_SHOWNORMAL</td><td>显示并激活窗口</td></tr></tbody></table><h3 id="图像刷新"><a href="#图像刷新" class="headerlink" title="图像刷新"></a>图像刷新</h3><p>图形刷新是绘图过程中必须考虑的问题，图形刷新包括刷新的请求、系统对刷新请求的响应以及具体的刷新方法。</p><h4 id="刷新请求"><a href="#刷新请求" class="headerlink" title="刷新请求"></a>刷新请求</h4><p>Windows应用程序大部分的用户操作都集中在用户区内，在窗口大小调整、窗口移动或其他对象覆盖时，都必须刷新窗口内用户区的内容，以恢复用户区内应有的显示形态。</p><p>Windows系统通常发送WM_PAINT消息将刷新请求传递给应用程序。当刷新时，系统在应用程序的消息队列中加入该消息，以通知窗口函数执行刷新处理。</p><h4 id="系统对刷新请求的响应"><a href="#系统对刷新请求的响应" class="headerlink" title="系统对刷新请求的响应"></a>系统对刷新请求的响应</h4><p>窗口移动后的刷新 被覆盖区域的刷新 对象穿越后的刷新</p><h4 id="刷新方法"><a href="#刷新方法" class="headerlink" title="刷新方法"></a>刷新方法</h4><p>内存中保持一个显示输出的副本，当需要重新绘制窗口时，将副本复制到相应的窗口中。适用于刷新位图等复杂图形。 记录曾经发生的事件，在窗口需要刷新时重新调用窗口执行这个事件。 重新绘制图形。常采用于简单图形，将图形绘制处理程序放在WM_PAINT响应模块中。</p><h3 id="BeginPaint与GetDC的区别"><a href="#BeginPaint与GetDC的区别" class="headerlink" title="BeginPaint与GetDC的区别"></a>BeginPaint与GetDC的区别</h3><table><thead><tr><th>项目\函数</th><th>BeginPaint函数</th><th>GetDC函数</th></tr></thead><tbody><tr><td>使用环境</td><td>只用于图像刷新时获取设备环境</td><td>使用较广泛</td></tr><tr><td>操作区域</td><td>无效区域</td><td>特定窗口的客户区或整个窗口</td></tr><tr><td>释放设备环境所用函数</td><td>由EndPaint函数释放</td><td>由ReleaseDC函数释放</td></tr></tbody></table><h3 id="画笔、画刷"><a href="#画笔、画刷" class="headerlink" title="画笔、画刷"></a>画笔、画刷</h3><ol><li>画笔、画刷的创建 定义：HPEN hP; 获取Windows系统定义的四种画笔：hP&#x3D;(HPEN)GetStockObject(DC_PEN)； 创建新画笔：hP&#x3D;CreatePen();</li></ol><p>定义：HBRUSH hBr; hBr &#x3D; (HBRUSH)GetStockObject(BLACK_BRUSH); CreateSolidBrush();</p><ol start="2"><li>将画笔选入设备环境 hPenOld&#x3D;SelectObject(hdc, hP)； 直到选入营外一种画笔为止，SelectObject函数的返回值中保存上一次使用的画笔句柄hPenOld。</li></ol><p>hBrOld&#x3D;SelectObject(hdc,hBr);</p><ol start="3"><li>删除画笔、画刷 DeleteObject(hP)； DeleteObject(hBr);</li></ol><table><thead><tr><th>样式</th><th>说明</th></tr></thead><tbody><tr><td>PS_DASH</td><td>虚线</td></tr><tr><td>PS_DASHDOT</td><td>点划线</td></tr><tr><td>PS_DASHDOTDOT</td><td>双点划线</td></tr><tr><td>PS_DOT</td><td>点线</td></tr><tr><td>PS_INSIDEFRAME</td><td>画笔在由封闭对象框中画图（圆等）</td></tr><tr><td>PS_NULL</td><td>画笔不能画图</td></tr><tr><td>PS_SOLID</td><td>实线</td></tr></tbody></table><h3 id="文本输出过程"><a href="#文本输出过程" class="headerlink" title="文本输出过程"></a>文本输出过程</h3><p>在定义了字体句柄、字体及字体颜色之后，就可以把设置的字体输出到相应的设备上。 翁嗯输出定位方式：绝对定位和相对定位。</p><h4 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h4><p>逻辑坐标缺点：已输出文本对后续的位置有影响，这种影响无法直接从定位坐标中体现出来。而且当窗口位置或输出字体发生变化时，文本不能随着窗口的尺寸和新的字体的变化灵活调整。</p><h4 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h4><p>根据已输出内容，通过获取字体信息，然后格式化文本，确定后续文本的输出的位置，调用函数在窗口中输出文本。</p><ol><li><p>获取字体信息 GetTextMetrics(hdc, &amp;tm)</p></li><li><p>格式化文本 确定后续文本坐标，确定换行时文本坐标 Y &#x3D; y0 + tm.tmHeight + tmExternalLeading;</p></li><li><p>文本输出 TextOut(hdc, x, y, “”, len);</p></li></ol><h3 id="用户区鼠标消息"><a href="#用户区鼠标消息" class="headerlink" title="用户区鼠标消息"></a>用户区鼠标消息</h3><table><thead><tr><th>消息</th><th>含义</th></tr></thead><tbody><tr><td>WM_LBUTTONDOWN &#x2F; UP</td><td>用户区单击 &#x2F; 释放鼠标左键</td></tr><tr><td>WM_LBUTTONDBLCLK</td><td>用户区双击鼠标左键</td></tr><tr><td>WM_MBUTTONDOWN &#x2F; UP</td><td>用户区单击 &#x2F; 释放鼠标中键</td></tr><tr><td>WM_MBUTTONDBLCLK</td><td>用户区双击鼠标中键</td></tr><tr><td>WM_RBUTTONDOWN &#x2F; UP</td><td>用户区单击 &#x2F; 释放鼠标右键</td></tr><tr><td>WM_RBUTTONDBLCLK</td><td>用户区双击鼠标右键</td></tr><tr><td>WM_MOUSEMOVE</td><td>鼠标在用户区内移动</td></tr><tr><td>WM_MOUSEWHELL</td><td>鼠标滚轮移动</td></tr><tr><td>WM_MOUSEACTIVATE</td><td>鼠标指针在非激活窗口的时候按下了鼠标键</td></tr><tr><td>WM_MOUSEHOVER</td><td>鼠标的光标在窗口的用户区盘旋时发出的消息</td></tr></tbody></table><h3 id="wParam的值"><a href="#wParam的值" class="headerlink" title="wParam的值"></a>wParam的值</h3><table><thead><tr><th>消息</th><th>含义</th></tr></thead><tbody><tr><td>MK_CONTROL</td><td>按下键盘Ctrl键</td></tr><tr><td>MK_LBUTTON</td><td>按下鼠标左键</td></tr><tr><td>MK_MBUTTON</td><td>按下鼠标中键</td></tr><tr><td>MK_RBUTTON</td><td>按下鼠标右键</td></tr><tr><td>MK_SHIFT</td><td>按下键盘Shift键</td></tr><tr><td>MK_XBUTTON1</td><td>按下Windows第一徽标键</td></tr><tr><td>MK_XBUTTON2</td><td>按下Windows第二徽标键</td></tr></tbody></table><h3 id="鼠标应用程序实例"><a href="#鼠标应用程序实例" class="headerlink" title="鼠标应用程序实例"></a>鼠标应用程序实例</h3><p>p &#x3D; (LOWORD(lPARAM), HIWORD(lPARAM)) 当消息是鼠标消息时，获取坐标</p><h3 id="对话框"><a href="#对话框" class="headerlink" title="对话框"></a>对话框</h3><p>对话框有模式对话框和非模式对话框。 模式对话框不允许用户在关闭对话框之前切换到应用程序的其他窗口，而非模式对话框然也。</p><h4 id="模式对话框的编程方法"><a href="#模式对话框的编程方法" class="headerlink" title="模式对话框的编程方法"></a>模式对话框的编程方法</h4><ol><li><p>定义对话框资源 STYLE DS_MODALFRAME|WS_POPUP_WS_CAPTION</p></li><li><p>调用函数DialogBox显示对话框 DialogBox();</p></li><li><p>构造对话框消息处理函数 DlgProc();</p></li><li><p>关闭对话框 EndDialog()；</p></li></ol><h4 id="非模式对话框的编程方法"><a href="#非模式对话框的编程方法" class="headerlink" title="非模式对话框的编程方法"></a>非模式对话框的编程方法</h4><p>非模式对话框与模式对话框的变成比较类似，但在对话框的定义、对话框的创建及消息处理上略有差别。</p><ol><li><p>定义对话框样式 STYLE WS_POPUP|WS_CAPTION|WS_VISIBLE</p></li><li><p>创建对话框函数 CreateDialog();</p></li><li><p>消息循环部分的处理</p> <figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">while</span>(<span class="hljs-built_in">GetMessage</span>(&amp;Msg, <span class="hljs-literal">NULL</span>, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) &#123;<br><span class="hljs-keyword">if</span>(!<span class="hljs-built_in">IsDialogMessage</span>(hdlg, &amp;Msg)) &#123;<br>    <span class="hljs-built_in">TranslateMessage</span>(&amp;Msg);<br>    <span class="hljs-built_in">DispatchMessage</span>(&amp;Msg);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li><p>关闭对话框的函数 DestroyWindow(HWND hdlg);</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>桌面应用开发</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（八）控制单元的功能</title>
    <link href="/2021/06/20/output/jizu8/index/"/>
    <url>/2021/06/20/output/jizu8/index/</url>
    
    <content type="html"><![CDATA[<h2 id="8-1-微操作命令的分析"><a href="#8-1-微操作命令的分析" class="headerlink" title="8.1 微操作命令的分析"></a>8.1 微操作命令的分析</h2><h3 id="8-1-1-取指周期"><a href="#8-1-1-取指周期" class="headerlink" title="8.1.1 取指周期"></a>8.1.1 取指周期</h3><p><img src="/images/2D6AC65A-597D-4AC6-92B1-DF95B1F4EF6F.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="8-1-2-间址周期"><a href="#8-1-2-间址周期" class="headerlink" title="8.1.2 间址周期"></a>8.1.2 间址周期</h3><p>间址周期完成取操作数有效地址的任务。</p><p><img src="/images/867498D7-4CAF-47CC-86D8-F4CA93620BDB.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="8-1-3-执行周期"><a href="#8-1-3-执行周期" class="headerlink" title="8.1.3 执行周期"></a>8.1.3 执行周期</h3><p><img src="/images/287A4FCE-31E2-4AC0-A483-643F53982B68.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/6F4D6516-67E5-4D3A-A3EC-651064F6C876.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/2CBA798F-1060-4ABF-98C8-8914A5D8F5BC.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/E33C4124-D6BA-4FAE-9C38-8730792D74A0.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p> </p><h2 id="8-2-例题"><a href="#8-2-例题" class="headerlink" title="8.2 例题"></a>8.2 例题</h2><blockquote><p><img src="/images/7BB164DB-DEA0-468E-864F-41A86D0BC2AF.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p>（1）（2）（3）在上面</p><p>（4）</p><p><img src="/images/69C9C3A7-5209-455B-A95E-C66CBCA5AF4E.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p><img src="/images/4.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/7FE27029-750B-4D7D-A23B-2244F25BD13E.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（六）指令系统</title>
    <link href="/2021/06/20/output/jizu6/index/"/>
    <url>/2021/06/20/output/jizu6/index/</url>
    
    <content type="html"><![CDATA[<h2 id="6-1-机器指令"><a href="#6-1-机器指令" class="headerlink" title="6.1 机器指令"></a>6.1 机器指令</h2><p>每一条机器语言的语句称为机器指令，而又将全部机器指令的集合称为机器的指令系统。</p><h3 id="6-1-1-指令的一般格式"><a href="#6-1-1-指令的一般格式" class="headerlink" title="6.1.1 指令的一般格式"></a>6.1.1 指令的一般格式</h3><p>指令是由操作码和地址码两部分组成的。</p><h4 id="操作码"><a href="#操作码" class="headerlink" title="操作码"></a>操作码</h4><p>操作码用来指明该指令索要完成的操作，如加法、减法、传送、移位、转移等。通常，其位数反映了机器的操作种类，也即机器允许的指令条数。</p><h4 id="地址码"><a href="#地址码" class="headerlink" title="地址码"></a>地址码</h4><p>地址码用来指出该指令的源操作数的地址（一个或两个）、结果的地址以及下一条指令的地址。这里的“地址”可以是主存的地址，也可以是寄存器的地址，甚至可以是I&#x2F;O设备的地址。</p><h5 id="四地址指令"><a href="#四地址指令" class="headerlink" title="四地址指令"></a>四地址指令</h5><p><img src="/images/image-72.png"> 其中，OP为操作码；A1为第一操作数地址；A2为第二操作数地址；A3为结果地址；A4为下一条指令的地址。 如果地址字段均指示主存的地址，则完成一条四地址指令，共需访问4次存储器（取指令一次，取两个操作数两次，存放结果一次）。</p><h5 id="三地址指令"><a href="#三地址指令" class="headerlink" title="三地址指令"></a>三地址指令</h5><p><img src="/images/image-73.png"></p><h5 id="二地址指令"><a href="#二地址指令" class="headerlink" title="二地址指令"></a>二地址指令</h5><p><img src="/images/image-74.png"></p><h5 id="一地址指令"><a href="#一地址指令" class="headerlink" title="一地址指令"></a>一地址指令</h5><p><img src="/images/image-75.png"></p><h3 id="6-1-2-指令字长"><a href="#6-1-2-指令字长" class="headerlink" title="6.1.2 指令字长"></a>6.1.2 指令字长</h3><p>指令字长取决于操作码的长度、操作数地址的长度和操作数地址的个数。 为了提高指令的运行速度和节省存储空间，通常尽可能把常用的指令（如数据传送指令、算逻运算指令等）设计成单字长或短字长格式的指令。通常指令字长取8的整数倍。</p><h2 id="6-2-操作类型"><a href="#6-2-操作类型" class="headerlink" title="6.2 操作类型"></a>6.2 操作类型</h2><h3 id="6-2-1-操作数类型"><a href="#6-2-1-操作数类型" class="headerlink" title="6.2.1 操作数类型"></a>6.2.1 操作数类型</h3><p>机器中常见的操作数类型有地址、数字、字符、逻辑数据等。</p><h3 id="6-2-2-操作类型"><a href="#6-2-2-操作类型" class="headerlink" title="6.2.2 操作类型"></a>6.2.2 操作类型</h3><h4 id="输出传送"><a href="#输出传送" class="headerlink" title="输出传送"></a>输出传送</h4><p>数据传送包括寄存器与寄存器、寄存器与存储单元、存储单元与存储单元之间的传送。</p><h4 id="算术逻辑操作"><a href="#算术逻辑操作" class="headerlink" title="算术逻辑操作"></a>算术逻辑操作</h4><p>这类操作可实现算术运算和逻辑运算。有些机器还具有位操作功能，如位测试（测试指定位的值）、位清除（清除指定位）、位求反（对指定位求反）等。</p><h4 id="移位"><a href="#移位" class="headerlink" title="移位"></a>移位</h4><p>移位可分为算数移位、逻辑移位、循环移位三种。</p><h4 id="转移"><a href="#转移" class="headerlink" title="转移"></a>转移</h4><p>转移指令按其转移特征又可分为无条件转移、条件转移、跳转、过程调用与返回、陷阱等几种。</p><h4 id="输入输出"><a href="#输入输出" class="headerlink" title="输入输出"></a>输入输出</h4><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><h2 id="6-3-寻址方式"><a href="#6-3-寻址方式" class="headerlink" title="6.3 寻址方式"></a>6.3 寻址方式</h2><p>寻址方式分为指令寻址和数据寻址两大类。</p><h3 id="6-3-1-指令寻址"><a href="#6-3-1-指令寻址" class="headerlink" title="6.3.1 指令寻址"></a>6.3.1 指令寻址</h3><p>指令寻址分为顺序寻址和跳跃寻址两种。 顺序寻址可通过程序计数器PC加1，自动形成下一条指令的地址；跳跃寻址则通过转移类指令实现。</p><h3 id="6-3-2-数据寻址"><a href="#6-3-2-数据寻址" class="headerlink" title="6.3.2 数据寻址"></a>6.3.2 数据寻址</h3><p>指令的地址码字段通常都不代表操作数的真实地址，把它称为形式地址，记作A。操作数的真实地址称为有效地址，记作EA，它是由寻址方式和形式地址共同来确定的。 <img src="/images/image-76.png"></p><h4 id="立即寻址"><a href="#立即寻址" class="headerlink" title="立即寻址"></a>立即寻址</h4><p>立即寻址的特点是操作数本身设在指令字内，即形式地址A不是操作数的地址，而是操作数本身，又称为立即数。数据是采用补码形式存放的。 <img src="/images/image-77.png"> 优点在于只要取出指令，便可立即获得操作数，这种指令在执行阶段不必再访问存储器。A的位数限制了这类指令所能表述的立即数的范围。</p><h4 id="直接寻址"><a href="#直接寻址" class="headerlink" title="直接寻址"></a>直接寻址</h4><p>直接寻址的特点是指令字中的形式地址A就是操作数的真实地址EA，即EA&#x3D;A。 <img src="/images/image-78.png"> 它的优点是寻找操作数比较简单，也不需要专门计算操作数的地址，在指令执行阶段对主存只访问一次。缺点在于A的位数限制了操作数的寻址范围，而且必须修改A的值，才能修改操作数的地址。</p><h4 id="隐含寻址"><a href="#隐含寻址" class="headerlink" title="隐含寻址"></a>隐含寻址</h4><h4 id="间接寻址"><a href="#间接寻址" class="headerlink" title="间接寻址"></a>间接寻址</h4><h4 id="寄存器寻址"><a href="#寄存器寻址" class="headerlink" title="寄存器寻址"></a>寄存器寻址</h4><h4 id="寄存器间接寻址"><a href="#寄存器间接寻址" class="headerlink" title="寄存器间接寻址"></a>寄存器间接寻址</h4><h4 id="基址寻址"><a href="#基址寻址" class="headerlink" title="基址寻址"></a>基址寻址</h4><h4 id="变址寻址"><a href="#变址寻址" class="headerlink" title="变址寻址"></a>变址寻址</h4><h4 id="相对寻址"><a href="#相对寻址" class="headerlink" title="相对寻址"></a>相对寻址</h4><h4 id="堆栈寻址"><a href="#堆栈寻址" class="headerlink" title="堆栈寻址"></a>堆栈寻址</h4><h2 id="6-4-RISC的主要特点"><a href="#6-4-RISC的主要特点" class="headerlink" title="6.4 RISC的主要特点"></a>6.4 RISC的主要特点</h2><ol><li>选取使用频度较高的一些简单指令以及一些很有用但又不复杂的指令，让复杂指令的功能由频度高的简单指令的组合来实现。</li><li>指令长度固定，指令格式种类少，寻址方式种类少。</li><li>只有取数&#x2F;存数(LOAD&#x2F;STORE)指令访问存储器，其余指令的操作都在寄存器内完成。</li><li>CPU中有多个通用寄存器</li><li>采用流水线技术，大部分指令在一个时钟周期内完成。采用超标量和超流水线技术，可使每条指令的平均执行时长小于一个时钟周期。</li><li>控制器采用组合逻辑控制，不用微程序控制</li><li>采用优化的编译程序</li></ol><h2 id="6-5-小结"><a href="#6-5-小结" class="headerlink" title="6.5 小结"></a>6.5 小结</h2><ol><li>指令由操作码和地址码组成</li><li>指令字长取决于操作码的长度、操作数地址的长度和操作数地址的个数</li><li>半字地址是2的整数倍，字地址是4的整数倍，双字地址是8的整数倍</li><li>算数逻辑操作：加（ADD）、减（SUB）、乘（MUL）、除（DIV）、与（AND）、或（OR）、非（NOT）、异或（XOR）、增1（INC）、减1（DEC）、十进制加减乘除（AAA、AAS、AAM、AAD）、位测试（BT）、位清除（BTR）、位求反（BTC）</li><li>调用指令（CALL）一般与返回指令（RETURN）配合使用</li><li>无条件转移（JMP）</li><li>寻址方式：寻址方式是指确定本条指令的数据地址以及下一条将要执行的指令地址的方法，它与硬件结构紧密相关，而且直接影响指令格式和指令功能。</li><li>寻址方式分为指令寻址和数据寻址两大类</li><li>指令寻址分为顺序寻址和跳跃寻址两种</li><li>数据寻址分为立即寻址（指令中）、寄存器寻址（寄存器中）、存储器寻址（存储器中）</li></ol><h2 id="6-6-例题"><a href="#6-6-例题" class="headerlink" title="6.6 例题"></a>6.6 例题</h2><blockquote><p>7.6 某指令系统字长为16位，地址码取4位，试提出一种方案，使该指令系统有8条三地址指令，16条二地址指令，100条一地址指令。</p><p><img src="/images/lALPDgfLRY1zCzrNA-jNBSo_1322_1000.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>7.8 某机指令字长16位，每个操作数的地址码为6位，设操作码长度固定，指令分为零地址、一地址和二地址三种格式。若零地址指令有M种，一地址有N种，则二地址指令最多有几种？若操作码位数可变，则二地址指令最多允许有几种？</p><p><img src="/images/lALPDh0cPWoVInLNA-jNByU_1829_1000.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>7.15 一相对寻址的转移指令占3个字节，第一字节是操作码，第二、三字节为相对位移量，而且数据在存储器中采用以高字节地址为字地址的存放方式。假设PC当前值为4000H。试问当结果为0，执行“JZ <em>+ 35”和“JZ</em> - 17”指令时，该指令的第二、第三字节的机器代码各为多少？</p><p><img src="/images/lADPD4BhtfayWZzNAdDNBNo_1242_464.jpg"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>7.16某机主存容量为4M*16位，且存储字长等于指令字长，若该机指令系统可完成108种操作，操作码位数固定，且具有直接、间接、变址、基址、相对、立即等六种寻址方式，试回答以下问题。 （1）画出一地址指令格式并指出各字段作用。 （2）该指令直接寻址的最大范围。 （3）一次间接寻址和多次间接寻址的寻址范围。 （4）立即数的范围（十进制表示）。 （5）相对寻址的位移量（十进制表示）。 （6）上述六种寻址方式的指令中哪一种执行时间最短，哪一种最长，为什么？哪一种便于程序浮动，哪一种最适合处理数组问题？ （7）如何修改指令格式，使指令的寻址范围可过大到4M？ （8）位使一条转移指令能够转移到主存到任一位置，可采取什么措施？简要说明之。</p><p><img src="/images/63C3215A-F107-4D75-A3E5-F8D9EE134218.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>7.18 某机器共能完成78种操作，若指令字长为16位，试问一地址格式的指令地址码可取几位？若想使指令寻址范围扩大到2^16，可采取什么方法？</p><p>根据78种操作，可求出操作码位数为7位，则单地址格式的指令地址码占16-7&#x3D; 9位。直接寻址范围为2^9&#x3D;512。若想使指令的寻址范围扩大到2^16，可采用以下三种寻址方法： （1）若指令字长等于存储字长均为16位，则采用间接寻址可使寻址范围扩大到2^16，因为间址时（设非多次间址）从存储单元中取出的有效地址为16位。 （2）采用变址寻址，并设变址寄存器RX为16位，则有效地址EA&#x3D;（RX）+A（形式地址），即可使寻址范围扩大到2^16。 （3）采用基址寻址，并设基址寄存器RB为16位，则有效地址EA&#x3D;（RB）+A（形式地址），即可使寻址范围扩大到2^16。</p></blockquote><p> </p><blockquote><p><img src="/images/8869BF19-24ED-4CE0-8CFC-3B639CD2CDD4.png"></p><p><img src="/images/49ACB5B3-4B12-4CA0-91D7-28177AFB3DA3.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>7.20 什么是RISC？简述它的特点。</p><p>RISC技术是用20%的简单指令的组合来实现不常用的80%的那些指令功能。</p><ul><li>选取使用频度较高的一些简单指令以及一些很有用但又不复杂的指令，让复杂指令的功能由频度高的简单指令的组合来实现。</li><li>指令长度固定，指令格式种类少，寻址方式种类少。</li><li>只有取数&#x2F;存数(LOAD&#x2F;STORE)指令访问存储器，其余指令的操作都在寄存器内完成。</li><li>CPU中有多个通用寄存器</li><li>采用流水线技术，大部分指令在一个时钟周期内完成。采用超标量和超流水线技术，可使每条指令的平均执行时长小于一个时钟周期。</li><li>控制器采用组合逻辑控制，不用微程序控制</li><li>采用优化的编译程序</li></ul></blockquote><p> </p><blockquote><p>7.21 比较RISC和CISC。</p><p>与CISC机相比，RISC机的主要优点可归纳如下：</p><ul><li>充分利用VLSI芯片的面积</li><li>提高计算机的运算速度</li><li>便于设计，可降低成本，提高可靠性</li><li>有效支持高级语言程序</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（七）CPU的结构和性能</title>
    <link href="/2021/06/20/output/jizu7/index/"/>
    <url>/2021/06/20/output/jizu7/index/</url>
    
    <content type="html"><![CDATA[<h2 id="7-1-CPU的结构"><a href="#7-1-CPU的结构" class="headerlink" title="7.1 CPU的结构"></a>7.1 CPU的结构</h2><h3 id="7-1-1-CPU的功能"><a href="#7-1-1-CPU的功能" class="headerlink" title="7.1.1 CPU的功能"></a>7.1.1 CPU的功能</h3><p>（1）取指令 控制器必须具备能自动地从存储器中取出指令的功能</p><p>（2）分析指令 分析指令包括两部分内容：其一，分析此指令要完成什么操作，即控制器需发出什么操作命令；其二，分析参与这次操作的操作数地址，即操作数的有效地址。</p><p>（3）执行指令 执行指令就是根据分析指令产生的“操作命令”和“操作数地址”的要求，形成操作控制信号序列，通过对运算器、存储器以及I&#x2F;O设备的操作，执行每条指令。</p><p>CPU必须具有控制程序的顺序执行（称指令控制）、产生完成每条指令的控制命令（称操作控制）、对各种操作加以时间上的控制（称时间控制）、对数据进行算术运算和逻辑运算（称数据加工）、处理中断等功能。</p><h3 id="7-1-2-CPU结构框图"><a href="#7-1-2-CPU结构框图" class="headerlink" title="7.1.2 CPU结构框图"></a>7.1.2 CPU结构框图</h3><p><img src="/images/image-79.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="7-1-3-CPU的寄存器"><a href="#7-1-3-CPU的寄存器" class="headerlink" title="7.1.3 CPU的寄存器"></a>7.1.3 CPU的寄存器</h3><p>CPU中的寄存器大致可分为两类：一类属于<strong>用户可见寄存器</strong>，用户可对这类寄存器编程，以及通过优化使CPU因使用这类寄存器而减少对主存的访问次数；另一类属于<strong>控制和状态寄存器</strong>，用户不可对这类寄存器编程，它们被控制部件使用，以控制CPU的操作，也可被带有特权的操作系统程序使用，从而控制程序的执行。</p><h4 id="用户可见寄存器"><a href="#用户可见寄存器" class="headerlink" title="用户可见寄存器"></a>用户可见寄存器</h4><p>（1）通用寄存器 通用寄存器可由程序设计者指定许多功能，可用于存放操作数，也可作为满足某种寻址方式所需的寄存器。寄存器间接寻址时还可用通用寄存器存放有效地址的地址。</p><p>（2）数据寄存器 数据寄存器用于存放操作数，其位数应满足多数数据类型的数值范围。</p><p>（3）地址寄存器 地址寄存器用于存放地址，其本身可以具有通用性，也可用于特殊的寻址方式。</p><p>（4）条件码寄存器 条件码是CPU根据运算结果由硬件设置的位。将条件码放到一个或多个寄存器中，就构成了条件码寄存器。</p><h4 id="控制和状态寄存器"><a href="#控制和状态寄存器" class="headerlink" title="控制和状态寄存器"></a>控制和状态寄存器</h4><p>MAR：存储器地址寄存器，用于存放将被访问的存储单元的地址。 MDR：存储器数据寄存器，用于存放欲存入存储器中的数据或最近从存储器中读出的数据。 PC：程序计数器，存放现行指令的地址，通常具有计数功能。当遇到转移类指令时，PC的值可被修改。 IR：指令寄存器，存放当前欲执行的指令。 PSW：程序状态字寄存器，存放条件码和其他状态信息。 在具有中断系统的机器中还有中断标记寄存器。</p><h3 id="7-1-4-控制单元和中断系统"><a href="#7-1-4-控制单元和中断系统" class="headerlink" title="7.1.4 控制单元和中断系统"></a>7.1.4 控制单元和中断系统</h3><p>控制单元（CU）是提供完成计算机全部指令操作的微操作命令序列部件。微操作命令序列的形成方法有两种：一种是组合逻辑设计方法，为<strong>硬连线逻辑</strong>；另一种是微程序设计方法，为<strong>存储逻辑</strong>。</p><h2 id="7-2-指令周期"><a href="#7-2-指令周期" class="headerlink" title="7.2 指令周期"></a>7.2 指令周期</h2><h3 id="7-2-1-概念"><a href="#7-2-1-概念" class="headerlink" title="7.2.1 概念"></a>7.2.1 概念</h3><p>CPU每取出并执行一条指令所需的全部时间称为<strong>指令周期</strong>，也即CPU完成一条指令的时间。取指阶段完成取指令和分析指令的操作，又称<strong>取指周期</strong>；执行阶段完成执行指令的操作，又称<strong>执行周期</strong>。</p><h3 id="7-2-2-指令周期的数据流"><a href="#7-2-2-指令周期的数据流" class="headerlink" title="7.2.2 指令周期的数据流"></a>7.2.2 指令周期的数据流</h3><h4 id="取值周期数据流"><a href="#取值周期数据流" class="headerlink" title="取值周期数据流"></a>取值周期数据流</h4><h4 id="间址周期的数据流"><a href="#间址周期的数据流" class="headerlink" title="间址周期的数据流"></a>间址周期的数据流</h4><h4 id="执行周期的数据流"><a href="#执行周期的数据流" class="headerlink" title="执行周期的数据流"></a>执行周期的数据流</h4><h4 id="中断周期的数据流"><a href="#中断周期的数据流" class="headerlink" title="中断周期的数据流"></a>中断周期的数据流</h4><h2 id="7-3-指令流水"><a href="#7-3-指令流水" class="headerlink" title="7.3 指令流水"></a>7.3 指令流水</h2><p>（1）提高器件的性能 （2）改进系统的结构，开发系统的并行性 并行：包含同时性和并发性两方面。同时性指两个或多个事件在同一时刻发生，并发性指两个或多个事件在同一时间段发生。在同一时刻或同一时间段内完成两种或两种以上性质相同或不同的功能，只要在时间上互相重叠，就存在并行性。 并行性体现在不同等级上。通常分为4个级别：作业级或程序级、任务级或进程级、指令之间级和指令内部级。前两级为粗粒度，又称为过程级；后两级为细粒度，又称为指令级。粗粒度并行性一般用算法实现，细粒度并行性一般用硬件实现。粗粒度并行性是在多个处理机上分别运行多个进程，由多台处理机合作完成一个程序；细粒度并行性是指在处理机的操作级和指令级的并行性，其中指令的流水作业就是一项重要技术。</p><h3 id="7-3-1-指令流水原理"><a href="#7-3-1-指令流水原理" class="headerlink" title="7.3.1 指令流水原理"></a>7.3.1 指令流水原理</h3><p>把指令的处理过程分为取指令和执行指令两个阶段，在不采用流水技术的计算机里，取指令和执行指令是周而复始地出现，各条指令按顺序串行执行的。</p><h3 id="7-3-2-影响流水线性能的因素"><a href="#7-3-2-影响流水线性能的因素" class="headerlink" title="7.3.2 影响流水线性能的因素"></a>7.3.2 影响流水线性能的因素</h3><p>在流水过程中会出现三种相关，使流水线不断流实现起来很困难，即结构相关、数据相关、控制相关。 结构相关：当多条指令进入流水线后，硬件资源满足不了指令重叠执行的要求时产生的。 数据相关：指令在流水线中重叠执行时，当后继指令需要用到前面的执行结果时发生的。 控制相关：当流水线遇到分支指令和其他改变PC值的指令时引起的。</p><p>假设流水线由5段组成，它们分别是取指令（IF）、指令译码&#x2F;读寄存器（ID）、执行&#x2F;访存有效地址计算（EX）、存储器访问（MEM）、结果写回寄存器（WB）。</p><h4 id="结构相关"><a href="#结构相关" class="headerlink" title="结构相关"></a>结构相关</h4><h4 id="数据相关"><a href="#数据相关" class="headerlink" title="数据相关"></a>数据相关</h4><h4 id="控制相关"><a href="#控制相关" class="headerlink" title="控制相关"></a>控制相关</h4><h3 id="7-3-3-流水线性能"><a href="#7-3-3-流水线性能" class="headerlink" title="7.3.3 流水线性能"></a>7.3.3 流水线性能</h3><p>流水线性能通常用<strong>吞吐率、加速比、效率</strong>3项指标来衡量。</p><h4 id="吞吐率"><a href="#吞吐率" class="headerlink" title="吞吐率"></a>吞吐率</h4><p>在指令级流水线中，<strong>吞吐率</strong>是指单位时间内流水线所完成指令或输出结果的数量。吞吐率又有<strong>最大吞吐率</strong>和<strong>实际吞吐率</strong>之分。</p><p><strong>最大吞吐率</strong>是指流水线在连续流动达到稳定状态后所获得的吞吐率。对于m段的指令流水线而言，若各段的时间均为Δt，则最大吞吐率为</p><p><code>T_&#123;pmax&#125;=\frac&#123;1&#125;&#123;\triangle t&#125;</code> 流水线仅在连续流动时才可达到最大吞吐率。实际吞吐率总是小于最大吞吐率。 实际吞吐率是指流水线完成n条指令的实际吞吐率。实际吞吐率为 <code>T_p=\frac&#123;T_&#123;pmax&#125;&#125;&#123;1+(m-1)/n&#125;</code></p><h4 id="加速比"><a href="#加速比" class="headerlink" title="加速比"></a>加速比</h4><p>流水线的加速比是指m段流水线的速度与等功能的非流水线的速度之比。加速比Sp为 <code>S_p=\frac&#123;m&#125;&#123;1+(m-1)/n&#125;</code></p><h4 id="效率"><a href="#效率" class="headerlink" title="效率"></a>效率</h4><p>效率是指流水线中各功能段的利用率。通常用流水线各段处于工作时间的时空区与流水线中各段总的时空区之比来衡量流水线的效率。 <code>E=T_p\triangle t</code></p><h3 id="7-3-4-流水线种的多发技术。"><a href="#7-3-4-流水线种的多发技术。" class="headerlink" title="7.3.4 流水线种的多发技术。"></a>7.3.4 流水线种的多发技术。</h3><p>除了采用好的指令调度算法、重新组织指令执行顺序、降低相关带来的干扰以及优化编译外，还可开发流水线中的多发技术，设法在一个时钟周期内，产生更多的结果。常见的多发技术有超标量技术、超流水线技术、超长指令字技术。</p><h3 id="7-3-5-流水线结构"><a href="#7-3-5-流水线结构" class="headerlink" title="7.3.5 流水线结构"></a>7.3.5 流水线结构</h3><h4 id="指令流水线结构"><a href="#指令流水线结构" class="headerlink" title="指令流水线结构"></a>指令流水线结构</h4><p>指令流水线是将指令的整个执行过程用流水线进行分段处理，典型的指令执行过程分为“取指令——指令译码——形成地址——取操作数——执行指令——回写结果——修改指令指针”这几个阶段。 指令流水线对机器性能的改善程度取决于把处理过程分解为多少个相等的时间段数。</p><h4 id="运算流水线"><a href="#运算流水线" class="headerlink" title="运算流水线"></a>运算流水线</h4><p>流水线相邻两段在执行不同的操作，因此在相邻两段之间必须设置锁存器或寄存器，以保证在一个时钟周期内流水线的输入信号不变。这一指导思想也适用于指令流水。</p><h2 id="7-4-中断系统"><a href="#7-4-中断系统" class="headerlink" title="7.4 中断系统"></a>7.4 中断系统</h2><h3 id="7-4-1-概述"><a href="#7-4-1-概述" class="headerlink" title="7.4.1 概述"></a>7.4.1 概述</h3><h4 id="引起中断的各种因素"><a href="#引起中断的各种因素" class="headerlink" title="引起中断的各种因素"></a>引起中断的各种因素</h4><p>（1）人为设置的中断 这种中断一般称为自愿中断，因为它是程序中人为设置的，故一旦机器执行这种人为中断，便自愿停止现行程序而转入中断处理。 （2）程序性事故 如定点溢出、浮点溢出、操作码不能识别、除法中出现“非法”等，这些都属于由程序设计不周而引起的中断。 （3）硬件故障 （4）I&#x2F;O设备 I&#x2F;O设备被启动以后，一旦准备就绪，便向CPU发出中断请求。 （5）外部事件 用户通过键盘来中断现行程序属于外部事件中断。</p><p>通常将能引起中断的各个因素称为中断源。中断源可分为两大类：一类为不可屏蔽中断，这类中断CPU不能禁止，如电源掉电；另一类为可屏蔽中断，对可屏蔽中断源的请求，CPU可根据该中断源是否被屏蔽来确定是否给予响应。若未屏蔽则能响应；若已被屏蔽，则CPU不能响应。</p><h3 id="7-4-2-中断请求标记和中断判优逻辑"><a href="#7-4-2-中断请求标记和中断判优逻辑" class="headerlink" title="7.4.2 中断请求标记和中断判优逻辑"></a>7.4.2 中断请求标记和中断判优逻辑</h3><h4 id="中断请求标记"><a href="#中断请求标记" class="headerlink" title="中断请求标记"></a>中断请求标记</h4><h4 id="中断判优逻辑"><a href="#中断判优逻辑" class="headerlink" title="中断判优逻辑"></a>中断判优逻辑</h4><h3 id="7-4-3-中断服务程序入口地址的寻找"><a href="#7-4-3-中断服务程序入口地址的寻找" class="headerlink" title="7.4.3 中断服务程序入口地址的寻找"></a>7.4.3 中断服务程序入口地址的寻找</h3><p>通常有两种方法寻找入口地址：硬件向量法和软件查询法。</p><h3 id="7-4-4-中断响应"><a href="#7-4-4-中断响应" class="headerlink" title="7.4.4 中断响应"></a>7.4.4 中断响应</h3><h4 id="响应中断的条件"><a href="#响应中断的条件" class="headerlink" title="响应中断的条件"></a>响应中断的条件</h4><p>当EINT&#x3D;1，且有中断请求（即中断请求标记触发器INTR&#x3D;1）时，CPU可以响应中断。</p><h4 id="响应中断时间"><a href="#响应中断时间" class="headerlink" title="响应中断时间"></a>响应中断时间</h4><p>之所以CPU在指令的执行周期后进入中断周期，是因为CPU在执行周期的结束时刻同一向所有中断源发中断查询信号，只有此时CPU才能获知哪个中断源有请求。 可在指令执行过程中设置若干个查询断点，CPU在每个“查询断点”时刻均发中断查询信号，以便发现有中断请求便可及时响应。</p><h4 id="中断隐指令"><a href="#中断隐指令" class="headerlink" title="中断隐指令"></a>中断隐指令</h4><p>（1）保护程序断点 （2）寻找中断服务程序的入口地址 （3）关中断</p><h3 id="7-4-5-保护现场和恢复现场"><a href="#7-4-5-保护现场和恢复现场" class="headerlink" title="7.4.5 保护现场和恢复现场"></a>7.4.5 保护现场和恢复现场</h3><p>保护现场：应该包括保护程序断点和保护CPU内部各寄存器内容的现场两个方面。程序断点的现场由中断隐指令完成，各寄存器内的现场可在中断服务程序中由用户（或系统）用机器指令编程实现。</p><p>恢复现场：是指在中断返回前，必须将寄存器的内容回复到中断处理前的状态，这部分工作也由中断服务程序完成。</p><h3 id="7-4-6-中断屏蔽技术"><a href="#7-4-6-中断屏蔽技术" class="headerlink" title="7.4.6 中断屏蔽技术"></a>7.4.6 中断屏蔽技术</h3><h4 id="多重中断概念"><a href="#多重中断概念" class="headerlink" title="多重中断概念"></a>多重中断概念</h4><p>当CPU正在执行某个中断服务程序时，另一个中断源又提出了新的中断请求，而CPU又响应了这个系难道请求，暂时停止正在运行的服务程序，转去执行新的中断服务程序，这称为多重中断，又称为中断嵌套。如果的CPU对新请求不予响应，待执行完当前的服务程序后再响应，即为单重中断。</p><h4 id="实现多重中断的条件"><a href="#实现多重中断的条件" class="headerlink" title="实现多重中断的条件"></a>实现多重中断的条件</h4><p>1.提前设置“开中断”指令。 多重中断“开中断”指令的位置前于单重中断，从而保证了多重中断允许出现中断嵌套。 2.优先级别高的中断源有权中断优先级别低的中断源。 为了保证级别低的中断源不干扰级别高的中断源的中断处理过程，保证上述2的试试，可采用屏蔽技术。</p><h4 id="屏蔽技术"><a href="#屏蔽技术" class="headerlink" title="屏蔽技术"></a>屏蔽技术</h4><p>（1）屏蔽触发器与屏蔽字 （2）屏蔽技术可改变优先等级 （3）屏蔽技术的其他作用</p><h4 id="多重中断的断点保护"><a href="#多重中断的断点保护" class="headerlink" title="多重中断的断点保护"></a>多重中断的断点保护</h4><h2 id="7-5-小结"><a href="#7-5-小结" class="headerlink" title="7.5 小结"></a>7.5 小结</h2><ol><li><p>CPU实质包括运算器和控制器，功能：取指令、分析指令（分析此指令要完成什么操作，分析参与这次操作的操作数地址）、执行指令</p></li><li><p>MAR（存储器地址寄存器）、MDR（存储器数据寄存器）、PC（程序计数器）、IR（指令寄存器）</p></li><li><p>CPU每取出并执行一条指令所需的全部时间称为指令周期。</p><h3 id="引起流水线性能的因素"><a href="#引起流水线性能的因素" class="headerlink" title="引起流水线性能的因素"></a>引起流水线性能的因素</h3><p> 结构相关、数据相关、控制相关</p><h3 id="引起中断的各种因素-1"><a href="#引起中断的各种因素-1" class="headerlink" title="引起中断的各种因素"></a>引起中断的各种因素</h3><p> 人为设置的中断、程序性事故、硬件故障、I&#x2F;O设备、外部事件</p></li></ol><h2 id="7-6-例题"><a href="#7-6-例题" class="headerlink" title="7.6 例题"></a>7.6 例题</h2><blockquote><p><img src="/images/1.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/FD0F9CD4-2619-4F9F-95BE-3BF546880A2A.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p><img src="/images/2.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/F1DD9958-7255-4ED5-9195-4FFC8E1FACE2.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>8.12 在5个功能段的指令流水线中，假设每段的执行时间分别为10ns，8ns，10ns，10ns和7ns。对于完成12条指令的流水线而言，其加速比为多少？该流水线的实际吞吐率为多少？</p><p>根据流水线时空图，第一条指令出结果需要5个时钟周期，当流水线满载时，每个时钟周期可以出一个结果，即执行完一条指令。完成12条指令需要16个时钟周期，故实际吞吐率为:</p><p> 12&#x2F;(10ns* 16)&#x3D;0.75*10^8条指令&#x2F;秒</p><p>对于本题五级流水线而言，处理12条指令所需的时钟周期数为T&#x3D;5+ (12-1) &#x3D;16个， 而非流水线处理12条指令需要5*12&#x3D;60个，故该流水处理器的加速比为   60&#x2F;16&#x3D;3.75。</p></blockquote><p> </p><blockquote><p>8.18 什么是中断隐指令，有哪些功能？</p><p><strong>中断隐指令</strong>：CPU响应中断后，即进入中断周期。</p><p>功能：</p><ol><li>保护程序断点</li><li>寻找中断服务程序的入口地址</li><li>关中断</li></ol></blockquote><p> </p><blockquote><p>8.19 中断系统中采用屏蔽技术有何作用？</p><ol><li>屏蔽触发器与屏蔽字</li><li>屏蔽技术可改变优先等级</li><li>屏蔽技术的其他作用</li></ol></blockquote><p> </p><blockquote><p><img src="/images/FA7FC9E8-6EDC-4E83-9CE3-5E295976F5C8.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/722BDA51-2D08-4733-BA7B-DDC1E2BC17F8.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p><img src="/images/VC9YM177S3GJAIBM2.png"></p><blockquote><p><img src="/images/lALPD0sXSsEKvqfNAg7NBWE_1377_526.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/A43F0FDD-6DC3-4920-BB5B-1F5F6CBCD373.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>8.26 设某机配有A、B、C三台设备，其优先顺序按A-B-C降序排列，为改变中断处理次序，它们的中断屏蔽字设置如下：</p><table align="center"><tbody><tr><td valign="top" width="94"><p align="center">设备</p></td><td valign="top" width="94"><p align="center">屏蔽字</p></td></tr></tbody></table><table align="center"><tbody><tr><td valign="top" width="94"><p align="center">A</p></td><td valign="top" width="94"><p align="center">111</p></td></tr></tbody></table><table align="center"><tbody><tr><td valign="top" width="94"><p align="center">B</p></td><td valign="top" width="94"><p align="center">010</p></td></tr></tbody></table><table align="center"><tbody><tr><td valign="top" width="94"><p align="center">C</p></td><td valign="top" width="94"><p align="center">011</p></td></tr></tbody></table><p> </p><p><img src="/images/708FAC65-A3D6-4AC1-9F1E-77E702420951.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p><img src="/images/455157F9-80F5-4DD7-9C48-297E3A7FBAF8.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/CD48DB4FF87D2E795DEA787F7168187D.jpg"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p><img src="/images/F6F2BF88-5357-4DB2-823D-35F47D87F907.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/image-80.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（八）图像特征提取</title>
    <link href="/2021/06/20/output/shuzituxiang8/index/"/>
    <url>/2021/06/20/output/shuzituxiang8/index/</url>
    
    <content type="html"><![CDATA[<h2 id="8-1-图像纹理的主要特征及描述与提取方法"><a href="#8-1-图像纹理的主要特征及描述与提取方法" class="headerlink" title="8.1 图像纹理的主要特征及描述与提取方法"></a>8.1 图像纹理的主要特征及描述与提取方法</h2><h3 id="8-1-1-图像纹理的主要特征"><a href="#8-1-1-图像纹理的主要特征" class="headerlink" title="8.1.1 图像纹理的主要特征"></a>8.1.1 图像纹理的主要特征</h3><ol><li>粗糙度</li><li>方向性</li><li>规则性</li></ol><h3 id="8-1-2-图像纹理特征及描述与提取方法"><a href="#8-1-2-图像纹理特征及描述与提取方法" class="headerlink" title="8.1.2 图像纹理特征及描述与提取方法"></a>8.1.2 图像纹理特征及描述与提取方法</h3><ol><li>统计分析法</li><li>结构分析法</li><li>模型分析法</li><li>频谱分析法</li></ol><h2 id="8-2-基于灰度共生矩阵的纹理特征提取方法"><a href="#8-2-基于灰度共生矩阵的纹理特征提取方法" class="headerlink" title="8.2 基于灰度共生矩阵的纹理特征提取方法"></a>8.2 基于灰度共生矩阵的纹理特征提取方法</h2><h3 id="8-2-1-概念及定义"><a href="#8-2-1-概念及定义" class="headerlink" title="8.2.1 概念及定义"></a>8.2.1 概念及定义</h3><p>灰度共生矩阵定义为像素对的联合概率分布，是一个对称矩阵，它不仅反映图像灰度在相邻的方向、相邻间隔、变化幅度的综合信息，但也反映了相同的灰度级像素之间的位置分布特征，是计算纹理特征的基础。</p><p>在图像中任意取一点(x,y)及偏离它的一点(x+a,y+b)(其中，a、b为整数，人为定义)构成点对。设该点对的灰度值为(f1,f2)，再令点(x,y)在整幅图像上移动，则会得到不同的(f1,f2)值。</p><p>设图像的最大灰度级为L，则f2与f2的组合共有L*L种。对于整幅图像，统计出每一种(f1,f2)值出现的次数，然后排列成一个方阵，再用(f1,f2)出现的总次数将他们归一化为出现的概率P(f1,f2)，由此产生的矩阵为灰度共生矩阵。θ方向上的间隔为d的灰度共生矩阵实际上是θ方向间隔为d的灰度变化量的联合概率分布。</p><h3 id="8-2-2-共生矩阵的计算"><a href="#8-2-2-共生矩阵的计算" class="headerlink" title="8.2.2 共生矩阵的计算"></a>8.2.2 共生矩阵的计算</h3><p><img src="/images/image-65.png"> 公式(1)中d表示像素间隔，(k,l), (m,n)分别为原像素和偏移后的像素坐标，其中k,m为纵坐标，D为图像范围。 举例说明，假设原图像如图1.a所示 <img src="/images/image-66.png"><img src="/images/image-67.png"><img src="/images/image-68.png"> 对1.b中蓝色字表示原像素灰度值，红字为偏移后像素灰度值。则对矩阵元素P0°,1 (0,0)表示1.a中在0°方向上（包括正和负方向）相距为1的(0,0)点对有两对，考虑正负方向的加倍效果，P0°,1 (0,0)&#x3D;4。同样由于公式(1)对距离d定义的双向性，使得灰度共生矩阵为对称矩阵。</p><p>为了减小计算量，可将d定义为沿θ正方向。则(1)式变为 <img src="/images/image-69.png"> 由1.a得到的新的灰度共生矩阵为 <img src="/images/image-70.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（九）形态学图像处理</title>
    <link href="/2021/06/20/output/shuzituxiang9/index/"/>
    <url>/2021/06/20/output/shuzituxiang9/index/</url>
    
    <content type="html"><![CDATA[<h2 id="9-1-集合论基础"><a href="#9-1-集合论基础" class="headerlink" title="9.1 集合论基础"></a>9.1 集合论基础</h2><h3 id="9-1-1-集合的概念"><a href="#9-1-1-集合的概念" class="headerlink" title="9.1.1 集合的概念"></a>9.1.1 集合的概念</h3><h3 id="9-1-2-集合间的关系和运算"><a href="#9-1-2-集合间的关系和运算" class="headerlink" title="9.1.2 集合间的关系和运算"></a>9.1.2 集合间的关系和运算</h3><p><img src="/images/image-71.png"></p><h2 id="9-2-二值形态学的基本运算"><a href="#9-2-二值形态学的基本运算" class="headerlink" title="9.2 二值形态学的基本运算"></a>9.2 二值形态学的基本运算</h2><h3 id="9-2-1-膨胀"><a href="#9-2-1-膨胀" class="headerlink" title="9.2.1 膨胀"></a>9.2.1 膨胀</h3><p>顾名思义，膨胀就是使图像中的目标“变粗”的操作，这种特殊方式和变粗程度由一种被称为结构元的形状来控制，A被B膨胀，表示为A⊕B，集合操作表示为： <code>A\oplus B=\&#123;x|((\hat&#123;B&#125;)_y\cap A)\neq \text&#123;\O&#125;\&#125;</code> 其中，A是图像，B是结构元，结构元通常比图像小得多。膨胀满足结合律和交换律。</p><h3 id="9-2-2-腐蚀"><a href="#9-2-2-腐蚀" class="headerlink" title="9.2.2 腐蚀"></a>9.2.2 腐蚀</h3><p>腐蚀是膨胀的反操作，是将图像中的目标进行“细化”的操作，收缩的方法和程度也由结构元控制。A被B腐蚀表示为AΘB，集合操作表示为： <code>A\ominus B=\&#123;x|(B)_y\subseteq A \&#125;</code></p><h3 id="9-2-3-开运算"><a href="#9-2-3-开运算" class="headerlink" title="9.2.3 开运算"></a>9.2.3 开运算</h3><p>使用同一结构元素对目标图像先进行腐蚀运算，然后再进行膨胀运算称为开运算。 <code>A\circ B=(A \ominus B)\oplus B</code></p><h3 id="9-2-4-闭运算"><a href="#9-2-4-闭运算" class="headerlink" title="9.2.4 闭运算"></a>9.2.4 闭运算</h3><p>使用同一结构元素对目标图像先进行膨胀运算，然后再进行腐蚀运算称为闭运算。 <code>A\cdot B=(A \oplus B)\ominus B</code></p><h2 id="9-3-二值形态学基本运算性质"><a href="#9-3-二值形态学基本运算性质" class="headerlink" title="9.3 二值形态学基本运算性质"></a>9.3 二值形态学基本运算性质</h2><ol><li>单调性</li><li>扩展性</li><li>交换性</li><li>结合性</li><li>平移不变性</li></ol><h2 id="9-3-灰度形态学的基本运算"><a href="#9-3-灰度形态学的基本运算" class="headerlink" title="9.3 灰度形态学的基本运算"></a>9.3 灰度形态学的基本运算</h2><h3 id="9-3-1-灰度腐蚀"><a href="#9-3-1-灰度腐蚀" class="headerlink" title="9.3.1 灰度腐蚀"></a>9.3.1 灰度腐蚀</h3><p>用结构元b对灰度图像f的灰度进行腐蚀，表示为： <code>(f\ominus b)(s,t)=min\&#123;f(s+x,t+y)-b(x,y)|(s+x),(t+y)\in D_f;(x,y)\in D_b\&#125;</code></p><h3 id="9-3-2-灰度膨胀"><a href="#9-3-2-灰度膨胀" class="headerlink" title="9.3.2 灰度膨胀"></a>9.3.2 灰度膨胀</h3><p>用结构元b对灰度图像f的灰度进行膨胀，表示为： <code>(f\oplus b)(s,t)=max\&#123;f(s-x,t-y)+b(x,y)|(s-t),(t-y)\in D_f;(x,y)\in D_b\&#125;</code></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（六）图像压缩编码</title>
    <link href="/2021/06/20/output/shuzituxiang6/index/"/>
    <url>/2021/06/20/output/shuzituxiang6/index/</url>
    
    <content type="html"><![CDATA[<h2 id="6-1-DCT变换"><a href="#6-1-DCT变换" class="headerlink" title="6.1 DCT变换"></a>6.1 DCT变换</h2><ol><li>DCT变换避免了复述运算。由于图像矩阵是实数矩阵，那么它的DCT也是实数。</li><li>DCT是正交变换，其变换矩阵是正交阵，变换核是可分离的。</li><li>DCT与IDCT具有相同的变换核，因此具有相同的变换矩阵，即正变换与逆变换公用同一个算法模块。</li><li>DCT具有更强的信息集中能力，能将最多的信息放到最少的系数上。</li></ol><h3 id="6-1-1-一维DCT变换"><a href="#6-1-1-一维DCT变换" class="headerlink" title="6.1.1 一维DCT变换"></a>6.1.1 一维DCT变换</h3><p><img src="/images/FC7284B1-8860-46E4-AA9E-B5AB73ECB065.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/09173FD0-ADDC-47AD-A0C1-55A12999B95C.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/4B5C21E1-BED8-4025-AC63-E59CEC6FF34A.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="6-1-2-二维DCT变换"><a href="#6-1-2-二维DCT变换" class="headerlink" title="6.1.2 二维DCT变换"></a>6.1.2 二维DCT变换</h3><p><img src="/images/32B44907-962B-4F73-B56A-426757C572A3.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="6-2-图像编码基础"><a href="#6-2-图像编码基础" class="headerlink" title="6.2 图像编码基础"></a>6.2 图像编码基础</h2><h3 id="6-2-1-图像压缩的基本概念"><a href="#6-2-1-图像压缩的基本概念" class="headerlink" title="6.2.1 图像压缩的基本概念"></a>6.2.1 图像压缩的基本概念</h3><h4 id="定义：-减少表示图像的数据量"><a href="#定义：-减少表示图像的数据量" class="headerlink" title="定义： 减少表示图像的数据量"></a>定义： 减少表示图像的数据量</h4><ol><li>在图像传输的时候，可传输较少的数据量，但不减少图像所表达的信息量</li><li>在图像存储时，可减少所需的存储空间，同时较少存储所需的时间</li></ol><h4 id="图像信息可以压缩的根据"><a href="#图像信息可以压缩的根据" class="headerlink" title="图像信息可以压缩的根据"></a>图像信息可以压缩的根据</h4><ol><li>图像信号存在大量的冗余</li><li>可以利用人的视觉特性</li></ol><p>图像信息的冗余度表现在结构和统计两个方面</p><p>图像信息结构上冗余度表现为：图像具有很强的空间（帧内）相关性和时间（帧间）相关性。</p><p><strong>编码冗余、像素间冗余、心理-视觉冗余、帧间冗余。</strong></p><p>获取图像压缩质量的好坏是通过计算其<strong>压缩比</strong>得到的，公式为：</p><p><img src="/images/image-62.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><strong>图像熵数学公式</strong>为：</p><p><img src="/images/image-2.gif">  <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="6-2-2-图像编码模型"><a href="#6-2-2-图像编码模型" class="headerlink" title="6.2.2 图像编码模型"></a>6.2.2 图像编码模型</h3><p><img src="/images/image-61.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="6-3-霍夫曼码"><a href="#6-3-霍夫曼码" class="headerlink" title="6.3 霍夫曼码"></a>6.3 霍夫曼码</h2><h3 id="6-3-1-概念"><a href="#6-3-1-概念" class="headerlink" title="6.3.1 概念"></a>6.3.1 概念</h3><p>哈夫曼编码是<strong>可变字长编码</strong>(VLC)的一种。该方法<strong>完全依据字符出现概率</strong>来构造异字头的平均长度最短的码字，有时称之为<strong>最佳编码</strong>，一般就叫做Huffman编码（有时也称为霍夫曼编码）。通俗来说就是，<strong>信源符号出现频率越高，使用的码字就越少。</strong></p><h3 id="6-3-2-编码过程"><a href="#6-3-2-编码过程" class="headerlink" title="6.3.2 编码过程"></a>6.3.2 编码过程</h3><ol><li>对符号的概率进行排序，建立信源递减序列；</li><li>对每个约简的信源进行编码，从最小的信源开始，已知到原始信源。</li></ol><h3 id="6-3-3-霍夫曼编码"><a href="#6-3-3-霍夫曼编码" class="headerlink" title="6.3.3 霍夫曼编码"></a>6.3.3 霍夫曼编码</h3><p>霍夫曼码的产生不是压缩过程。为了实现成为霍夫曼码的压缩，对于产生码字的符号，不管它们的灰度级、行程长度，还是其他灰度映射操作的输出，都必须在生成码字一致的情况下被变换或映射。</p><p>霍夫曼树─即<strong>最优二叉树</strong>，带权路径长度最小的二叉树，经常应用于<strong>数据压缩</strong>。 在计算机信息处理中，“霍夫曼编码”是一种<strong>一致性编码法</strong>（又称“熵编码法”），用于数据的<strong>无损耗压缩</strong>。</p><p>霍夫曼编码的原理： 霍夫曼方法的第一步是通过对所考虑符号的概率进行排序，并将具有最小概率的符号合并为一个符号来替代下次信源化简过程中的符号，从而创建一个简化信源系列。如下图所示那样，载最左边一组虚构的信源符号集合及它们的概率根据概率值的减少从上到下排列，为了形成第一次信源简化，底部的两个概率0.06和0.04进行合并，形成一个概率值为0.1的“复合符号”，这个复合符号及其对应的概率被置于第一个信源简化的列中，以便简化后的信源概率仍然按照其值从大到小进行排列，这个过程一直重复持续到信源只有两个符号的简化信源为止。</p><p><img src="/images/image-64.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="6-3-4-霍夫曼译码"><a href="#6-3-4-霍夫曼译码" class="headerlink" title="6.3.4 霍夫曼译码"></a>6.3.4 霍夫曼译码</h3><p>经过霍夫曼编码再译码之后，才获得有用的图像，译码器必须计算用来编码x的霍夫曼码，再反映射已编码的数据来重建x，这是一种逆过程，但是缺少了反量化的步骤（这是不可逆转的一步）。</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（七）图像分割</title>
    <link href="/2021/06/18/output/shuzituxiang7/index/"/>
    <url>/2021/06/18/output/shuzituxiang7/index/</url>
    
    <content type="html"><![CDATA[<h2 id="7-1-图像分割概述"><a href="#7-1-图像分割概述" class="headerlink" title="7.1 图像分割概述"></a>7.1 图像分割概述</h2><h3 id="7-1-1-定义"><a href="#7-1-1-定义" class="headerlink" title="7.1.1 定义"></a>7.1.1 定义</h3><p>将数字图像划分成互不相交，有意义的，具有相同性质的区域的过程。</p><p>图像的分割一种是基于灰度的不连续变来分割（图像边缘）；</p><p>一种是基于实现制定的准则将图像分割为相似的区域。</p><p>数学定义：</p><p><img src="/images/image-58.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><ol><li>表明分割区域要覆盖整个图像且各区域互不重叠；</li><li>表明每一个区域都具有相同的性质；</li><li>表明两个区域性质相异不能合并为一个区域。</li></ol><h3 id="7-1-2-准则"><a href="#7-1-2-准则" class="headerlink" title="7.1.2 准则"></a>7.1.2 准则</h3><p>准则：<strong>每个区域内部的特征或属性是相同或相似的</strong>。</p><p>特征可以是：像素灰度值、边缘轮廓曲线、纹理特征、形状和颜色…</p><h3 id="7-1-3-意义"><a href="#7-1-3-意义" class="headerlink" title="7.1.3 意义"></a>7.1.3 意义</h3><p>图像分割是图像处理与理解、模式识别和人工智能等多个领域中一个十分重要且又十分困难的问题，是计算机视觉技术中关键步骤，如下图所示。图像分割应用在许多方面。</p><p><strong>应用</strong>：汽车车型自动识别系统、检查癌细胞、精密零件表面缺陷检测，处理卫星拍摄的地形地貌照片等。在所有这些应用领域中，最终结果很大程度上依赖于图像分割的结果。</p><p><img src="/images/image-57.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="7-2-基于边缘检测的图像分割"><a href="#7-2-基于边缘检测的图像分割" class="headerlink" title="7.2 基于边缘检测的图像分割"></a>7.2 基于边缘检测的图像分割</h2><p>先提取区域边界，再确定边界限定的区域；涉及到边缘检测核边缘连接两个部分。</p><p><strong>基本思想</strong>：先检测图像中的边缘点再按一定策略链接成轮廓，从而构成分割区域。</p><h3 id="7-2-1-边缘检测"><a href="#7-2-1-边缘检测" class="headerlink" title="7.2.1 边缘检测"></a>7.2.1 边缘检测</h3><h4 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h4><p>边界存在于目标与背景、目标与目标、区域与区域之间，是图像最基本的特征，包含了在实际应用中用于分割的基本信息。人物体时，首先感觉到的便是边缘。</p><h4 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h4><p>检测灰度级或者结构具有突变的地方，这种灰度或者结构不连续性称为边缘。</p><h4 id="处理方法"><a href="#处理方法" class="headerlink" title="处理方法"></a>处理方法</h4><p>图像中相邻的不同区域间总存在边缘，边缘处像素的灰度值不连续，这种不连续性可通过求导数来检测到，因此常用灰度的一阶或二阶微分算子进行边缘检测。直观理解如下图所示，一阶导数的峰值，二阶导数的零点值。</p><h3 id="7-2-2-Hough变换"><a href="#7-2-2-Hough变换" class="headerlink" title="7.2.2 Hough变换"></a>7.2.2 Hough变换</h3><p>原理：把直线上的点的坐标变换到过点的直线的系数域，通过利用共线和直线相交的关系，使直线的提取问题转化为计数问题</p><p><img src="/images/image-59.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="7-3-基于阈值的图像分割"><a href="#7-3-基于阈值的图像分割" class="headerlink" title="7.3 基于阈值的图像分割"></a>7.3 基于阈值的图像分割</h2><p>确定每个像素的归属区域，从而完成分割；阈值分割法（本文介绍）、区域生长法和分裂合并法等。</p><h3 id="7-3-1-阈值分割法"><a href="#7-3-1-阈值分割法" class="headerlink" title="7.3.1 阈值分割法"></a>7.3.1 <strong>阈值分割法</strong></h3><p>基本原理：通过设定不同的特征阈值，把图像像素点分为若干类</p><ul><li>确定一个灰度阈值</li><li>将灰度值大于给定阈值的像元判归为某一个物体，赋予同一个编号</li><li>将灰度值小于给定阈值的像元统一判归为另一类物体，赋于另外一个编号。</li></ul><p><strong>适用：</strong>要分割的物体与图像的背景有较强对比度的图像。被分割的物体内部灰度值比较均一且它周围的背景灰度值也比较均一，该法效果比较理想。</p><p><strong>关键：</strong>如何找到合适的阈值。</p><p><strong>简单直方图分割法：</strong>60年代中期，Prewitt提出了直方图双峰法，即如果灰度级直方图呈明显的双峰状，则选取两峰之间的谷底所对应的灰度级作为阈值。</p><p>直方图阈值分割法可用数学表达式来描述。设图像f(i, j)，其灰度级范围为[z1, z2]，设T为阈值，是z1和z2内任一值，可得一幅二值图像，其数学表达式为:</p><p><img src="/images/image-60.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>全局阈值的选择方法有：<strong>人工选择法，直方图技术选择法，迭代式阈值选择法，最大类间方差法</strong>。</p><h2 id="7-4-基于跟踪的图像分割"><a href="#7-4-基于跟踪的图像分割" class="headerlink" title="7.4 基于跟踪的图像分割"></a>7.4 基于跟踪的图像分割</h2><h3 id="7-4-1-轮廓跟踪法"><a href="#7-4-1-轮廓跟踪法" class="headerlink" title="7.4.1 轮廓跟踪法"></a>7.4.1 轮廓跟踪法</h3><h3 id="7-4-2-光栅跟踪法"><a href="#7-4-2-光栅跟踪法" class="headerlink" title="7.4.2 光栅跟踪法"></a>7.4.2 光栅跟踪法</h3><h2 id="7-5-基于区域的图像分割"><a href="#7-5-基于区域的图像分割" class="headerlink" title="7.5 基于区域的图像分割"></a>7.5 基于区域的图像分割</h2><h3 id="7-5-1-区域生长法"><a href="#7-5-1-区域生长法" class="headerlink" title="7.5.1 区域生长法"></a>7.5.1 区域生长法</h3><h3 id="7-5-2-分裂合并法"><a href="#7-5-2-分裂合并法" class="headerlink" title="7.5.2 分裂合并法"></a>7.5.2 分裂合并法</h3>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（四）输入输出系统</title>
    <link href="/2021/06/17/output/jizu4/index/"/>
    <url>/2021/06/17/output/jizu4/index/</url>
    
    <content type="html"><![CDATA[<h2 id="4-1-端口、接口的区别"><a href="#4-1-端口、接口的区别" class="headerlink" title="4.1 端口、接口的区别"></a>4.1 端口、接口的区别</h2><p>接口(Interface)和端口(Port)是两个不同的概念。端口是指接口电路中的一些寄存器，这些寄存器分别用来存放数据信息、控制信息和状态信息，相应的端口分别称为数据端口、控制端口和状态端口。若干个端口加上相应的控制逻辑才能组成接口。CPU通过输入指令，从端口读入信息，通过输出指令，可将信息写入端口中。</p><h2 id="4-2-与程序中断方式相比，DMA方式的特点"><a href="#4-2-与程序中断方式相比，DMA方式的特点" class="headerlink" title="4.2 与程序中断方式相比，DMA方式的特点"></a>4.2 与程序中断方式相比，DMA方式的特点</h2><ol><li>从<strong>数据传送</strong>看，程序中断靠<strong>程序传送</strong>，DMA方式靠硬件传送</li><li>从<strong>CPU响应时间</strong>看，程序中断方式是在一条指令执行结束时响应，而DMA方式可在命令周期内的<strong>任意</strong>存储周期结束时响应</li><li>程序中断方式有<strong>处理异常事件</strong>的能力，DMA方式没有这种能力，主要用于大批数据的传送，如磁盘存取、图像处理、高速数据采集系统等，可提高数据吞吐量</li><li>程序中断方式需要中断现行程序，故需保护现场；DMA方式不中断现行程序，无需保护现场</li><li>DMA的优先级比程序中断优先级高</li></ol><h2 id="4-3-小结"><a href="#4-3-小结" class="headerlink" title="4.3 小结"></a>4.3 小结</h2><ol><li>I&#x2F;O设备与主机信息传送的控制方式：<strong>程序查询方式、程序中断方式、DMA方式</strong></li><li>计算机在执行程序的过程中，当出现异常情况或特殊请求时，计算机停止现行程序的运行，转向对这些异常情况或特殊请求对处理，处理结束后再返回到现行程序的间断处，继续执行原程序，这就是“中断”</li><li>凡是能向CPU提出中断请求的各种因素统称为<strong>中断源</strong></li><li>CPU总是在统一的时间，即每条指令执行阶段的最后时刻，查询所有的设备是否有中断请求</li></ol><h2 id="4-4-例题"><a href="#4-4-例题" class="headerlink" title="4.4 例题"></a>4.4 例题</h2><blockquote><p>5.1 I&#x2F;O设备有哪些编址方式，各有何特点？</p><p>统一编址：采用主存单元地址完全一样的格式，I&#x2F;O设备和主存占用同一个地址空间，CPU可像访问主存一样访问I&#x2F;O设备，不需要安排专门的I&#x2F;O指令</p><p>独立编址：有完全不同于主存地址格式的地址编码，此时I&#x2F;O地址与主存地址是两个独立的空间，CPU需要通过专门的指令来访问该地址空间。</p></blockquote><p> </p><blockquote><p>5.4 试比较程序查询方式、程序中断方式和DMA方式对CPU效率的影响。</p><p>程序查询方式：需要cpu时刻咨询io，直到io准备好响应，工作效率很低。</p><p>程序中断方式：不咨询设备是否已经准备就绪，继续执行自身程序，只有当io设备准备就绪cpu发出中断请求后才予以响应。这种方式消除了踏步现象，比程序咨询方式效率更高，提高了CPU资源利用率和工作效率。</p><p>DMA方式：DMA控制器从cpu完全接管对总线的控制，数据交换不经过cpu，直接在内存和外围设备之间进行，以高速传送数据，大大减轻了cpu的数据交换工作压力，cpu工作效率更高。</p></blockquote><p> </p><blockquote><p>说明中断向量地址和入口地址的区别和联系。</p><p>中断向量地址和入口地址的区别：</p><p>向量地址是硬件电路（向量编码器）产生的中断源的内存地址编号，中断入口地址是中断服务程序首址。</p><p>中断向量地址和入口地址的联系：</p><p>中断向量地址可理解为中断服务程序入口地址指示器（入口地址的地址），通过它访存可获得中断服务程序入口地址。 (两种方法：在向量地址所指单元内放一条JMP指令；主存中设向量地址表。）</p></blockquote><p> </p><blockquote><p>什么是多重中断？实现多重中断的必要条件是什么？</p><p>多重中断是指：当CPU执行某个中断服务程序的过程中，发生了更高级、更紧迫的事件，CPU暂停现行中断服务程序的执行，转去处理该事件的中断，处理完返回现行中断服务程序继续执行的过程。</p><p>实现多重中断的必要条件是：在现行中断服务期间，中断允许触发器为1，即开中断。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（五）计算机的运算方法</title>
    <link href="/2021/06/17/output/jizu5/index/"/>
    <url>/2021/06/17/output/jizu5/index/</url>
    
    <content type="html"><![CDATA[<h2 id="5-1-有符号数"><a href="#5-1-有符号数" class="headerlink" title="5.1 有符号数"></a>5.1 有符号数</h2><h3 id="5-1-1-原码表示法"><a href="#5-1-1-原码表示法" class="headerlink" title="5.1.1 原码表示法"></a>5.1.1 原码表示法</h3><p>原码是机器数中最简单的一种表示形式，符号位为0表示正数，符号位为1表示负数，数值位即为真值的绝对值，故原码表示又称为带符号的绝对值表示。</p><h4 id="整数原码定义"><a href="#整数原码定义" class="headerlink" title="整数原码定义"></a><strong>整数原码定义</strong></h4><p><code>[x]_原=\left\&#123;\begin&#123;matrix&#125; 0,x&amp; 2^n&gt;x&gt;0&amp; \\ 2^n-x,&amp; 0\ge x&gt;-2^n &amp; \end&#123;matrix&#125;\right.</code></p><p>式中，x为真值，n为整数的位数。</p><h4 id="小数原码定义"><a href="#小数原码定义" class="headerlink" title="小数原码定义"></a><strong>小数原码定义</strong></h4><p><code>[x]_原=\left\&#123;\begin&#123;matrix&#125; x,&amp; 1&gt;x \ge 0&amp; \\ 1-x,&amp; 0\ge x&gt;-1 &amp; \end&#123;matrix&#125;\right.</code></p><p>当x为0时，[+0.0000]原=0.0000，[−0.0000]原=1.0000 可见原码中的“零”有两种表示形式。</p><h3 id="5-1-2-补码表示法"><a href="#5-1-2-补码表示法" class="headerlink" title="5.1.2 补码表示法"></a>5.1.2 补码表示法</h3><h4 id="补数的概念"><a href="#补数的概念" class="headerlink" title="补数的概念"></a>补数的概念</h4><p>只要确定了“模”，就可找到一个与负数灯架的整数来代替此负数，这样就可把减法运算用加法实现。</p><ol><li>一个负数可用它的正补数来代替，而这个正补数可以用模加上负数本身求得。</li><li>一个正数和一个负数互为补数时，它们绝对值之和即为模数。</li><li>正数的补数即该正数本身。</li></ol><h4 id="整数补码定义"><a href="#整数补码定义" class="headerlink" title="整数补码定义"></a>整数补码定义</h4><p><code>[x]_补=\left\&#123;\begin&#123;matrix&#125; 0,x&amp; 2^n&gt;x \ge 0&amp; \\ 2^&#123;n+1&#125;+x,&amp; 0&gt; x \ge -2^n (mod\;2^&#123;n+1&#125;) &amp; \end&#123;matrix&#125;\right.</code></p><h4 id="小数补码定义"><a href="#小数补码定义" class="headerlink" title="小数补码定义"></a>小数补码定义</h4><p><code>[x]_补=\left\&#123;\begin&#123;matrix&#125; x&amp; 1&gt;x \ge 0&amp; \\ 2+x,&amp; 0&gt;x \ge -1(mod\;2^&#123;n+1&#125;) &amp; \end&#123;matrix&#125;\right.</code></p><p>当x为0时，[+0]补=[−0]补=0.0000，即补码中的“零”只有一种表示形式。由于补码中的零只有一种表示形式，故它比原码能多表示一个“-1”。</p><p>当模数为4时，形成双符号位的补码。这种双符号位的补码又称为<strong>变形补码</strong>，它在阶码运算和溢出判断中有其特殊作用。如x&#x3D;-0.1001，对mod 22而言，</p><p>对于负数，由[x]补求[x]原和由[x]原求[x]补都可用规则<strong>除符号位外，每位求反，末尾加一</strong>。</p><p>论真值是正还是负，由[x]补求[−x]补求都是采用规则<strong>连同符号位在内，每位取反，末尾加一</strong>。</p><h3 id="5-1-3-反码表示法"><a href="#5-1-3-反码表示法" class="headerlink" title="5.1.3 反码表示法"></a>5.1.3 反码表示法</h3><p>反码同行用来作为由原码求补码或者由补码求原码的中间过渡。</p><h4 id="整数反码定义"><a href="#整数反码定义" class="headerlink" title="整数反码定义"></a>整数反码定义</h4><p><code>[x]_反=\left\&#123;\begin&#123;matrix&#125; 0,x&amp; 2^n&gt;x \ge 0&amp; \\ (2^&#123;n+1&#125;-1)+x,&amp; 0 \ge x &gt; -2^n (mod\;(2^&#123;n+1&#125;-1)) &amp; \end&#123;matrix&#125;\right.</code></p><h4 id="小数反码定义"><a href="#小数反码定义" class="headerlink" title="小数反码定义"></a>小数反码定义</h4><p><code>[x]_反=\left\&#123;\begin&#123;matrix&#125; x&amp; 1&gt;x \ge 0&amp; \\ (2-2^&#123;-n&#125;)+x,&amp; 0 \ge x &gt; -1(mod\;(2-2^&#123;-n&#125;)) &amp; \end&#123;matrix&#125;\right.</code></p><p>当x为0时，[+0.0000]反=0.0000 [−0.0000]反=(10.0000−0.0001)−0.0000&#x3D;1.1111 可见[+0]反不等于[−0]反，反码中的“零”有两种表示形式。</p><p>实际上，反码也可看作是mod(2−2−n)（对于小数）或mod（2n+1−1）（对于整数）的补码。与补码相比，仅在末尾差1，故也称小数的补码为2的补码，小数的反码为1的补码。</p><p>对于负数，由[x]反求[x]原和由[x]原求[x]反都可用规则<strong>除符号位外，每位求反</strong>。</p><blockquote><p>三种机器数的特点可归纳如下：</p><ul><li>三种机器数的最高位均为符号位。符号位和数值部分之间可用“.”(对于小数)或“,”（对于整数）隔开</li><li>当真值为正时，原码、补码和反码的表示形式均相同，即符号位用“0”表示，数值部分与真值相同。</li><li>当真值为负时，原码、补码和反码的表示形式不同，但其符号位用“1”表示，而数值部分有这样的关系：<strong>补码是原码的“求反加一”，反码是原码的“每位求反”</strong>。</li></ul></blockquote><h3 id="5-1-4-移码表示法"><a href="#5-1-4-移码表示法" class="headerlink" title="5.1.4 移码表示法"></a>5.1.4 移码表示法</h3><h4 id="移码定义"><a href="#移码定义" class="headerlink" title="移码定义"></a>移码定义</h4><p>[x]移=2n+x(2n&gt;x≥-2n)</p><p>其实移码就是在真值上加一个常数2n。在数轴上移码所表示的范围恰好对应于真值在数轴上的范围向轴的正方向移动2n个单元，故称为移码。</p><p>当x为0时，[+0]移=[−0]移=1.0000，即移码中的“零”只有一种表示形式，故它比原码能多表示一个负数。</p><p>移码的最小真值为全0。利用移码的这一特点，当浮点数的阶码用移码表示时，就能很方便地判断阶码的大小。</p><p>同一个真值的移码和补码仅差一个符号位，若将补码的符号位由“0”改为“1”或从“1”改为“0”，即可得该真值的移码。</p><h2 id="5-2-数的定点表示和浮点表示"><a href="#5-2-数的定点表示和浮点表示" class="headerlink" title="5.2 数的定点表示和浮点表示"></a>5.2 数的定点表示和浮点表示</h2><p>共有两种方法表示小数点的存在，即定点表示和浮点表示。定点表示的数称为<strong>定点数</strong>，浮点表示的数称为<strong>浮点数</strong>。</p><h3 id="5-2-1-定点表示"><a href="#5-2-1-定点表示" class="headerlink" title="5.2.1 定点表示"></a>5.2.1 定点表示</h3><p>小数点在某一位置的数为<strong>定点数</strong>，有以下两种格式。</p><p><img src="/images/image-40.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>当小数点位于数符和第一数值位之间时，机器内的数为纯小数；当小数点位于数值位之后时，机器内的数为纯整数。采用定点数的机器称为定点机。数值部分的位数n决定了定点机中数的表示范围。若机器数采用原码，小数定点机中的数的表示范围是−(1−2−n)<del>(1−2−n)，整数定点机中数的表示范围是−(2n−1)</del>(2n−1)。 在定点机中，由于小数点的位置固定不定，故当机器处理的数不是纯小数或纯整数时，必须乘上一个<strong>比例因子</strong>，否则会产生“溢出”。</p><h3 id="5-2-2-浮点表示"><a href="#5-2-2-浮点表示" class="headerlink" title="5.2.2 浮点表示"></a>5.2.2 浮点表示</h3><p><strong>浮点数</strong>即小数点的位置可以浮动的数。</p><p>通常浮点数被表示成</p><p>N&#x3D;S×rj</p><p>式中，S为尾数，j为阶码，r是基数。在计算机中，基数可取2、4、8、16等。 为了提高数据精度以及便于浮点数的比较，在计算机中规定浮点数的尾数用纯小数形式。将尾数最高位为1的浮点数称为 <strong>规格化数</strong>。浮点数表示成规格化形式后，其精度最高。</p><p> </p><h3 id="5-2-3-浮点数的表示形式"><a href="#5-2-3-浮点数的表示形式" class="headerlink" title="5.2.3 浮点数的表示形式"></a>5.2.3 浮点数的表示形式</h3><p>采用这种数据格式的机器称为<strong>浮点机</strong>。</p><p><img src="/images/image-41.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>浮点数由阶码j和尾数S两部分组成。阶码是整数，阶符和阶码的位数m合起来反映浮点数的表示范围及小数点的实际位置；尾数是小数，其位数n反映了浮点数的精度；尾数的符号Sf代表浮点数的正负。</p><h3 id="5-2-4-浮点数的表示范围"><a href="#5-2-4-浮点数的表示范围" class="headerlink" title="5.2.4 浮点数的表示范围"></a>5.2.4 浮点数的表示范围</h3><p>设浮点数阶码的数值位取m位，尾数的数值位取n位，当浮点数为非规格化数时，它在数轴上的表示范围如下。</p><p><img src="/images/image-42.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>最大正数为22m−1×(1−2−n)；最小正数为2(-2m−1)×2−n；最大负数为−2(-2m−1)×2−n；最小负数为−22m−1×(1−2−n)。</p><p>当浮点数阶码大于最大阶码时，称为上溢，此时机器停止运算，进行中断溢出处理；当浮点数阶码小于最小阶码时，称为下溢，此时溢出的数绝对值很小，通常将尾数各位强置为0，按机器零处理，此时机器可以继续运行。</p><p>一旦浮点数的位数确定后，合理分配阶码和尾数的位数，直接影响浮点数的表示范围和精度。对于短实数（总位数为32位），阶码取8位（含阶符1位），尾数取24位（含数符1位）；对于长实数（总位数为64位），阶码取11位（含阶符1位），尾数取53位（含数符1位）；对于临时实数（总位数为80位），阶码取15位（含阶符1位），尾数取65位（含数符1位）。</p><p>当一个浮点数尾数为0时，不论其阶码为何值；或阶码等于或小于它所能表示的最小数时，不管其尾数为何值，机器都把该浮点数作为零看待，并称之为机器零。如果浮点数的阶码用移码表示，尾数用补码表示，则当阶码为它所能表示的最小数2−m且尾数为0时，其阶码（移码）全为0，尾数（补码）也全为0，这样的机器零为000…00000，全零表示有利于简化机器中判“0”电路。</p><h3 id="5-2-4-浮点数的规格化"><a href="#5-2-4-浮点数的规格化" class="headerlink" title="5.2.4 浮点数的规格化"></a>5.2.4 浮点数的规格化</h3><p>将非规格化数转换成规格化数的过程称为规格化。对于技术不同的浮点数，因其规格化数的形式不同，规格化过程也不同。</p><ol><li>当基数为2时，尾数最高位为1的数为规格化数。规格化时，尾数左移一位，阶码减1（称为左规）；尾数右移一位，阶码加1（称为右规）。</li><li>当基数为4时，尾数最高两位不全为零的数为规格化数。规格化时，尾数左移两位，阶码减1；尾数右移两位，阶码加1。</li><li>当基数为8时，尾数最高三位不全为零的数为规格化数。规格化时，尾数左移三位，阶码减1；尾数右移三位，阶码加1。</li></ol><p>一般来说，基数r越大，可表示的浮点数范围越大，而且所表示的数的个数也越多。但r越多，浮点数的精度反而下降。</p><h2 id="5-3-定点数和浮点数的比较"><a href="#5-3-定点数和浮点数的比较" class="headerlink" title="5.3 定点数和浮点数的比较"></a>5.3 定点数和浮点数的比较</h2><ul><li>当浮点机和定点机中数的位数相同时，浮点数的表示范围比定点数大得多。</li><li>当浮点数为规格化数时，其相对精度远比定点数高。</li><li>浮点数运算要分阶码部分和尾数部分，而且运算结果都要求规格化，故浮点运算步骤比定点运算步骤多，运算速度比定点运算的低，运算线路比定点运算的复杂。</li><li>在溢出的判断方法上，浮点数是对规格化数的阶码进行判断，而定点数是对数值本身进行判断。</li></ul><p>浮点数在数的表示范围、数的精度、溢出处理和程序编程方面（不取比例因子）均优于定点数。到哪在运算规则、运算速度及硬件成本方面又不如定点数。</p><h2 id="5-4-IEEE-754标准"><a href="#5-4-IEEE-754标准" class="headerlink" title="5.4 IEEE 754标准"></a>5.4 IEEE 754标准</h2><p>浮点数一般采用IEEE指定的国际标准，这种标注形式如下。</p><p><img src="/images/image-43.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>按IEEE标准，常用的浮点数有三种：</p><p><img src="/images/image-44.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><strong>阶码用移码表示</strong>，阶码的真值都被加上一个常数（偏移量），如短实数、长实数、临时实数的偏移量用十六进制数表示分别为7FH、3FFH、3FFFH。尾数部分通常都是规格化表示，即非“0”的有效位最高位总是“1”，但在IEEE标准中，有效位呈如下形式。</p><p>1♠ffff……fff</p><p>其中 ♠表示假想的二进制小数点。在实际表示中，对短实数和长实数，这个整数位的1省略，称 <strong>隐藏位</strong>；对于临时实数不采用隐藏位方案。</p><p><img src="/images/image-45.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="5-5-定点运算"><a href="#5-5-定点运算" class="headerlink" title="5.5 定点运算"></a>5.5 定点运算</h2><h3 id="5-5-1-移位运算"><a href="#5-5-1-移位运算" class="headerlink" title="5.5.1 移位运算"></a>5.5.1 移位运算</h3><h4 id="移位的意义"><a href="#移位的意义" class="headerlink" title="移位的意义"></a>移位的意义</h4><p>二进制表示的机器数在相对于小数点作n位左移或右移时，其实质就是该数乘以或除以2n。当某计算机没有乘除法运算线路时，可以采用移位和加法相结合，实现乘除运算。</p><p>计算机中机器数的字长往往是固定的，当机器数左移n位或右移n位时，必然会使其n位低位或n位高位出现空位。对有符号数的移位称为算数移位。</p><h4 id="算数移位的规则"><a href="#算数移位的规则" class="headerlink" title="算数移位的规则"></a>算数移位的规则</h4><p>对于正数，由于[x]原=[x]补=[x]反=真值，故移位后出现的空位均以0添之。对于负数，由于原码、补码和反码的表示形式不同，故当机器数移位时，对其空位的填补规则也不同。 <strong>不论是整数还是负数，移位后其符号位均不变。</strong></p><p><img src="/images/image-46.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><ol><li>机器数为正时，不论是左移还是右移，添补的代码均为0.</li><li>由于负数的原码数值部分与真值相同，故在移位时只要使符号位不变，其空位均添0即可。</li><li>由于负数的反码各位除符号位外与负数的原码正好相反，故移位后所舔代码应与原码相反，即全部添1。</li><li>负数的补码左移时，因空位出现在低位，则添补的代码与原码相同，即添0；右移时因空位出现在高位，则填补的代码应与反码相同，即添1。</li></ol><p>对于正数，三种机器数移位后符号位均不变，左移时最高数位丢1，结果出错；右移时最低数位丢1，影响精度。</p><p>对于负数，三种机器数算术移位后符号位均不变。负数的原码左移时，高位丢1，结果出错；右移时，低位丢1，影响精度。负数的补码左移时，高位丢0，结果出错；右移时，低位丢1，影响精度。负数的反码左移时，高位丢0，结果出错；右移时，低位丢0，影响精度。</p><h4 id="算数移位和逻辑移位的区别"><a href="#算数移位和逻辑移位的区别" class="headerlink" title="算数移位和逻辑移位的区别"></a>算数移位和逻辑移位的区别</h4><p>有符号数的移位称为<strong>算数移位</strong>，无符号数的移位称为<strong>逻辑移位</strong>。逻辑移位的规则是：<strong>逻辑左移时，高位移丢，低位添0；逻辑右移时，低位移丢，高位添0。</strong>为了避免算术左移时最高数位丢1，可采用带进位（Cy）的移位。算术左移时，符号位移至Cy，最高数位就可避免移丢。</p><h3 id="5-5-2-加法与减法运算"><a href="#5-5-2-加法与减法运算" class="headerlink" title="5.5.2 加法与减法运算"></a>5.5.2 加法与减法运算</h3><h4 id="补码加法运算的基本公式"><a href="#补码加法运算的基本公式" class="headerlink" title="补码加法运算的基本公式"></a>补码加法运算的基本公式</h4><p><img src="/images/B5835E24-2341-425E-BB10-EE866F9A69FE.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h4 id="补码减法运算的基本公式"><a href="#补码减法运算的基本公式" class="headerlink" title="补码减法运算的基本公式"></a>补码减法运算的基本公式</h4><p><img src="/images/75AED03B-5911-4E6D-A63F-C27DC678BFDA.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h4 id="溢出判断"><a href="#溢出判断" class="headerlink" title="溢出判断"></a>溢出判断</h4><h5 id="用一位符号位判断溢出"><a href="#用一位符号位判断溢出" class="headerlink" title="用一位符号位判断溢出"></a>用一位符号位判断溢出</h5><p>只要实际参加操作的两个数符号相同，结果又与原操作数的符号不同，即为溢出。</p><h5 id="用两位符号位判断溢出"><a href="#用两位符号位判断溢出" class="headerlink" title="用两位符号位判断溢出"></a>用两位符号位判断溢出</h5><p>2为符号位的补码，即变形补码，它是以4为模的，其定义为</p><p><code>[x]_&#123;补&#125;=\left\&#123;\begin&#123;matrix&#125; x&amp; 1&gt;x \ge 0&amp; \\ 4+x,&amp; 0&gt; x \ge -1 (mod\;4) &amp; \end&#123;matrix&#125;\right.</code></p><p>在用变形补码作加法时，2位符号位要连同数值部分一起参加运算，而且高位符号位产生的进位自动丢失，便可得正确结果，即</p><p>[x]补’+[y]补’=[x+y]补’(mod 4)</p><p>变形补码判断溢出的原则是： <strong>当2位符号位不同时，表示溢出，否则无溢出。</strong>不论是否发生溢出，高位（第1位）符号位永远代表真正的符号。</p><h4 id="补码加减运算控制流程"><a href="#补码加减运算控制流程" class="headerlink" title="补码加减运算控制流程"></a>补码加减运算控制流程</h4><p><img src="/images/image-47.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="5-5-3-乘法运算"><a href="#5-5-3-乘法运算" class="headerlink" title="5.5.3 乘法运算"></a>5.5.3 乘法运算</h3><h4 id="笔算乘法的改进"><a href="#笔算乘法的改进" class="headerlink" title="笔算乘法的改进"></a>笔算乘法的改进</h4><p>两数相乘的过程，可视为加法和移位两种运算。</p><p>例：设A&#x3D;0.1101，B&#x3D;0.1011，求A×B。</p><p><img src="/images/image-48.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>运算规则如下：</p><ul><li>乘法运算可用移位和加法来实现，两个4位数相乘，总共需要4次加法运算和4次移位。</li><li>由乘数的末尾值确定被乘数是否与原部分积相加，然后右移一位，形成新的部分积；同时乘数也右移一位，由次低位作为新的末位，空出最高位放部分积的最低位。</li><li>每次作加法时，被乘数仅仅与原部分积的高位相加，其低位被移至成乘数所空出的高位位置。</li></ul><p>用一个寄存器存放被乘数，一个寄存器存放乘积的高位，另一个寄存器存放乘数及乘积的低位，再配上加法器及其他相应电路，就可组成乘法器。又因加法只在部分积的高位进行，故不但节省了器材，而且还缩短了运算时间。</p><h4 id="原码乘法"><a href="#原码乘法" class="headerlink" title="原码乘法"></a>原码乘法</h4><p>上述讨论结果可直接用于原码一位乘，只需加上符号位处理即可。</p><h5 id="原码一位乘运算原则"><a href="#原码一位乘运算原则" class="headerlink" title="原码一位乘运算原则"></a>原码一位乘运算原则</h5><p>以小数为例： 设  [x]原=x0.x1x2…xn [y]原=y0.y1y2…yn</p><p>则[x]原⋅[y]原=x0⊕y0.(0.x1x2…xn)(0.y1y2…yn) 式中，0.x1x2…xn为x的绝对值，记作x*；0.y1y2…yn为y的绝对值，记作y∗。</p><p>原码一位乘运算规则：</p><ul><li>乘积的符号位由两原码符号位异或运算结果决定。</li><li>乘积的数值部分由两数绝对值相乘，其通式为：x∗⋅y∗=2−1(y1x∗+(…+2−1(yn−1x∗+2−1(ynx∗+0))…))</li></ul><h5 id="例：已知x-0-1110，y-0-1101，求-x⋅y-原。"><a href="#例：已知x-0-1110，y-0-1101，求-x⋅y-原。" class="headerlink" title="例：已知x&#x3D;-0.1110，y&#x3D;-0.1101，求[x⋅y]原。"></a>例：已知x&#x3D;-0.1110，y&#x3D;-0.1101，求[x⋅y]原。</h5><p><img src="/images/image-49.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>故[x⋅y]原=0.10110110</p><h4 id="补码乘法"><a href="#补码乘法" class="headerlink" title="补码乘法"></a>补码乘法</h4><p><img src="/images/05F7859F-4788-4F3B-97E0-0D9172E88BEB.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h5 id="例：已知-x-补-1-0101，-y-补-0-1101，求-x⋅y-补。"><a href="#例：已知-x-补-1-0101，-y-补-0-1101，求-x⋅y-补。" class="headerlink" title="例：已知[x]补=1.0101，[y]补=0.1101，求[x⋅y]补。"></a>例：已知[x]补=1.0101，[y]补=0.1101，求[x⋅y]补。</h5><p><img src="/images/image-50.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>故乘积[x⋅y]补=1.01110001。</p><h4 id="Booth算法"><a href="#Booth算法" class="headerlink" title="Booth算法"></a>Booth算法</h4><p><img src="/images/FCB3A323-8652-4E7B-B48A-9B8D25765330.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h5 id="例：已知-x-补-0-1101，-y-补-0-1011，求-x⋅y-补。"><a href="#例：已知-x-补-0-1101，-y-补-0-1011，求-x⋅y-补。" class="headerlink" title="例：已知[x]补=0.1101，[y]补=0.1011，求[x⋅y]补。"></a>例：已知[x]补=0.1101，[y]补=0.1011，求[x⋅y]补。</h5><p><img src="/images/image-51.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>故[x⋅y]补=0.10001111。</p><h3 id="5-5-3-除法运算"><a href="#5-5-3-除法运算" class="headerlink" title="5.5.3 除法运算"></a>5.5.3 除法运算</h3><h4 id="分析笔算除法"><a href="#分析笔算除法" class="headerlink" title="分析笔算除法"></a>分析笔算除法</h4><p>特点可归纳如下：</p><ul><li>每次上商都是由心算来比较余数（被除数）和除数的大小，确定商为“1”还是为“0”。</li><li>每做一次减法，总是保持余数不懂，低位补0，再减去右移后的除数。</li><li>上商的位置不固定。</li><li>商符单独处理。</li></ul><p>上述规则若照搬到计算机里实现有一定困难：</p><ul><li>机器不能“心算”上商，必须通过比较被除数（或余数）和除数绝对值大小来确定商值。</li><li>按照每次减法总是保持余数不懂低位补0，再减去右移后的除数这一规则，在要求加法器的位数必须为除数的两倍。</li><li>笔算求商时是从高位向低位逐位求的，而要求机器把每位商直接写到寄存器的不同位置也是不可取的。</li></ul><h4 id="原码除法"><a href="#原码除法" class="headerlink" title="原码除法"></a>原码除法</h4><p>小数定点除法对被除数和除数有一定的约束，即必须满足下列条件：</p><ul><li>0&lt;|被除数|≤|除数|</li></ul><p>实现除法运算时，还应避免除数为0或被除数为0。 原码除法中由于对余数的处理不同，又可分为 恢复余数法和 不恢复余数法（加减交替法）两种。</p><h5 id="恢复余数法"><a href="#恢复余数法" class="headerlink" title="恢复余数法"></a>恢复余数法</h5><p>特点是：当余数为负时，需加上除数，将其恢复成原来的余数。</p><p>例：已知x=−0.1011，y=−0.1101，求[x&#x2F;y]原。</p><p><img src="/images/image-52.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>故商值为0.1101，商的符号位为x0⊕y0=1⊕1=0，故[x&#x2F;y]原=0.1101。</p><p>第一次上的商在商的整数位上，这对小数除法而言，可用它作溢出判断。即当该位为“1”时，表示此除法溢出，不能进行，应由程序进行处理；当该位为“0”时，说明除法合法，可以进行。 在恢复余数法中，每当余数为负时，都需恢复余数，这就延长了机器出发的时间，操作也很不规则，对线路结构不利。加减交替法可克服这些缺点。</p><h5 id="加减交替法"><a href="#加减交替法" class="headerlink" title="加减交替法"></a>加减交替法</h5><p>加减交替法又称为不恢复余数法，可以认为它是恢复余数法的一种改进算法。</p><p>分析原码恢复余数法得知：</p><ul><li>当余数Ri&gt;0时，可上商“1”，再对Ri左移一位后减除数，即2Ri−y∗。</li><li>当余数Ri&lt;0时，可上商“0”，然后先做Ri+y∗，即完成恢复余数的运算，再做2(Ri+y∗)−y∗，即2Ri+y∗。</li></ul><p>故原码恢复余数法可归纳为：</p><ul><li>当Ri&gt;0时，上商“1”，做2Ri−y∗的运算。</li><li>当Ri&lt;0时，上商“0”，做2Ri+y∗的运算。</li></ul><p>例：已知x=−0.1011，y=−0.1101，求[x&#x2F;y]原。</p><p><img src="/images/image-53.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>故商值为0.1101，商的符号位为x0⊕y0=1⊕0=1，故[x&#x2F;y]原=1.1101。</p><h4 id="补码除法"><a href="#补码除法" class="headerlink" title="补码除法"></a>补码除法</h4><h5 id="补码加减交替法运算规则"><a href="#补码加减交替法运算规则" class="headerlink" title="补码加减交替法运算规则"></a>补码加减交替法运算规则</h5><p>补码除法的符号位和数值部分是一起参加运算的。 <strong>1.欲确定商值，必须先比较被除数和除数的大小，然后才能求得商值。</strong> 比较被除数和除数的大小</p><ul><li>当被除数与除数同号时，做减法，若得到的余数与除数同号，表示“够减”，否则表示“不够减”。</li><li>当被除数与除数异号时，做加法，若得到的余数与除数同号，表示“够减”，否则表示“不够减”。</li></ul><p><img src="/images/image-54.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>商值的确定</p><ul><li>如果[x]补与[y]补同号，商为正，则“够减”时上商“1”，“不够减”时上商“0”。</li><li>如果[x]补与[y]补异号，商为负，则“够减”时上商“0”，“不够减”时上商“1”。</li></ul><p><strong>2.在补码除法中，商符是在求商的过程中自动形成的。</strong></p><p><strong>3.新余数[Ri+1]补的获得方法与原码加减交替法极相似</strong></p><p>例：已知x=0.1001，y=0.1101，求[x&#x2F;y]补。</p><p><img src="/images/image-55.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>所以[x&#x2F;y]补=0.1011。</p><h2 id="5-6-浮点四则运算"><a href="#5-6-浮点四则运算" class="headerlink" title="5.6 浮点四则运算"></a>5.6 浮点四则运算</h2><p><img src="/images/71A0406B-20D9-4D80-98BE-02E695E0FCFF.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="5-6-1-浮点加减运算"><a href="#5-6-1-浮点加减运算" class="headerlink" title="5.6.1 浮点加减运算"></a>5.6.1 浮点加减运算</h3><p>浮点数加减运算必须按以下几步进行：</p><ol><li>对阶，使两数的小数点位置对齐。</li><li>尾数求和，将对阶后的两尾数按定点加减运算规则求和（差）。</li><li>规格化，为增加有效数字的位数，提高运算精度，必须将求和（差）后的尾数规格化。</li><li>舍入，为提高精度，要考虑尾数右移时丢失的数值位。</li><li>溢出判断，即判断结果是否溢出。</li></ol><h3 id="5-6-2-浮点乘除法运算"><a href="#5-6-2-浮点乘除法运算" class="headerlink" title="5.6.2 浮点乘除法运算"></a>5.6.2 浮点乘除法运算</h3><p><img src="/images/image-56.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h4 id="阶码运算"><a href="#阶码运算" class="headerlink" title="阶码运算"></a>阶码运算</h4><h4 id="尾数运算"><a href="#尾数运算" class="headerlink" title="尾数运算"></a>尾数运算</h4><h2 id="5-例题"><a href="#5-例题" class="headerlink" title="5.例题"></a>5.例题</h2><blockquote><p><img src="/images/481B6F94FE975A975197523BC7B72FBB.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/4DF787DD-4AC7-4C39-8B30-4F32AD558C76.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>6.5 已知[x]补，求[x]原和x。</p><p>[x1]补=1.1100;  [x2]补=1.1001;  [x3]补=0.1110;  [x4]补=1.0000;</p><p>[x5]补=1,0101;  [x6]补=1,1100;  [x7]补=0,0111;  [x8]补=1,0000</p><p>[x]补与[x]原、x的对应关系如下：</p><table align="center"><tbody><tr><td valign="top" width="43"><p align="center"><span style="color: #ff0000;">[x]<sub>补</sub></span></p></td><td valign="top" width="63"><p align="center"><span style="color: #ff0000;">1.1100</span></p></td><td valign="top" width="62"><p align="center"><span style="color: #ff0000;">1.1001</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">0.1110</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">1.0000</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">1,0101</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">1,1100</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">0,0111</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">1,0000</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td valign="top" width="43"><p align="center"><span style="color: #ff0000;">[x]<sub>原</sub></span></p></td><td valign="top" width="63"><p align="center"><span style="color: #ff0000;">1.0100</span></p></td><td valign="top" width="62"><p align="center"><span style="color: #ff0000;">1.0111</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">0.1110</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">无</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">1,1011</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">1,0100</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">0,0111</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">无</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td valign="top" width="43"><p align="center"><span style="color: #ff0000;">x</span></p></td><td valign="top" width="63"><p align="center"><span style="color: #ff0000;">-0.0100</span></p></td><td valign="top" width="62"><p align="center"><span style="color: #ff0000;">-0.0111</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">0.1110</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">-1</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">-1011</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">-100</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">0,0111</span></p></td><td valign="top" width="60"><p align="center"><span style="color: #ff0000;">-10000</span></p></td></tr></tbody></table></blockquote><p> </p><blockquote><p>6.11 已知机器数字长为4位（含1位符号位），写出整数定点机和小数定点机中原码、补码和反码的全部形式，并注明其对应的十进制真值。</p><table style="height: 67px;" width="554" align="center"><tbody><tr><td colspan="4" width="252"><p align="center"><span style="color: #ff0000;">整数定点机</span></p></td><td colspan="4" width="252"><p align="center"><span style="color: #ff0000;">小数定点机</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">原码</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">补码</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">反码</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">真值</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">原码</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">补码</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">反码</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">真值</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">+0</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">+0</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.125</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">2</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.250</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">3</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.375</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">4</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.500</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">5</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.625</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">6</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.750</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">0,111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">7</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.875</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0,000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">0.000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-1</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0.125</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-2</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0.250</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-3</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0.375</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-4</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.100</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0.500</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-5</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.101</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.011</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0.625</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-6</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.110</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.010</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0.750</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">1,111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-7</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.111</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.001</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-0.875</span></p></td></tr></tbody></table><table align="center"><tbody><tr><td width="63"><p align="center"><span style="color: #ff0000;">无</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1,000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">无</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-8</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">无</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">1.000</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">无</span></p></td><td width="63"><p align="center"><span style="color: #ff0000;">-1</span></p></td></tr></tbody></table></blockquote><p> </p><blockquote><p><img src="/images/732D658E-6A92-4FD6-8132-69FEC87BE802.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/958ADDA5-10FD-4D21-A717-65D6F5012EC6.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>6.20 用原码一位乘、两位乘和补码一位乘（Booth算法）、两位乘计算x·y。</p><p>（1）x&#x3D; 0.110 111，y&#x3D; -0.101 110；</p><p>（2）x&#x3D; -0.010 111，y&#x3D; -0.010 101；</p><p>（3）x&#x3D; 19，y&#x3D; 35；</p><p>（4）x&#x3D; 0.110 11，y&#x3D; -0.111 01。</p></blockquote><p> </p><blockquote><p>6.27 </p><p><img src="/images/ECD3F4E1-7DB6-4B56-B4B7-FAD58240D999.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>（1）</p><p>x&#x3D;2101*0.101100.      y&#x3D;2100*(-0.100100).</p><p>[x]补=00,101;00.101100.  [y]补=00,100;1.011100</p><p>1)对阶</p><p>[E]补=[Jx]补+[-Jy]补=00,101+11,100&#x3D;00,001&gt;0</p><p>应Jy向Jx对齐，则</p><p>[Jy]补=00,100+00,001&#x3D;[Jx]补</p><p>[y]补=00,101;11.101110</p><p>2)尾数运算</p><p>[Sx]补+[Sy]补=00.101100+11.101110&#x3D;00.011010&gt;0</p><p>3)规格化</p><p>左规1位，阶码减1</p><p>4)舍入：无</p><p>5)溢出：无</p><p>则x+y&#x3D;2100*0.110100&#x3D;24*(13&#x2F;16)</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（四）空间域图像增强</title>
    <link href="/2021/06/17/output/shuzituxiang4/index/"/>
    <url>/2021/06/17/output/shuzituxiang4/index/</url>
    
    <content type="html"><![CDATA[<h2 id="4-1-图像增强概述"><a href="#4-1-图像增强概述" class="headerlink" title="4.1 图像增强概述"></a>4.1 图像增强概述</h2><p>目的：<strong>改善图像清晰度，将图像转换成一种更适合人活着机器进行分析处理的形式</strong>。</p><p>抑制没有用的信息，提高图像使用价值。</p><p><img src="/images/image-38.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="4-2-基于点运算的图像增强方法"><a href="#4-2-基于点运算的图像增强方法" class="headerlink" title="4.2 基于点运算的图像增强方法"></a>4.2 基于点运算的图像增强方法</h2><p>请看上节<a href="http://121.196.156.71/blog/wordpress/index.php/2021/06/16/shuzituxiang3/">数字图像的基本运算之点运算</a></p><h2 id="4-3-基于直方图的图像增强方法"><a href="#4-3-基于直方图的图像增强方法" class="headerlink" title="4.3 基于直方图的图像增强方法"></a>4.3 基于直方图的图像增强方法</h2><p>通过图像灰度直方图均衡化处理,使得图像的灰度分布趋向均匀,图像所占有的像素灰度间距拉开,加大了图像反差，改善视觉效果,达到增强目的。</p><p>主要的两个操作：<strong>直方图均衡化、直方图规定化</strong></p><h3 id="4-3-1-直方图均衡化"><a href="#4-3-1-直方图均衡化" class="headerlink" title="4.3.1 直方图均衡化"></a>4.3.1 直方图均衡化</h3><p>主要用于增强动态范围偏小的图像的对比度；</p><p>基本思想：<strong>对图像施加一种变换，使得变换后的图像的直方图成为均匀分布的形式。</strong></p><p>p53 例4.2.1</p><h3 id="4-3-2-直方图规定化"><a href="#4-3-2-直方图规定化" class="headerlink" title="4.3.2 直方图规定化"></a>4.3.2 直方图规定化</h3><p>直方图均衡方法能显著地增强图像的对比度，但其增强效果不易控制</p><p>在实际应用中，希望可以人为地改变直方图形状，使之成为某个特定的形状</p><p>p58 例4.2.2</p><h2 id="4-4-空间滤波"><a href="#4-4-空间滤波" class="headerlink" title="4.4 空间滤波"></a>4.4 空间滤波</h2><p>利用像素本身以及邻域像素的灰度进行增强的方法一般称作滤波。</p><p>滤波一般作为一种与处理方法，即通过对某个像素邻域内的像素进行某种计算，得到该像素的一个滤波值。</p><h2 id="4-5-线性滤波：模板卷积"><a href="#4-5-线性滤波：模板卷积" class="headerlink" title="4.5 线性滤波：模板卷积"></a>4.5 线性滤波：模板卷积</h2><p><img src="/images/6990A4A5-BAB2-49FB-93C6-3E4D1F98A51A.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="4-6-基于空间平滑滤波的图像增强方法"><a href="#4-6-基于空间平滑滤波的图像增强方法" class="headerlink" title="4.6 基于空间平滑滤波的图像增强方法"></a>4.6 基于空间平滑滤波的图像增强方法</h2><ol><li>以抑制噪声为主要目的的预处理算法</li><li>运算的本质是在像素邻域范围内的灰度值的（加权）平均</li><li>平滑滤波会引入边缘模糊，使图像的清晰度下降，所以研究边缘保持的平滑滤波是有意义的</li><li>平滑滤波对抑制冲激噪声和细斑纹非常有效，但对大的块状噪声和粗条纹无效</li></ol><h3 id="4-6-1-邻域平均法"><a href="#4-6-1-邻域平均法" class="headerlink" title="4.6.1 邻域平均法"></a>4.6.1 邻域平均法</h3><p><img src="/images/138D1E5C-CA39-4C26-B8CF-D0FB7DE76D43.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="4-7-基于空间锐化滤波的图像增强方法"><a href="#4-7-基于空间锐化滤波的图像增强方法" class="headerlink" title="4.7 基于空间锐化滤波的图像增强方法"></a>4.7 基于空间锐化滤波的图像增强方法</h2><p>目的：<strong>使边缘和轮廓模糊的图像变得清晰</strong></p><ol><li>图像模糊往往是由于对图像的平均或积分运算引起的，对图像进行积分运算的逆运算，如微分运算可以达到锐化的目的</li><li>从频谱分析的角度，图像模糊的实质是高频分量缺失</li><li>能进行锐化处理的图像必须要有较高的信噪比，否则进行锐化处理后，信噪比会降得更低</li><li>锐化处理还经常跟边缘检测联系在一起</li></ol><h3 id="4-7-1-Roberts算子"><a href="#4-7-1-Roberts算子" class="headerlink" title="4.7.1 Roberts算子"></a>4.7.1 Roberts算子</h3><p><img src="/images/C2DF2FB3-1559-408E-8D6B-891DD680F7B2.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="4-7-2-Laplace算子"><a href="#4-7-2-Laplace算子" class="headerlink" title="4.7.2 Laplace算子"></a>4.7.2 Laplace算子</h3><p><img src="/images/9E71B9D2-5A3D-40D2-9918-683B86EBEAC2.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/60E43746-0D38-45CB-B46E-8DCACA59B376.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="4-7-3-Sobel算子"><a href="#4-7-3-Sobel算子" class="headerlink" title="4.7.3 Sobel算子"></a>4.7.3 Sobel算子</h3><p><img src="/images/1EBC63D0-39B7-4851-8929-E731029ADC72.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="4-7-4-Prewitt算子"><a href="#4-7-4-Prewitt算子" class="headerlink" title="4.7.4 Prewitt算子"></a>4.7.4 Prewitt算子</h3><h3 id=""><a href="#" class="headerlink" title=" "></a><img src="/images/AEED8104-AB50-4DA5-B684-3D684B01EE79.png"> <img src="/images/VC9YM177S3GJAIBM2.png"><img src="/images/VC9YM177S3GJAIBM2.png"></h3>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（五）频率域图像处理</title>
    <link href="/2021/06/17/output/shuzituxiang5/index/"/>
    <url>/2021/06/17/output/shuzituxiang5/index/</url>
    
    <content type="html"><![CDATA[<h2 id="5-1-图像变换"><a href="#5-1-图像变换" class="headerlink" title="5.1 图像变换"></a>5.1 图像变换</h2><p>将图像从空间2D平面变换到频率域，目的是更具图像在频率域中的某些性质对图像进行处理。</p><h3 id="5-1-1-傅立叶变换"><a href="#5-1-1-傅立叶变换" class="headerlink" title="5.1.1 傅立叶变换"></a>5.1.1 傅立叶变换</h3><h4 id="一维傅立叶变换"><a href="#一维傅立叶变换" class="headerlink" title="一维傅立叶变换"></a>一维傅立叶变换</h4><p><img src="/images/039736FC-7200-4336-804D-F51D50A62E40.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h4 id="二维傅立叶变换"><a href="#二维傅立叶变换" class="headerlink" title="二维傅立叶变换"></a>二维傅立叶变换</h4><p><img src="/images/AF0586B8-7401-4B68-A963-912543AB90D6.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="5-2-频率域图像处理"><a href="#5-2-频率域图像处理" class="headerlink" title="5.2 频率域图像处理"></a>5.2 频率域图像处理</h2><p>在频率域，图像信息表现为不同频率的组合</p><p>如果让某些频率的分量受到抑制，而其他的频率分量保持不变，则可以改变输出图像的频率分布，从而达到不同的增强目的。</p><p>频率域增强有三个步骤：</p><ol><li>将图像从图像空间转换成频率空间</li><li>在频域进行一些操作，以达到增强的目的</li><li>将增强后的图像从频率域转换成空间域</li></ol><p>频域技术的基础是<strong>卷积</strong>。</p><p><img src="/images/EDD0C800-F83B-4316-9CC7-E41AFD0819D3.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>代表空间域的卷积相当于频率域的乘积。因此可以在频率域中直接设计滤波器，对信号进行加强。</p><p><img src="/images/image-39.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="5-3-基于频率域的图像噪声消除——频率域低通滤波"><a href="#5-3-基于频率域的图像噪声消除——频率域低通滤波" class="headerlink" title="5.3 基于频率域的图像噪声消除——频率域低通滤波"></a>5.3 基于频率域的图像噪声消除——频率域低通滤波</h2><p><strong>频率域中的低通滤波与空间域的平滑处理类似。</strong></p><p>低通滤波器：能抑制高频成分幅度的滤波器。</p><ul><li>图像的边缘和噪声都对应傅立叶频谱的高频成分</li><li>频率域中的低通滤波可以去除或削弱噪声的影响，但同时也会模糊边缘细节，降低图像的清晰程度</li></ul><h3 id="5-3-1-理想低通滤波器"><a href="#5-3-1-理想低通滤波器" class="headerlink" title="5.3.1 理想低通滤波器"></a>5.3.1 理想低通滤波器</h3><p><img src="/images/E88C5C16-BF58-4891-A276-59394127EFE0.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="5-3-2-巴特沃斯低通滤波器"><a href="#5-3-2-巴特沃斯低通滤波器" class="headerlink" title="5.3.2 巴特沃斯低通滤波器"></a>5.3.2 巴特沃斯低通滤波器</h3><p><img src="/images/35906C8E-9202-4890-8979-08D4EBD3E54A.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>当H(u，v)&#x3D;0.5时，他的特性是传递函数比较光滑，连续性衰减，不陡峭，采用这个滤波器平滑抑制噪声时，图像的边缘模糊程度大大减小，没有振铃效应。</p><h3 id="5-3-3-高斯低通滤波器"><a href="#5-3-3-高斯低通滤波器" class="headerlink" title="5.3.3 高斯低通滤波器"></a>5.3.3 高斯低通滤波器</h3><h3 id="5-3-4-梯形低通滤波器"><a href="#5-3-4-梯形低通滤波器" class="headerlink" title="5.3.4 梯形低通滤波器"></a>5.3.4 梯形低通滤波器</h3><p><img src="/images/D5CA54EB-F42C-41BF-9ACB-4299CAAE7D56.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="5-3-5-指数低通滤波器"><a href="#5-3-5-指数低通滤波器" class="headerlink" title="5.3.5 指数低通滤波器"></a>5.3.5 指数低通滤波器</h3><p><img src="/images/E96DF0E3-DFF7-4AF6-9296-8D736B5E8CCA.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="5-4-基于频率域的图像增强——频率域高通滤波"><a href="#5-4-基于频率域的图像增强——频率域高通滤波" class="headerlink" title="5.4 基于频率域的图像增强——频率域高通滤波"></a>5.4 基于频率域的图像增强——频率域高通滤波</h2><p><strong>频率域中的高通滤波与空间域的锐化处理类似。</strong></p><p>图像的边缘对应高频分量，锐化图像就需要使用高通滤波器。</p><p>高通滤波器保留图像的高频成分，除去低频成分。</p><p>如果Hlp(u,v)是一个低通滤波器，对应的高通滤波器可以是Hhp(u,v)&#x3D;1-Hlp(u,v)</p><h3 id="5-4-1-理想高通滤波器"><a href="#5-4-1-理想高通滤波器" class="headerlink" title="5.4.1 理想高通滤波器"></a>5.4.1 理想高通滤波器</h3><p><img src="/images/C5D9CF87-9AD0-40C3-9468-729BFB4A5106.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="5-4-2-巴特沃斯高通滤波器"><a href="#5-4-2-巴特沃斯高通滤波器" class="headerlink" title="5.4.2 巴特沃斯高通滤波器"></a>5.4.2 巴特沃斯高通滤波器</h3><p><img src="/images/A2E9B5A3-9EB3-4DC8-8240-71BD71B43273.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="5-4-3-高斯高通滤波器"><a href="#5-4-3-高斯高通滤波器" class="headerlink" title="5.4.3 高斯高通滤波器"></a>5.4.3 高斯高通滤波器</h3><h2 id="5-5-带阻滤波和带通滤波"><a href="#5-5-带阻滤波和带通滤波" class="headerlink" title="5.5 带阻滤波和带通滤波"></a>5.5 带阻滤波和带通滤波</h2><p>带阻滤波器阻止一定频率范围内的信号，允许其他频率范围的信号通过。</p><p>带通滤波器允许一定频率范围内的信号通过，阻止其他频率范围的信号。</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（一）概论和计算机的发展和应用</title>
    <link href="/2021/06/16/output/jizu1/index/"/>
    <url>/2021/06/16/output/jizu1/index/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1-基本概念"><a href="#1-1-基本概念" class="headerlink" title="1.1 基本概念"></a>1.1 基本概念</h2><ol><li>计算机系统由<strong>硬件</strong>和<strong>软件</strong>两大部分组成。</li><li>计算机的软件分为<strong>系统软件</strong>和<strong>应用软件</strong>。</li><li>翻译程序有两种，一种是<strong>编译程序</strong>，另一种是<strong>解释程序</strong>。</li><li>冯·诺依曼计算机是以<strong>运算器</strong>为中心的，现代计算机以<strong>储存器</strong>为中心的。</li><li><strong>运算器</strong>和<strong>控制器</strong>和起来统称为<strong>中央处理器（CPU）</strong>。</li><li>现代计算机可认为由三大部件组成：<strong>CPU、I&#x2F;O设备</strong>以及<strong>主存储器</strong>。</li><li><strong>CPU</strong>和<strong>主存储器</strong>合起来称为<strong>主机。</strong></li><li><strong>ALU算术逻辑单元</strong>和<strong>CU控制单元</strong>是CPU的核心部件。</li><li>机器字长是指CPU一次能处理数据的位数，通常与CPU的<strong>寄存器位数</strong>有关。</li><li>存储器的容量包括<strong>主存容量</strong>和<strong>辅存容量</strong>。</li><li>主存容量-存储单元个数*存储字长。</li><li>现在计算机的运算速度普遍采用单位时间内执行指令的平均条数来衡量，并采用<strong>MIPS</strong>作为计量单位。CPI：执行一条指令所需的时钟周期；IPC：每个时钟周期数执行的指令数目。</li></ol><h2 id="1-2-冯·诺依曼计算机的特点"><a href="#1-2-冯·诺依曼计算机的特点" class="headerlink" title="1.2 冯·诺依曼计算机的特点"></a>1.2 冯·诺依曼计算机的特点</h2><p><img src="/images/image-24.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><ol><li>计算机由<strong>运算器、存储器、控制器、输入设备、输出设备</strong>五大部件组成。</li><li>指令和数据以<strong>同等地位</strong>存放于<strong>存储器</strong>内，并可按<strong>地址</strong>寻访。</li><li>指令和数据均以<strong>二进制数</strong>表示。</li><li>指令由<strong>操作码</strong>和<strong>地址码</strong>组成，操作码用来表示操作的性质，地址码用来表示操作数在存储器中的位置。</li><li>指令在存储器内按<strong>顺序</strong>存放。通常，指令是顺序执行的，在特定条件下，可依据运算结果或根据设定的条件改变执行顺序。</li><li>机器以<strong>运算器</strong>为中心，输入输出设备与存储器间的数据传送通过运算器完成。</li></ol><p>最重要的特点是<strong>存储程序</strong>，也就是说<strong>指令</strong>和<strong>数据</strong>都存储在<strong>存储器</strong>中，CPU运行程序时从存储器中读到每一条指令 然后运行它，这就是存储程序的基本原理(定义)。</p><p> </p><blockquote><p>I&#x2F;O设备能够直接连接CPU吗？</p><p>不能，因为两者速度不匹配，需要通过接口连接。</p></blockquote><p> </p><blockquote><p>用什么部件区分M中存放的是指令还是数据？</p><p>控制器。</p><p>控制器功能：交换、检测及提供信号</p><ol><li>控制机器，控制各个部件协调一致地工作。</li><li>控制器具备数据交换功能，这是指实现CPU与控制器之间、控制器与设备之间的数据交换。</li><li>将电话比喻成人体，那么控制器就好比是人的大脑，输出各种指令，是零件灵活运行。</li><li>运算器只能完成运算，而控制器能用于控制整个CPU的工作。</li><li>通过数据总线，由CPU并行地把数据写入控制器，或从控制器中并行地读出数据。</li></ol></blockquote><h2 id="1-3-计算机系统的层次结构"><a href="#1-3-计算机系统的层次结构" class="headerlink" title="1.3 计算机系统的层次结构"></a>1.3 计算机系统的层次结构</h2><p>现代计算机系统可分为<strong>五个层次</strong>， <strong>第一级</strong>是<strong>微程序设计级</strong> <strong>第二级</strong>是<strong>一般机器级</strong> <strong>第三级</strong>是<strong>操作系统级</strong> <strong>第四级</strong>是<strong>汇编语言级</strong> <strong>第五级</strong>是<strong>高级语言级</strong></p><p><img src="/images/image-25.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/image-26.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="1-4-例题"><a href="#1-4-例题" class="headerlink" title="1.4 例题"></a>1.4 例题</h2><blockquote><p>1.1 什么是计算机系统、计算机硬件和计算机软件？硬件和软件哪个重要？</p><p><img src="/images/B7CF3F95-3833-4D90-9F8D-75E77915E57D.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>1.2 如何理解计算机系统的层次结构？</p><p><img src="/images/0CDF6E09-9D50-408B-B0DC-E55C0D64BA33.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>1.3 说明高级语言、汇编语言和机器语言的差别及其联系。 <strong>机器语言是计算机硬件能够直接识别的语言，汇编语言是机器语言的符号表示，高级语言是面向算法的语言。高级语言编写的程序（源程序）处于最高层，必须翻译成汇编语言，再由汇编程序汇编成机器语言（目标程序）之后才能被执行。</strong></p></blockquote><p> </p><blockquote><p>1.5 冯·诺依曼计算机的特点是什么？</p><p><img src="/images/511FC64B-7E09-4A53-99A6-5AA908D9D26E.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>2.1 通常，计算机的更新换代以什么为依据？</p><p><strong>主要以组成计算机基本电路的元器件为依据，如电子管、晶体管、集成电路等。</strong></p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（二）系统总线</title>
    <link href="/2021/06/16/output/jizu2/index/"/>
    <url>/2021/06/16/output/jizu2/index/</url>
    
    <content type="html"><![CDATA[<h2 id="3-1-系统总线"><a href="#3-1-系统总线" class="headerlink" title="3.1 系统总线"></a>3.1 系统总线</h2><ol><li>主存总线与DMA总线<strong>不能同时</strong>对主存进行存取，</li><li>总线分类（按照连接部件不同划分）：<strong>片内总线、系统总线、通信总线</strong>。</li><li>系统总线按照传输信息不同，分<strong>数据总线【双向传输总线】、地址总线、控制总线【一般来说是单向的】</strong>。</li><li>通信总线按照传输方式不同，分<strong>串行通信【远距离传输】、并行通信【近距离传输】</strong>。</li><li>总线特性：<strong>机械特性、电气特性、功能特性、时间特性</strong>。</li><li>总线周期分为四个阶段：<strong>申请分配阶段、寻址阶段、传数阶段、结束阶段</strong>。</li><li>总线通信方式：<strong>同步通信、异步通信、半同步通信、分离式通信</strong>。</li><li>对各不相同速度的部件而言，必须按<strong>最慢速度</strong>的部件来设置公共时钟。</li><li><strong>波特率</strong>是指单位时间内传送二级制数的位数，单位用**bps(位&#x2F;秒)**，记作波特。</li><li><strong>比特率</strong>是指单位时间内传送二进制<strong>有效数据</strong>的位数，单位用<strong>bps</strong>表示。</li></ol><p> </p><h2 id="3-2-例题"><a href="#3-2-例题" class="headerlink" title="3.2 例题"></a>3.2 例题</h2><blockquote><p>3.1 什么是总线？总线传输有何特点？为了减轻总线的负载，总线上的部件都应具备什么特点？</p><p>总线是多个部件共享的传输部件。</p><p>总线传输的特点是：某一时刻只能有一路信息在总线上传输，即分时使用。</p><p>为了减轻总线负载，总线上的部件应通过三态驱动缓冲电路与总线连通。</p></blockquote><p> </p><blockquote><p>3.2 总线如何分类？什么是系统总线？系统总线又分为几类，它们各又何作用，是单向的，还是双向的，它们与机器字长、存储字长、存储单元有何关系？</p><p>按照连接部件的不同，总线可以分为片内总线、系统总线和通信总线。</p><p>系统总线是连接CPU、主存、I&#x2F;O各部件之间的信息传输线。</p><p>系统总线按照传输信息不同又分为地址线、数据线和控制线。地址线是单向的，其根数越多，寻址空间越大，即CPU能访问的存储单元的个数越多；数据线是双向的，其根数与存储字长相同，是机器字长的整数倍。</p></blockquote><p> </p><blockquote><p>3.4 为什么要设置总线判优控制？常见的集中式总线控制有几种，各有何特点，哪种方式响应时间最快，哪种方式对电路故障最敏感？</p><p>总线判优控制解决多个部件同时申请总线时的使用权分配问题。</p><p>常见的集中式总线控制有三种：</p><ol><li>链式查询：连线简单，易于扩充，对电路故障最敏感。</li><li>计数器定时查询：优先级设置较灵活，对故障不敏感，连线及控制过程较复杂。</li><li>独立请求：速度最快，但硬件器件用量大，连线多，成本较高。<img src="/images/VC9YM177S3GJAIBM2.png"></li></ol></blockquote><p> </p><blockquote><p>3.5 解释概念：总线宽度、总线带宽、总线复用、总线的主设备（或主模块）、总线的从设备（或从模块）、总线的传输周期、总线的通信控制。</p><p>总线宽度：通常指数据总线的总根数；</p><p>总线带宽：总线的数据传输率，指单位时间内总线上传输数据的位数；</p><p>总线复用：指同一条信号线可以分时传输不同的信号；</p><p>总线的主设备（或主模块）：指一次总线传输期间，拥有总线控制权的设备（模块）；</p><p>总线的从设备（或从模块）：指一次总线传输期间，配合主设备完成数据传输的设备（模块），他只能被动接受主设备发来的命令；</p><p>总线的传输周期：指总线完成一次完整而可靠的传输所需时间；</p><p>总线的通信控制：指总线传送过程中双方的时间配合方式。</p></blockquote><p> </p><blockquote><p>3.14 设总线的时钟频率为8MHz，一个总线周期等于一个时钟周期，如果一个总线周期中并行传输16位数据，试问总线的带宽是多少？</p><p>由题意 1s有8M个时钟周期，即总线周期，</p><p>总线带宽&#x3D;8M*16&#x2F;8B&#x3D;16MBps</p></blockquote><p> </p><blockquote><p>3.15 在一个32位的总线系统中，总线的时钟频率为66MHz，假设总线最短传输周期为4个时钟周期，试计算总线的最大数据传输率。若想提高数据传输率，可采取什么措施？</p><p>由题意 1s有66M个时钟周期，</p><p>即有66M&#x2F;4个总线最短传输周期，</p><p>数据传输率&#x3D;66M&#x2F;4*32&#x2F;8B&#x3D;66MBps</p><p>如果想要提高数据传输率，可以增加总线位数、提高时钟频率。</p></blockquote><p> </p><blockquote><p>3.16 异步串行传送系统中，字符格式为：1个起始位、8个数据位、1个校验位、2个终值位。若要求每秒传送120个字符，试求传送的波特率和比特率。</p><p>波特率&#x3D;120*(1+8+1+2)&#x3D;1440bps</p><p>比特率&#x3D;120*8&#x3D;960bps</p></blockquote><p> </p><blockquote><p>假设总线的时钟频率为100MHz，总线的传输周期为4个时钟周期，总线的宽度为32位，试求总线的数据传输率。</p><p>由题意 1s 有100M个时钟周期，</p><p>即有100M&#x2F;4&#x3D;25M个总线周期，</p><p>数据传输率&#x3D;25M*32&#x2F;8B&#x3D;100MBps</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>计算机组成原理期末复习（三）存储器</title>
    <link href="/2021/06/16/output/jizu3/index/"/>
    <url>/2021/06/16/output/jizu3/index/</url>
    
    <content type="html"><![CDATA[<h2 id="4-1-存储器"><a href="#4-1-存储器" class="headerlink" title="4.1 存储器"></a>4.1 存储器</h2><p><img src="/images/image.jpeg"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/image-1.jpeg"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="4-2-存储器的分类"><a href="#4-2-存储器的分类" class="headerlink" title="4.2 存储器的分类"></a>4.2 存储器的分类</h2><p><img src="/images/4DD85DCB-F5EF-45C4-8F91-792A83F4341A.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="4-2-1-存储介质"><a href="#4-2-1-存储介质" class="headerlink" title="4.2.1 存储介质"></a>4.2.1 存储介质</h3><p>半导体器件（半导体存储器）：随机存储器</p><p>磁性材料（磁表面存储器）：磁盘存储器和磁带存储器</p><h3 id="4-2-2-存储方式"><a href="#4-2-2-存储方式" class="headerlink" title="4.2.2 存储方式"></a>4.2.2 存储方式</h3><p>随机存储器RAM</p><p>只读存储器ROM</p><p>串行访问存储器</p><h3 id="4-2-3-存储作用"><a href="#4-2-3-存储作用" class="headerlink" title="4.2.3 存储作用"></a>4.2.3 存储作用</h3><p>主要分为主存储器、辅助存储器、缓存存储器</p><p><img src="/images/image-28.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p> </p><h2 id="4-3-存储器层次结构"><a href="#4-3-存储器层次结构" class="headerlink" title="4.3 存储器层次结构"></a>4.3 存储器层次结构</h2><p><img src="/images/image-27.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p> </p><h2 id="4-4-主存储器"><a href="#4-4-主存储器" class="headerlink" title="4.4 主存储器"></a>4.4 主存储器</h2><h3 id="4-4-1-主存的基本组成"><a href="#4-4-1-主存的基本组成" class="headerlink" title="4.4.1 主存的基本组成"></a>4.4.1 主存的基本组成</h3><p><img src="/images/image-29.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p> </p><h3 id="4-4-2-主存和CPU的联系"><a href="#4-4-2-主存和CPU的联系" class="headerlink" title="4.4.2 主存和CPU的联系"></a>4.4.2 主存和CPU的联系</h3><p><img src="/images/image-30.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>备注：MDR、MAR在CPU里。</p><h3 id="4-4-3-主存中存储单元地址的分配"><a href="#4-4-3-主存中存储单元地址的分配" class="headerlink" title="4.4.3 主存中存储单元地址的分配"></a>4.4.3 主存中存储单元地址的分配</h3><p><img src="/images/image-31.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="4-4-4-主存的技术指标"><a href="#4-4-4-主存的技术指标" class="headerlink" title="4.4.4 主存的技术指标"></a>4.4.4 主存的技术指标</h3><ol><li>存储容量：主存存放二进制代码的总位数，即存储单元个数* 存储字长</li><li>存储速度：存取时间是存储器的访问时间（读出时间、写入时间）；存取周期是连续两次独立的存储器操作（读或写）所需的最小间隔时间。通常，存储周期&gt;存取时间</li><li>存储器的带宽：位&#x2F;秒</li></ol><p> </p><h2 id="4-5-高速缓冲存储器"><a href="#4-5-高速缓冲存储器" class="headerlink" title="4.5 高速缓冲存储器"></a>4.5 高速缓冲存储器</h2><h3 id="4-5-1-问题的提出"><a href="#4-5-1-问题的提出" class="headerlink" title="4.5.1 问题的提出"></a>4.5.1 问题的提出</h3><p>避免CPU“空等”现象</p><p>CPU和主存（DRAM）的速度差异</p><p><img src="/images/image-32.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="4-5-2-Cache的工作原理"><a href="#4-5-2-Cache的工作原理" class="headerlink" title="4.5.2 Cache的工作原理"></a>4.5.2 Cache的工作原理</h3><p><img src="/images/image-36.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="4-5-3-Cache-主存地址映射"><a href="#4-5-3-Cache-主存地址映射" class="headerlink" title="4.5.3 Cache-主存地址映射"></a>4.5.3 Cache-主存地址映射</h3><h4 id="直接映射"><a href="#直接映射" class="headerlink" title="直接映射"></a>直接映射</h4><p>某一主存块只能固定映射到某一缓存块</p><p>| 主存字块标记 | Cache字块标记 | 字块内地址 | | —————— | ——————- | ————— | | | | |</p><p> </p><p><img src="/images/image-33.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p> </p><h4 id="全相联映射"><a href="#全相联映射" class="headerlink" title="全相联映射"></a>全相联映射</h4><p>主存中的任一块可以映射到缓存中的任一块</p><p>| 主存字块标记 | 字块内地址 | | —————— | ————— | | | |</p><p><img src="/images/image-34.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h4 id="组相连映射"><a href="#组相连映射" class="headerlink" title="组相连映射"></a>组相连映射</h4><p>某一主存块只能映射到某一缓存组中的任一块</p><p>| 主存字块标记 | 组地址 | 字块内地址 | | —————— | ——— | ————— | | | | |</p><p> </p><p><img src="/images/image-35.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p> </p><h2 id="4-6-小结"><a href="#4-6-小结" class="headerlink" title="4.6 小结"></a>4.6 小结</h2><ol><li>在主存和CPU之间增加高速缓存的目的是<strong>解决主存和CPU速度不匹配问题</strong>。</li><li>存储器是计算机系统中的记忆设备，同来存放程序和数据。</li><li>存储器速度、容量、位价的关系：<strong>寄存器&gt;缓存&gt;主存&gt;磁盘&gt;磁带</strong>。</li><li>通常用<strong>8位二进制数表示一个字节</strong>。</li><li><strong>储存容量</strong>是指主存能存放的二进制代码的<strong>总位数</strong>。</li><li>存储速度由<strong>存储时间</strong>和<strong>存储周期</strong>来表示。</li><li>提高存储器带宽的方法：缩短存储周期、增加存储字长、增加存储体。</li><li>静态RAM是用<strong>触发器</strong>工作原理存储信息，动态RAM是靠<strong>电容存储电荷</strong>的原理来寄存信息。</li><li><strong>集中刷新</strong>是在规定的一个刷新周期内，对全部存储单元集中一段时间逐行进行刷新，此刻必须停止<strong>读&#x2F;写操作</strong>。</li></ol><p> </p><h2 id="4-7-例题"><a href="#4-7-例题" class="headerlink" title="4.7 例题"></a>4.7 例题</h2><blockquote><p>4.5 什么是存储器的带宽？若存储器的数据总线宽度为32位，存取周期位200ns，则存储器的带宽是多少？</p><p>存储器的带宽指单位时间内从存储器进出信息的最大数量。</p><p>存储器的带宽&#x3D;时钟频率*总线宽度&#x3D;1&#x2F;200ns*32位&#x3D;160M 位&#x2F;秒&#x3D;20MB&#x2F;秒</p><p>注意：字长32位，不是16位。</p></blockquote><p> </p><blockquote><p>4.6 某机字长为32位，其存储容量为64KB，按字编址其寻址范围是多少？若以主存以字节编址，试画出主存字地址和字节地址的分配情况。</p><p> 存储容量为64KB时，按字编址其寻址范围就是64K，若以主存以字节编址，其寻址范围为64K&#x2F;（32&#x2F;8）&#x3D;16K</p><p>主存字地址和字节地址的分配情况：如图</p><p> <img src="/images/image-37.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>4.7 一个容量为16K*32位的存储器，其地址线和数据线的总和是多少？当选用下列不同规格的存储芯片时，各需要多少片？1K*4位，2K*8位，4K*4位，16K*1位，4K*8位，8K*8位。</p><p>16K&#x3D;2^14，所以地址线有14根，数据线有32根，一共46根。</p><p>选择不同芯片时，各需要的片数为：</p><p> 1K*4位：（16K*32）&#x2F;（ 1K*4）&#x3D;16*8&#x3D;128片</p><p>2K*8位：（16K*32）&#x2F;（2K*8）&#x3D;8*4&#x3D;32片</p><p>4K*4位：（16K*32）&#x2F;（4K*4）&#x3D;4*8&#x3D;32片</p><p>16K*1位：（16K*32）&#x2F;（16K*1）&#x3D;1*32&#x3D;32片</p><p>4K*8位：（16K*32）&#x2F;（4K*8）&#x3D;4*4&#x3D;16片</p><p>8K*8位：（16K*32）&#x2F;（8K*8）&#x3D;2*4&#x3D;8片</p></blockquote><p> </p><blockquote><p>4.9 什么叫刷新？为什么要刷新？说明刷新的几种方法。</p><p>刷新指对DRAM定期进行的全部重写过程；</p><p>刷新原因：因电容泄漏而引起的DRAM所存信息的衰减需要及时补充，因此安排了定期刷新操作；</p><p>种类：</p><p>集中式：在最大刷新间隔时间内，集中安排一段时间进行刷新，存在CPU访存死时间； </p><p>分散式：在每个读&#x2F;写周期之后插入一个刷新周期，无CPU访存死时间； </p><p>异步式：是集中式和分散式的折衷。</p></blockquote><p> </p><blockquote><p>4.15 </p></blockquote><p> </p><blockquote><p><img src="/images/3D86EB37-F424-44F0-B368-BD1E61C7E1C3.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/lALPDg7mQdVHZPfNBD_NA-c_999_1087.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p> </p><p> </p><p>4.18 已知接收到的汉明码（按配偶原则配置）为1100100、1100111、1100000、1100001、检查上述代码是否出错？第几位出错？</p><p>1100100:</p><p>p1 &#x3D; C1 ^ 3 ^ 5 ^ 7 &#x3D; 0; p2 &#x3D; C2 ^ 3 ^ 6 ^ 7 &#x3D; 1; p3 &#x3D; C4 ^ 5 ^ 6 ^ 7 &#x3D; 1</p><p>p3p2p1 &#x3D; 110 即第6位出错，有效信息为0110</p><p>1100111：</p><p>p1 &#x3D; C1 ^ 3 ^ 5 ^ 7 &#x3D; 1; p2 &#x3D; C2 ^ 3 ^ 6 ^ 7 &#x3D; 1; p3 &#x3D; C4 ^ 5 ^ 6 ^ 7 &#x3D; 1</p><p>p3p2p1 &#x3D; 111 即第7位出错，有效信息为0110</p><p>1100000:</p><p>p1 &#x3D; C1 ^ 3 ^ 5 ^ 7 &#x3D; 1; p2 &#x3D; C2 ^ 3 ^ 6 ^ 7 &#x3D; 1; p3 &#x3D; C4 ^ 5 ^ 6 ^ 7 &#x3D; 0</p><p>p3p2p1 &#x3D; 011 即第3位出错，有效信息为1000</p><p>1100001:</p><p>p1 &#x3D; C1 ^ 3 ^ 5 ^ 7 &#x3D; 0; p2 &#x3D; C2 ^ 3 ^ 6 ^ 7 &#x3D; 0; p3 &#x3D; C4 ^ 5 ^ 6 ^ 7 &#x3D; 1</p><p>p3p2p1 &#x3D; 100 即第4位出错，有效信息为0001</p></blockquote><p> </p><blockquote><p><img src="/images/16D014C8-6918-496C-AAD0-9E41425D9443.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/0F821F49-7E90-426E-AF93-0B275BB2EC2C.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/lALPDiQ3ObHyGP7NBFXNA-c_999_1109.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>4.28 设主存容量为256K字，Cache容量为2K字，块长为4，</p><p>（1）设计Cache地址格式，设计主存地址格式 （2）在直接映射方式下，设计主存地址格式 （3）在四路组相连映射方式下，设计主存地址格式 （4）在全相连映射方式下，设计主存地址格式 （5）若存储字长为32位，是存储器按字节寻址，写出上述三种映射方式下主存的地址格式。</p><p>（1）Cache容量为2K字节，块长为4，Cache共有2K&#x2F;4&#x3D;2^11&#x2F;2^2&#x3D;2^9&#x3D;512块</p><p>Cache字地址9位，字块内地址为2位</p><p>因此，Cache地址格式设计如下：</p><p>|Cache字块地址（9位）|字块内地址（2位）|</p><p>（2）主存容量为256K字节&#x3D;2^18字节，主存地址共18位，共分256K&#x2F;4&#x3D;2^16块</p><p>主存字块标记为18-9-2&#x3D;7位</p><p>直接映射方式下主存地址格式如下：</p><p>|主存字块标记（7位）|Cache字块地址（9位）|字块内地址（2位）|</p><p>（3）根据四路组相联的条件，一组内共有4块，得Cache共分为512&#x2F;4&#x3D;2^7块</p><p>主存字块标记为18-7-2&#x3D;9位</p><p>主存地址格式设计如下：</p><p>|主存字块标记（9位）|组地址（7位）|字块内地址（2位）|</p><p>（4）在全相联映射方式下，主存字块标记为18-2&#x3D;16位，其地址格式如下：</p><p>|主存字块标记（16位）|字块内地址（2位）|</p><p>（5）若存储字长为32位，存储器按字节寻址，则主存容量为256K*32&#x2F;8&#x3D;2^20B</p><p>Cache容量为2K*32&#x2F;8&#x3D;2^13B，块长为4*32&#x2F;8&#x3D;2^4B，字块内地址为4位。</p><p>在直接映射方式下，主存字块标记为20-9-4&#x3D;7位，主存地址格式为：</p><p>|主存字块标记（7位）|Cache字块地址（9位）|字块内地址（4位）|</p><p>在四路组相联映射方式下，主存字块标记为20-7-4&#x3D;9位，主存地址格式为：</p><p>|主存字块标记（9位）|组地址（7位）|字块内地址（4位）|</p><p>在全相联映射方式下，主存字块标记为20-4&#x3D;16位，主存地址格式为：</p><p>|主存字块标记（16位）|字块内地址（4位）|</p></blockquote><p> </p><blockquote><p>4.29 假设CPU执行某段程序时共访问Cache命中4800次，访问主存200次，已知Cache的存取周期是30ns，主存的存取周期是150ns，求Cache的命中率以及Cache-主存系统的平均访问时间和效率，试问该系统的性能提高了多少？</p><p>命中率&#x3D;4800&#x2F;(4800+200)&#x3D;0.96</p><p>平均访问时间&#x3D;0.96*30+(1-0.96)*150&#x3D;34.8ns</p><p>效率&#x3D;30&#x2F;34.8*100%&#x3D;86.2%</p><p>性能变为原来的150&#x2F;34.8&#x3D;4.31倍，即提高了3.31倍</p></blockquote><p> </p><blockquote><p>4.31 设主存容量为1MB，采用直接映射方式的Cache容量为16KB，块长为4，每字32位。试问主存地址为ABCDEH的存储单元在Cache中的什么位置？</p><p>假设按照字节编址。</p><p>4*32&#x2F;8&#x3D;16B&#x3D;2^4B 得字块内地址为4位</p><p>16KB&#x2F;16B&#x3D;2^10 得Cache字块地址为10位</p><p>1MB&#x2F;16B&#x3D;2^16 得直接映射下主存地址为6位</p><p>ABCDEH&#x3D;1010 1011 1100 1101 1110 …</p><p>故该主存单元应映射到Cache的101010块的第1110字节，即第42块第14字节位置</p></blockquote><p> </p><blockquote><p><img src="/images/E25F5759-9D3B-4513-8407-7A0BDFC400D5.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/lALPDiCpvA7gppnNA-fNA_I_1010_999.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p></blockquote><p> </p><blockquote><p>4.38 磁盘组有6片磁盘，最外两侧盘面可以记录，存储区域内径22cm，外径33cm，道密度为40道&#x2F;cm，内层密度为400位&#x2F;cm，转速3600转&#x2F;分。</p><p>（1）共有多少存储面可用？</p><p>（2）共有多少柱面？</p><p>（3）盘组总存储容量是多少？</p><p>（4）数据传输率是多少？</p><p>（1）共有6*2&#x3D;12个储存面可用</p><p>（2）有效存储区域&#x3D;（33-22）&#x2F;2&#x3D;5.5cm，柱面数&#x3D;40*5.5&#x3D;220道</p><p>（3）内层道周长&#x3D;PI*22&#x3D;69.08cm</p><p>道容量&#x3D;400位&#x2F;cm*69.08cm&#x3D;3454B</p><p>面容量&#x3D;3454B*220道&#x3D;759880B</p><p>盘组总容量&#x3D;759880B*12面&#x3D;9118560B</p><p>（4）转速&#x3D;3600转&#x2F;分&#x3D;60转&#x2F;秒</p><p>数据传输率&#x3D;3454B*60转&#x2F;秒 &#x3D; 207240B&#x2F;s</p></blockquote><p> </p><blockquote><p>4.39 某磁盘存储器转速位3000转&#x2F;分，共有4个记录盘面，每毫米5道，每道记录信息12288字节，最小磁道直径位230mm，共有275道，求：</p><p>（1）磁盘存储器的存储容量。</p><p>（2）最高位密度（最小磁道的位密度）和最低位密度。</p><p>（3）磁盘数据传输率。</p><p>（4）平均等待时间。</p><p>（1）存储容量&#x3D;275*12288*4&#x3D;13516800B</p><p>（2）最高位密度&#x3D;12288B&#x2F;（PI*230mm）&#x3D;17B&#x2F;mm</p><p>最大磁道直径&#x3D;230+2*275&#x2F;5&#x3D;230+110&#x3D;340mm</p><p>最低位密度&#x3D;12288B&#x2F;（PI*340）&#x3D;11.5B&#x2F;mm</p><p>（3）3000转&#x2F;分&#x3D;50转&#x2F;秒</p><p>磁盘数据传输率&#x3D;12288B*50转&#x2F;秒&#x3D;614400B&#x2F;s</p><p>（4）平均等待时间&#x3D;1&#x2F;（2*50转&#x2F;秒）&#x3D;10ms</p></blockquote><p> </p><blockquote><p>假设CPU执行某段程序时，共访问Cache命中20 00次，访问主存50次。已知Cache的存储周期为50ns，主存的存储周期为200ns。求Cache-主存系统的命中率、效率和平均访问时间。</p><p>（1）2000&#x2F;（2000+50）*100%&#x3D;97%</p><p>（2）设访问Cache的时间为t，访问主存时间为4t，则效率e &#x3D; t&#x2F;(0.97*t+(1-0.97)*4t)*100%&#x3D;91.7%</p><p>（3）平均访问时间&#x3D;50ns*0.97+200ns*(1-0.97)&#x3D;54.5ns</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（一）概述</title>
    <link href="/2021/06/16/output/shuzituxiang1/index/"/>
    <url>/2021/06/16/output/shuzituxiang1/index/</url>
    
    <content type="html"><![CDATA[<h2 id="1-1数字图像处理相关概念"><a href="#1-1数字图像处理相关概念" class="headerlink" title="1.1数字图像处理相关概念"></a>1.1数字图像处理相关概念</h2><p><strong>图</strong>：物体透射或反射光的分布，是客观存在的</p><p><strong>像</strong>：人的视觉系统对图的接受在大脑中形成的印象或反映</p><p><strong>图像</strong>：是图和像的有机结合，是客观世界能量或状态以可视化形式在二维平面上的投影</p><p><strong>数字图像</strong>：物体的一个数字表示，是以数字格式存放的图像</p><p><strong>数字图像处理</strong>：又称为计算机图像处理，将<strong>图像信号</strong>转换成<strong>数字信号</strong>并利用<strong>计算机对其进行处理</strong>的过程，以提高图像的实用性，从而达到人们所要求的预期结果。</p><p><strong>数字图像处理目的</strong>：</p><ol><li>提高图像的视感质量，以达到赏心悦目的目的</li><li>提取图像中所包含的某些特征或特殊信息，便于计算机分析</li><li>对图像数据进行变换、编码和压缩，便于图像的存储和传输。</li></ol><p><strong>数字图像处理特点</strong>：</p><ol><li>处理信息量很大</li><li>数字图像处理占用的频带较宽</li><li>数字图像中各个像素相关性大</li></ol><h2 id="1-2数字图像处理系统流程图"><a href="#1-2数字图像处理系统流程图" class="headerlink" title="1.2数字图像处理系统流程图"></a>1.2数字图像处理系统流程图</h2><p><img src="/images/image.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/20200203154623189.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="1-3数字图像处理主要研究内容"><a href="#1-3数字图像处理主要研究内容" class="headerlink" title="1.3数字图像处理主要研究内容"></a>1.3数字图像处理主要研究内容</h2><p><img src="/images/20200203154634990.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（三）数字图像的基本运算</title>
    <link href="/2021/06/16/output/shuzituxiang3/index/"/>
    <url>/2021/06/16/output/shuzituxiang3/index/</url>
    
    <content type="html"><![CDATA[<h2 id="3-1-灰度直方图"><a href="#3-1-灰度直方图" class="headerlink" title="3.1 灰度直方图"></a>3.1 灰度直方图</h2><h3 id="3-1-1-定义"><a href="#3-1-1-定义" class="headerlink" title="3.1.1 定义"></a>3.1.1 定义</h3><p>灰度直方图是反映一幅图像中各灰度级像素出现的频率，反映灰度分布情况。横坐标用于表示像素的灰度级别，纵坐标用于表示该灰度出现的频数。</p><h3 id="3-1-2-特征"><a href="#3-1-2-特征" class="headerlink" title="3.1.2 特征"></a>3.1.2 特征</h3><ol><li><strong>只能反映灰度分布，丢失像素位置信息</strong></li><li><strong>一幅图像对应唯一灰度直方图，反之不一定</strong></li><li><strong>一幅图像分成多个区域，多个区域的直方图之和是原图像的直方图</strong></li></ol><h3 id="3-13-理解规则"><a href="#3-13-理解规则" class="headerlink" title="3.13 理解规则"></a>3.13 理解规则</h3><ol><li><strong>左黑右白，左暗右亮</strong></li><li><strong>横轴上各（亮度值）点对应的柱状高度就是分布在该亮度的像素个数</strong></li><li><strong>当柱状接近分布在整个横轴上，且至少有一个峰值时，图像的对比度较好</strong></li></ol><h3 id="3-1-4-应用"><a href="#3-1-4-应用" class="headerlink" title="3.1.4 应用"></a>3.1.4 应用</h3><ul><li>判断图像量化是否恰当</li><li>确定图像二值化的阈值</li></ul><p><img src="/images/image-6.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><ul><li>物体部分灰度值比其他部分灰度值大的时候可以统计图像中物体面积</li><li>计算图像信息量（熵）</li></ul><p><img src="/images/image-5.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="3-1-5-彩色图像转换成灰度图像"><a href="#3-1-5-彩色图像转换成灰度图像" class="headerlink" title="3.1.5 彩色图像转换成灰度图像"></a>3.1.5 彩色图像转换成灰度图像</h3><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ini"><span class="hljs-attr">im</span> = cv2.imread(<span class="hljs-string">&#x27;lenna.jpg&#x27;</span>)<br><span class="hljs-attr">nim</span> = cv2.cvtColor(im,  cv2.COLOR_BGR2GRAY)<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="3-1-6-计算直方图"><a href="#3-1-6-计算直方图" class="headerlink" title="3.1.6 计算直方图"></a>3.1.6 计算直方图</h3><p>OpenCV计算直方图的函数：calcHist()</p><p>例如：打开图像 lenna.jpg，使用 cv2.calcHist()函数计算灰度图像的直方图，以屏显打印输出的形式显示具有 100-128 灰度值的像素数目；</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import cv2<br>import matplotlib<span class="hljs-selector-class">.pyplot</span> as plt<br>im = cv2<span class="hljs-selector-class">.imread</span>(<span class="hljs-string">&#x27;lenna.jpg&#x27;</span>)<br>nim = cv2<span class="hljs-selector-class">.cvtColor</span>(im,  cv2.COLOR_BGR2GRAY)<br>jpg = cv2<span class="hljs-selector-class">.calcHist</span>(<span class="hljs-selector-attr">[im]</span>, <span class="hljs-selector-attr">[0]</span>, None, <span class="hljs-selector-attr">[29]</span>, <span class="hljs-selector-attr">[100, 128]</span>)<br>plt<span class="hljs-selector-class">.plot</span>(jpg)<br>plt<span class="hljs-selector-class">.show</span>()<br></code></pre></td></tr></table></figure><p> </p><h2 id="3-2-归一化直方图"><a href="#3-2-归一化直方图" class="headerlink" title="3.2 归一化直方图"></a>3.2 归一化直方图</h2><p><img src="/images/D108A660-1968-4C99-8E9F-80627540B950.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="3-3-图像的基本运算"><a href="#3-3-图像的基本运算" class="headerlink" title="3.3 图像的基本运算"></a>3.3 图像的基本运算</h2><h3 id="3-3-1-点运算"><a href="#3-3-1-点运算" class="headerlink" title="3.3.1 点运算"></a>3.3.1 点运算</h3><p><strong>点运算：</strong>是指对一幅图像中每个像素点的灰度值进行计算</p><p><img src="/images/image-7.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><strong>点运算的效果</strong>：点运算可以改变图像数据所占据的灰度值范围，从而改善图像显示效果</p><p><strong>点运算的分类</strong>：线性点运算，非线性点运算</p><p><strong>线性点运算</strong>：灰度变换函数形式可以采用线性方程描述</p><p><img src="/images/image-8.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><strong>非线性点运算</strong>：非线性点运算的输出灰度级与输入灰度级呈非线性关系，常见的非线性灰度变换为对数变换和次幂变换</p><p><img src="/images/image-9.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><strong>注意：</strong></p><ul><li>点运算是否会改变图像内像素点之间的空间位置关系？</li></ul><p>不会！点运算是一种像素的逐点运算，它与相邻的像素之间没有运算关系，点运算不会改变图像内像素点之间的空间位置关系。</p><ul><li>对图像灰度的拉伸，非线性拉伸与分段线性拉伸的区别？</li></ul><p>非线性拉伸不是通过在不同灰度值区间选择不同的线性方程来实现对不同灰度值区间的扩展与压缩。而是在整个灰度值范围内采用统一的非线性变换函数。利用函数的数学性质实现对不同灰度值区间的扩展与压缩。</p><h3 id="3-3-2-代数运算"><a href="#3-3-2-代数运算" class="headerlink" title="3.3.2 代数运算"></a>3.3.2 代数运算</h3><p><strong>代数运算：</strong>将<strong>两幅或多幅</strong>图像通过对应像素之间的加、减、乘、除运算得到输出图像。</p><p><img src="/images/image-11.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><strong>加法运算</strong>：通常用于平均值降噪的场合。</p><p><strong>减法运算（差影法）</strong>：检测同一场景两幅图像之间的变化；混合图像的分离；消除背景影响。</p><p><strong>乘法运算</strong>：图像的局部显示；改变图像的灰度级</p><p><strong>除法运算</strong>：可用于改变图像的灰度级</p><h3 id="3-3-3-逻辑运算"><a href="#3-3-3-逻辑运算" class="headerlink" title="3.3.3 逻辑运算"></a>3.3.3 逻辑运算</h3><p><strong>逻辑运算：</strong>将<strong>两幅或多幅</strong>图像通过对应像素之间的逻辑与、或、非运算得到输出图像</p><p>“与”、“或”逻辑运算可以从一幅图像中提取子图像。</p><h3 id="3-3-4-几何运算"><a href="#3-3-4-几何运算" class="headerlink" title="3.3.4 几何运算"></a>3.3.4 几何运算</h3><p>几何运算：改变图像中物体对象（像素）之间的空间关系。几何变换可以分为图像的位置变换（平移、镜像、旋转）、形状变换（放大、缩小）以及图像的复合变换等。</p><h4 id="图像的平移"><a href="#图像的平移" class="headerlink" title="图像的平移"></a>图像的平移</h4><p><img src="/images/image-12.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/image-13.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h4 id="图像的镜像：水平镜像和垂直镜像"><a href="#图像的镜像：水平镜像和垂直镜像" class="headerlink" title="图像的镜像：水平镜像和垂直镜像"></a>图像的镜像：水平镜像和垂直镜像</h4><p><img src="/images/image-15.png"> <img src="/images/image-14.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/image-17.png"> <img src="/images/image-16.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h4 id="图像的旋转"><a href="#图像的旋转" class="headerlink" title="图像的旋转"></a>图像的旋转</h4><p>以图像的中心为原点，旋转一定的角度，即将图像上的所有像素都旋转一个相同的角度。</p><p><img src="/images/image-18.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/image-19.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>注意：</p><ul><li>图像旋转之后，由于数字图像的坐标值必须是整数，因此，可能引起图像部分像素点的局部改变，所以，这时图像的大小也会发生一定的改变。</li><li>为了避免图像信息的丢失，图像旋转之后必须进行平移变换（或者先平移，在旋转）。</li><li>图像旋转之后，会出现许多空洞点，我们需要对这些空洞点必须进行填充处理，进行插值处理</li></ul><h4 id="图像的缩放"><a href="#图像的缩放" class="headerlink" title="图像的缩放"></a>图像的缩放</h4><p><img src="/images/E765E539-EB6C-4640-A729-23EFD031511C.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/ACC89F15-9E5D-49D7-9614-666131C2E8B9.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="3-3-5-灰度插值"><a href="#3-3-5-灰度插值" class="headerlink" title="3.3.5 灰度插值"></a>3.3.5 灰度插值</h3><p>在图像放大的正变换中，出现很多空格，因此，需要对放大后所多出来的一些空格填入适当的像素值。一般采用<strong>最近邻插值和线性插值法</strong>。</p><p><strong>最邻近插值</strong>：最近邻法是将<img src="/images/image-21.png"> <img src="/images/VC9YM177S3GJAIBM2.png">点最近的整数坐标<img src="/images/image-22.png"> <img src="/images/VC9YM177S3GJAIBM2.png">点的灰度值取为<img src="/images/image-23.png"><img src="/images/VC9YM177S3GJAIBM2.png">点的灰度值。</p><p>在该点各相邻像素间灰度变化较小时，这种方法是一种简单快捷的方法，但当该点相邻像素间灰度差很大时，这种灰度估值方法会产生较大的误差。计算简单，容易产生锯齿现象。</p><p><strong>双线性插值法</strong>：是最邻近法的改进版，效果较好，但是具有低通滤波性，使高频分量受损，图像轮廓受损。会引入平滑效应，使图像产生模糊，清晰度下降。可以采用效果更好的三次内插法。</p><p><strong>三次内插法</strong>：可精确地恢复原函数，当然也就可精确得到采样点间任意点的值。此方法计算量很大，但精度高，能保持较好的图像边缘。</p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>数字图像处理期末复习（二）数字图像处理基础</title>
    <link href="/2021/06/16/output/shuzituxiang2/index/"/>
    <url>/2021/06/16/output/shuzituxiang2/index/</url>
    
    <content type="html"><![CDATA[<h2 id="2-1-图像的数字化"><a href="#2-1-图像的数字化" class="headerlink" title="2.1 图像的数字化"></a>2.1 图像的数字化</h2><p>将一幅画面转化成计算机能处理的形式——数字图像的过程。它包括<strong>采样</strong>和<strong>量化</strong>两个过程。像素的位置和灰度就是像素的属性。</p><h2 id="2-2-图像的采样和量化"><a href="#2-2-图像的采样和量化" class="headerlink" title="2.2 图像的采样和量化"></a>2.2 图像的采样和量化</h2><h3 id="2-2-1-采样"><a href="#2-2-1-采样" class="headerlink" title="2.2.1 采样"></a>2.2.1 采样</h3><p><strong>空间坐标的离散化。</strong></p><p>将空间中连续的图像变换成离散点的操作成为采样。若横向的像素数（列数）为M ，纵向的像素数（行数）为N，则图像总像素数为M*N个像素。</p><ul><li>采样间隔越大，所得图像像素数越少，空间分辨率低，质量差，严重时出现马赛克效应；</li><li>采样间隔越小，所得图像像素数越多，空间分辨率高，图像质量好，但数据量大。</li></ul><h3 id="2-2-2-量化"><a href="#2-2-2-量化" class="headerlink" title="2.2.2 量化"></a>2.2.2 量化</h3><p><strong>灰度值的离散化。</strong></p><p>图像采样后分割成离散的像素，但是其灰度值是连续的，计算机不能处理，将像素灰度转换成离散的数值的过程称为量化。</p><ul><li>量化等级越多，图像层次越丰富，灰度分辨率高，图像质量好，但数据量大；</li><li>量化等级越少，图像层次欠丰富，灰度分辨率低，会出现假轮廓现象，图像质量变差，但数据量小；</li></ul><h2 id="2-3-像素间的关系"><a href="#2-3-像素间的关系" class="headerlink" title="2.3 像素间的关系"></a>2.3 像素间的关系</h2><h3 id="2-3-0-像素"><a href="#2-3-0-像素" class="headerlink" title="2.3.0 像素"></a>2.3.0 像素</h3><ol><li><strong>数字图像的基本组成单元</strong></li><li><strong>图像中的每个像素有一定的空间位置，可以理解成坐标</strong></li><li><strong>在每个像素，有一个值（可以是向量）表示强度</strong></li></ol><p>对于一个像素，与他关系最密切的是它的邻近像素。</p><h3 id="2-3-1-像素的相邻和邻域"><a href="#2-3-1-像素的相邻和邻域" class="headerlink" title="2.3.1 像素的相邻和邻域"></a>2.3.1 像素的相邻和邻域</h3><p>图像中像素的相邻和邻域有3种：</p><ul><li><strong>相邻像素与4邻域</strong></li></ul><p><img src="/images/FA11FB1F-7DC2-47E1-BA19-86BB93E6A3B1.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><ul><li><strong>对角相邻像素与4对角邻域</strong></li></ul><p><img src="/images/17D541E5-A6A8-43A7-AB40-DBBAF8EEB09C.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><ul><li><strong>8邻域</strong></li></ul><p><img src="/images/BECBD576-3966-495F-95E4-CBFD85412B14.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="2-3-2-像素的邻接性和连通性"><a href="#2-3-2-像素的邻接性和连通性" class="headerlink" title="2.3.2 像素的邻接性和连通性"></a>2.3.2 像素的邻接性和连通性</h3><p>为了确定两个像素是否连通，必须确定他们是否相邻及它们的灰度时候满足特定的相似性准则（或者说，它们的灰度值是否相等）。</p><p>例如：当两个像素是4邻接，但是仅当它们的灰度值相同时才能说是连通的。</p><p><img src="/images/E269A7EA-D0A1-49DA-ADA0-FA128D166E1D.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><p>令V是用于定义邻接性的灰度值集合，（V是一个规则，例如V&#x3D;{|A-B≤2|}）如果q在p的四邻域N4(p)集中，且p和q满足V，则称p和q是4邻接，邻接性就是连通性。</p><p><strong>注意：</strong></p><ul><li><strong>4邻接必然是8邻接，反之不然；m邻接必然是8邻接，反之不然。</strong></li><li><strong>m邻接是介于4邻接和8邻接之间的。</strong></li><li><strong>m邻接是8邻接的变形，可以消除8邻接中的多路问题</strong></li></ul><h3 id="2-3-3-距离的度量"><a href="#2-3-3-距离的度量" class="headerlink" title="2.3.3 距离的度量"></a>2.3.3 距离的度量</h3><p>像素在空间的接近程度可以用像素之间的距离来度量。为测量距离需要定义距离度量函数。给定三个像素，其坐标分别为</p><p><img src="/images/20200203155110621.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><p><img src="/images/image-2.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h2 id="2-4-图像的分类"><a href="#2-4-图像的分类" class="headerlink" title="2.4 图像的分类"></a>2.4 图像的分类</h2><p><img src="/images/image-3.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="2-4-1-位图"><a href="#2-4-1-位图" class="headerlink" title="2.4.1 位图"></a>2.4.1 位图</h3><p>位图是静止图像的一种。位图是通过许多像素点表示一幅图像，每个像素具有颜色属性和位置属性。</p><p><img src="/images/image-4.png"> <img src="/images/VC9YM177S3GJAIBM2.png"></p>]]></content>
    
    
    <categories>
      
      <category>数字图像处理</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>给你的博客网站添加一个看板娘</title>
    <link href="/2021/05/02/output/live2d/index/"/>
    <url>/2021/05/02/output/live2d/index/</url>
    
    <content type="html"><![CDATA[<p>致谢大佬：<a href="https://m1314.cn/287.html">Mario</a></p><h3 id="项目下载地址"><a href="#项目下载地址" class="headerlink" title="项目下载地址"></a>项目下载地址</h3><p><a href="https://github.com/jujimeizuo/wordpress_live2d">https://github.com/jujimeizuo/wordpress_live2d</a></p><h3 id="使用须知"><a href="#使用须知" class="headerlink" title="使用须知"></a>使用须知</h3><p>需要 <code>Font Awesome 4.7.0</code> 支持，请确保相关样式表已在页面中加载，例如在 <code>&lt;head&gt;</code> 中加入</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs abnf">&lt;link rel<span class="hljs-operator">=</span><span class="hljs-string">&quot;stylesheet&quot;</span> href<span class="hljs-operator">=</span><span class="hljs-string">&quot;https://cdn.jsdelivr.net/npm/font-awesome/css/font-awesome.min.css&quot;</span><br></code></pre></td></tr></table></figure><p> </p><h3 id="项目代码"><a href="#项目代码" class="headerlink" title="项目代码"></a>项目代码</h3><p><a href="https://github.com/jujimeizuo/wordpress_live2d">适用于Sakura主题的live2d + 少女前线API</a></p><h4 id="少女前线API版"><a href="#少女前线API版" class="headerlink" title="少女前线API版"></a>少女前线API版</h4><blockquote><ol><li>如果你是小白，或者只需要最基础的功能，请将上方 <strong>项目代码</strong> 下载下来【前面的 <code>Font Awesome</code> 的一行代码（<strong>看需求添加</strong>）】，将 <code>live2d_api</code> 目录放到你的站点根目录，新建一个 <code>live2d</code> 目录将项目的其他文件都放进去。</li><li>修改 <code>autoload.js</code> 文件中第37行的 <code>apiPath</code> 为你的 <code>https://你的域名/live2d_api/</code>, 第2行和第3行路径改为 <code>https://你的域名/live2d/</code></li><li>然后在你主题的 <code>footer.php</code> 文件 <code>&lt;/body&gt;</code> 标签之上引用即可</li></ol></blockquote><p> </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;https://你的域名/live2d/autoload.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="效果示意图"><a href="#效果示意图" class="headerlink" title="效果示意图"></a>效果示意图</h3><p><img src="/images/EKP694EJX@QK_4.png"><img src="/images/VC9YM177S3GJAIBM2.png"></p><h3 id="其他说明"><a href="#其他说明" class="headerlink" title="其他说明"></a>其他说明</h3><p><code>autoload.js</code> 中的 <code>apiPath:</code> 为 live2d API 接口，默认即可，如果你有其他的也可以修改 <code>autoload.js</code> 中的 <code>cdnPath:</code> 为对象存储路径，注意跨域的问题，不使用请注释掉 Json配置（SDK 2）：<a href="https://live2d.pavostudio.com/doc/zh-cn/live2d/model-config-sdk2/">https://live2d.pavostudio.com/doc/zh-cn/live2d/model-config-sdk2/</a></p>]]></content>
    
    
    <categories>
      
      <category>wordpress美化</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>国内镜像网站</title>
    <link href="/2021/04/27/output/mirror/index/"/>
    <url>/2021/04/27/output/mirror/index/</url>
    
    <content type="html"><![CDATA[<h1 id="中国科学技术大学：http-mirrors-ustc-edu-cn"><a href="#中国科学技术大学：http-mirrors-ustc-edu-cn" class="headerlink" title="中国科学技术大学：http://mirrors.ustc.edu.cn/"></a>中国科学技术大学：<a href="http://mirrors.ustc.edu.cn/qtproject/">http://mirrors.ustc.edu.cn/</a></h1><h1 id="清华大学：https-mirrors-tuna-tsinghua-edu-cn"><a href="#清华大学：https-mirrors-tuna-tsinghua-edu-cn" class="headerlink" title="清华大学：https://mirrors.tuna.tsinghua.edu.cn/"></a>清华大学：<a href="https://mirrors.tuna.tsinghua.edu.cn/qt/">https://mirrors.tuna.tsinghua.edu.cn/</a></h1><h1 id="北京理工大学：http-mirror-bit-edu-cn"><a href="#北京理工大学：http-mirror-bit-edu-cn" class="headerlink" title="北京理工大学：http://mirror.bit.edu.cn/"></a>北京理工大学：<a href="http://mirror.bit.edu.cn/qtproject/">http://mirror.bit.edu.cn/</a></h1><h1 id="中国互联网络信息中心：https-mirrors-cnnic-cn"><a href="#中国互联网络信息中心：https-mirrors-cnnic-cn" class="headerlink" title="中国互联网络信息中心：https://mirrors.cnnic.cn/"></a>中国互联网络信息中心：<a href="https://mirrors.cnnic.cn/qt/">https://mirrors.cnnic.cn/</a></h1>]]></content>
    
    
    <categories>
      
      <category>黑科技</category>
      
    </categories>
    
    
  </entry>
  
  
  
  <entry>
    <title>世界，您好！</title>
    <link href="/2021/04/25/output/hello-world/index/"/>
    <url>/2021/04/25/output/hello-world/index/</url>
    
    <content type="html"><![CDATA[<figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cout &lt;&lt; <span class="hljs-string">&quot;Hello Wordpress&quot;</span> &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
